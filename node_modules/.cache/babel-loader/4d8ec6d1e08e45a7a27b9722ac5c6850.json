{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nodes from '../parser/cssNodes.js';\nimport { Symbols } from '../parser/cssSymbolScope.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport * as strings from '../utils/strings.js';\nimport { Position, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind, CompletionItemTag } from '../cssLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nimport { isDefined } from '../utils/objects.js';\nvar localize = nls.loadMessageBundle();\nvar SnippetFormat = InsertTextFormat.Snippet;\nvar SortTexts;\n\n(function (SortTexts) {\n  // char code 32, comes before everything\n  SortTexts[\"Enums\"] = \" \";\n  SortTexts[\"Normal\"] = \"d\";\n  SortTexts[\"VendorPrefixed\"] = \"x\";\n  SortTexts[\"Term\"] = \"y\";\n  SortTexts[\"Variable\"] = \"z\";\n})(SortTexts || (SortTexts = {}));\n\nvar CSSCompletion =\n/** @class */\nfunction () {\n  function CSSCompletion(variablePrefix, clientCapabilities) {\n    if (variablePrefix === void 0) {\n      variablePrefix = null;\n    }\n\n    this.variablePrefix = variablePrefix;\n    this.clientCapabilities = clientCapabilities;\n    this.completionParticipants = [];\n    this.valueTypes = [nodes.NodeType.Identifier, nodes.NodeType.Value, nodes.NodeType.StringLiteral, nodes.NodeType.URILiteral, nodes.NodeType.NumericValue, nodes.NodeType.HexColorValue, nodes.NodeType.VariableName, nodes.NodeType.Prio];\n  }\n\n  CSSCompletion.prototype.configure = function (settings) {\n    this.settings = settings;\n  };\n\n  CSSCompletion.prototype.getSymbolContext = function () {\n    if (!this.symbolContext) {\n      this.symbolContext = new Symbols(this.styleSheet);\n    }\n\n    return this.symbolContext;\n  };\n\n  CSSCompletion.prototype.setCompletionParticipants = function (registeredCompletionParticipants) {\n    this.completionParticipants = registeredCompletionParticipants || [];\n  };\n\n  CSSCompletion.prototype.doComplete = function (document, position, styleSheet) {\n    this.offset = document.offsetAt(position);\n    this.position = position;\n    this.currentWord = getCurrentWord(document, this.offset);\n    this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n    this.textDocument = document;\n    this.styleSheet = styleSheet;\n\n    try {\n      var result = {\n        isIncomplete: false,\n        items: []\n      };\n      this.nodePath = nodes.getNodePath(this.styleSheet, this.offset);\n\n      for (var i = this.nodePath.length - 1; i >= 0; i--) {\n        var node = this.nodePath[i];\n\n        if (node instanceof nodes.Property) {\n          this.getCompletionsForDeclarationProperty(node.getParent(), result);\n        } else if (node instanceof nodes.Expression) {\n          if (node.parent instanceof nodes.Interpolation) {\n            this.getVariableProposals(null, result);\n          } else {\n            this.getCompletionsForExpression(node, result);\n          }\n        } else if (node instanceof nodes.SimpleSelector) {\n          var parentRef = node.findAParent(nodes.NodeType.ExtendsReference, nodes.NodeType.Ruleset);\n\n          if (parentRef) {\n            if (parentRef.type === nodes.NodeType.ExtendsReference) {\n              this.getCompletionsForExtendsReference(parentRef, node, result);\n            } else {\n              var parentRuleSet = parentRef;\n              this.getCompletionsForSelector(parentRuleSet, parentRuleSet && parentRuleSet.isNested(), result);\n            }\n          }\n        } else if (node instanceof nodes.FunctionArgument) {\n          this.getCompletionsForFunctionArgument(node, node.getParent(), result);\n        } else if (node instanceof nodes.Declarations) {\n          this.getCompletionsForDeclarations(node, result);\n        } else if (node instanceof nodes.VariableDeclaration) {\n          this.getCompletionsForVariableDeclaration(node, result);\n        } else if (node instanceof nodes.RuleSet) {\n          this.getCompletionsForRuleSet(node, result);\n        } else if (node instanceof nodes.Interpolation) {\n          this.getCompletionsForInterpolation(node, result);\n        } else if (node instanceof nodes.FunctionDeclaration) {\n          this.getCompletionsForFunctionDeclaration(node, result);\n        } else if (node instanceof nodes.MixinReference) {\n          this.getCompletionsForMixinReference(node, result);\n        } else if (node instanceof nodes.Function) {\n          this.getCompletionsForFunctionArgument(null, node, result);\n        } else if (node instanceof nodes.Supports) {\n          this.getCompletionsForSupports(node, result);\n        } else if (node instanceof nodes.SupportsCondition) {\n          this.getCompletionsForSupportsCondition(node, result);\n        } else if (node instanceof nodes.ExtendsReference) {\n          this.getCompletionsForExtendsReference(node, null, result);\n        } else if (node.type === nodes.NodeType.URILiteral) {\n          this.getCompletionForUriLiteralValue(node, result);\n        } else if (node.parent === null) {\n          this.getCompletionForTopLevel(result);\n        } else if (node.type === nodes.NodeType.StringLiteral && this.isImportPathParent(node.parent.type)) {\n          this.getCompletionForImportPath(node, result); // } else if (node instanceof nodes.Variable) {\n          // this.getCompletionsForVariableDeclaration()\n        } else {\n          continue;\n        }\n\n        if (result.items.length > 0 || this.offset > node.offset) {\n          return this.finalize(result);\n        }\n      }\n\n      this.getCompletionsForStylesheet(result);\n\n      if (result.items.length === 0) {\n        if (this.variablePrefix && this.currentWord.indexOf(this.variablePrefix) === 0) {\n          this.getVariableProposals(null, result);\n        }\n      }\n\n      return this.finalize(result);\n    } finally {\n      // don't hold on any state, clear symbolContext\n      this.position = null;\n      this.currentWord = null;\n      this.textDocument = null;\n      this.styleSheet = null;\n      this.symbolContext = null;\n      this.defaultReplaceRange = null;\n      this.nodePath = null;\n    }\n  };\n\n  CSSCompletion.prototype.isImportPathParent = function (type) {\n    return type === nodes.NodeType.Import;\n  };\n\n  CSSCompletion.prototype.finalize = function (result) {\n    var needsSortText = result.items.some(function (i) {\n      return !!i.sortText || i.label[0] === '-';\n    });\n\n    if (needsSortText) {\n      result.items.forEach(function (item, index) {\n        if (!item.sortText) {\n          if (item.label[0] === '-') {\n            item.sortText = SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n          } else {\n            item.sortText = SortTexts.Normal + '_' + computeRankNumber(index);\n          }\n        } else {\n          if (item.label[0] === '-') {\n            item.sortText += SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n          } else {\n            item.sortText += SortTexts.Normal + '_' + computeRankNumber(index);\n          }\n        }\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.findInNodePath = function () {\n    var types = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      types[_i] = arguments[_i];\n    }\n\n    for (var i = this.nodePath.length - 1; i >= 0; i--) {\n      var node = this.nodePath[i];\n\n      if (types.indexOf(node.type) !== -1) {\n        return node;\n      }\n    }\n\n    return null;\n  };\n\n  CSSCompletion.prototype.getCompletionsForDeclarationProperty = function (declaration, result) {\n    return this.getPropertyProposals(declaration, result);\n  };\n\n  CSSCompletion.prototype.getPropertyProposals = function (declaration, result) {\n    var _this = this;\n\n    var triggerPropertyValueCompletion = this.isTriggerPropertyValueCompletionEnabled;\n    var completePropertyWithSemicolon = this.isCompletePropertyWithSemicolonEnabled;\n    var properties = languageFacts.cssDataManager.getProperties();\n    properties.forEach(function (entry) {\n      var range;\n      var insertText;\n      var retrigger = false;\n\n      if (declaration) {\n        range = _this.getCompletionRange(declaration.getProperty());\n        insertText = entry.name;\n\n        if (!isDefined(declaration.colonPosition)) {\n          insertText += ': ';\n          retrigger = true;\n        }\n      } else {\n        range = _this.getCompletionRange(null);\n        insertText = entry.name + ': ';\n        retrigger = true;\n      } // Empty .selector { | } case\n\n\n      if (!declaration && completePropertyWithSemicolon) {\n        insertText += '$0;';\n      } // Cases such as .selector { p; } or .selector { p:; }\n\n\n      if (declaration && !declaration.semicolonPosition) {\n        if (completePropertyWithSemicolon && _this.offset >= _this.textDocument.offsetAt(range.end)) {\n          insertText += '$0;';\n        }\n      }\n\n      var item = {\n        label: entry.name,\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        textEdit: TextEdit.replace(range, insertText),\n        insertTextFormat: InsertTextFormat.Snippet,\n        kind: CompletionItemKind.Property\n      };\n\n      if (!entry.restrictions) {\n        retrigger = false;\n      }\n\n      if (triggerPropertyValueCompletion && retrigger) {\n        item.command = {\n          title: 'Suggest',\n          command: 'editor.action.triggerSuggest'\n        };\n      }\n\n      if (strings.startsWith(entry.name, '-')) {\n        item.sortText = SortTexts.VendorPrefixed;\n      }\n\n      result.items.push(item);\n    });\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssProperty) {\n        participant.onCssProperty({\n          propertyName: _this.currentWord,\n          range: _this.defaultReplaceRange\n        });\n      }\n    });\n    return result;\n  };\n\n  Object.defineProperty(CSSCompletion.prototype, \"isTriggerPropertyValueCompletionEnabled\", {\n    get: function () {\n      if (!this.settings || !this.settings.completion || this.settings.completion.triggerPropertyValueCompletion === undefined) {\n        return true;\n      }\n\n      return this.settings.completion.triggerPropertyValueCompletion;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CSSCompletion.prototype, \"isCompletePropertyWithSemicolonEnabled\", {\n    get: function () {\n      if (!this.settings || !this.settings.completion || this.settings.completion.completePropertyWithSemicolon === undefined) {\n        return true;\n      }\n\n      return this.settings.completion.completePropertyWithSemicolon;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CSSCompletion.prototype.getCompletionsForDeclarationValue = function (node, result) {\n    var _this = this;\n\n    var propertyName = node.getFullPropertyName();\n    var entry = languageFacts.cssDataManager.getProperty(propertyName);\n    var existingNode = node.getValue() || null;\n\n    while (existingNode && existingNode.hasChildren()) {\n      existingNode = existingNode.findChildAtOffset(this.offset, false);\n    }\n\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssPropertyValue) {\n        participant.onCssPropertyValue({\n          propertyName: propertyName,\n          propertyValue: _this.currentWord,\n          range: _this.getCompletionRange(existingNode)\n        });\n      }\n    });\n\n    if (entry) {\n      if (entry.restrictions) {\n        for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n          var restriction = _a[_i];\n\n          switch (restriction) {\n            case 'color':\n              this.getColorProposals(entry, existingNode, result);\n              break;\n\n            case 'position':\n              this.getPositionProposals(entry, existingNode, result);\n              break;\n\n            case 'repeat':\n              this.getRepeatStyleProposals(entry, existingNode, result);\n              break;\n\n            case 'line-style':\n              this.getLineStyleProposals(entry, existingNode, result);\n              break;\n\n            case 'line-width':\n              this.getLineWidthProposals(entry, existingNode, result);\n              break;\n\n            case 'geometry-box':\n              this.getGeometryBoxProposals(entry, existingNode, result);\n              break;\n\n            case 'box':\n              this.getBoxProposals(entry, existingNode, result);\n              break;\n\n            case 'image':\n              this.getImageProposals(entry, existingNode, result);\n              break;\n\n            case 'timing-function':\n              this.getTimingFunctionProposals(entry, existingNode, result);\n              break;\n\n            case 'shape':\n              this.getBasicShapeProposals(entry, existingNode, result);\n              break;\n          }\n        }\n      }\n\n      this.getValueEnumProposals(entry, existingNode, result);\n      this.getCSSWideKeywordProposals(entry, existingNode, result);\n      this.getUnitProposals(entry, existingNode, result);\n    } else {\n      var existingValues = collectValues(this.styleSheet, node);\n\n      for (var _b = 0, _c = existingValues.getEntries(); _b < _c.length; _b++) {\n        var existingValue = _c[_b];\n        result.items.push({\n          label: existingValue,\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), existingValue),\n          kind: CompletionItemKind.Value\n        });\n      }\n    }\n\n    this.getVariableProposals(existingNode, result);\n    this.getTermProposals(entry, existingNode, result);\n    return result;\n  };\n\n  CSSCompletion.prototype.getValueEnumProposals = function (entry, existingNode, result) {\n    if (entry.values) {\n      for (var _i = 0, _a = entry.values; _i < _a.length; _i++) {\n        var value = _a[_i];\n        var insertString = value.name;\n        var insertTextFormat = void 0;\n\n        if (strings.endsWith(insertString, ')')) {\n          var from = insertString.lastIndexOf('(');\n\n          if (from !== -1) {\n            insertString = insertString.substr(0, from) + '($1)';\n            insertTextFormat = SnippetFormat;\n          }\n        }\n\n        var item = {\n          label: value.name,\n          documentation: languageFacts.getEntryDescription(value, this.doesSupportMarkdown()),\n          tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertString),\n          sortText: SortTexts.Enums,\n          kind: CompletionItemKind.Value,\n          insertTextFormat: insertTextFormat\n        };\n        result.items.push(item);\n      }\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCSSWideKeywordProposals = function (entry, existingNode, result) {\n    for (var keywords in languageFacts.cssWideKeywords) {\n      result.items.push({\n        label: keywords,\n        documentation: languageFacts.cssWideKeywords[keywords],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), keywords),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForInterpolation = function (node, result) {\n    if (this.offset >= node.offset + 2) {\n      this.getVariableProposals(null, result);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getVariableProposals = function (existingNode, result) {\n    var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n\n    for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n      var symbol = symbols_1[_i];\n      var insertText = strings.startsWith(symbol.name, '--') ? \"var(\" + symbol.name + \")\" : symbol.name;\n      var completionItem = {\n        label: symbol.name,\n        documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Variable,\n        sortText: SortTexts.Variable\n      };\n\n      if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n        completionItem.kind = CompletionItemKind.Color;\n      }\n\n      if (symbol.node.type === nodes.NodeType.FunctionParameter) {\n        var mixinNode = symbol.node.getParent();\n\n        if (mixinNode.type === nodes.NodeType.MixinDeclaration) {\n          completionItem.detail = localize('completion.argument', 'argument from \\'{0}\\'', mixinNode.getName());\n        }\n      }\n\n      result.items.push(completionItem);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getVariableProposalsForCSSVarFunction = function (result) {\n    var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n    symbols = symbols.filter(function (symbol) {\n      return strings.startsWith(symbol.name, '--');\n    });\n\n    for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {\n      var symbol = symbols_2[_i];\n      var completionItem = {\n        label: symbol.name,\n        documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n        textEdit: TextEdit.replace(this.getCompletionRange(null), symbol.name),\n        kind: CompletionItemKind.Variable\n      };\n\n      if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n        completionItem.kind = CompletionItemKind.Color;\n      }\n\n      result.items.push(completionItem);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getUnitProposals = function (entry, existingNode, result) {\n    var currentWord = '0';\n\n    if (this.currentWord.length > 0) {\n      var numMatch = this.currentWord.match(/^-?\\d[\\.\\d+]*/);\n\n      if (numMatch) {\n        currentWord = numMatch[0];\n        result.isIncomplete = currentWord.length === this.currentWord.length;\n      }\n    } else if (this.currentWord.length === 0) {\n      result.isIncomplete = true;\n    }\n\n    if (existingNode && existingNode.parent && existingNode.parent.type === nodes.NodeType.Term) {\n      existingNode = existingNode.getParent(); // include the unary operator\n    }\n\n    if (entry.restrictions) {\n      for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n        var restriction = _a[_i];\n        var units = languageFacts.units[restriction];\n\n        if (units) {\n          for (var _b = 0, units_1 = units; _b < units_1.length; _b++) {\n            var unit = units_1[_b];\n            var insertText = currentWord + unit;\n            result.items.push({\n              label: insertText,\n              textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n              kind: CompletionItemKind.Unit\n            });\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionRange = function (existingNode) {\n    if (existingNode && existingNode.offset <= this.offset && this.offset <= existingNode.end) {\n      var end = existingNode.end !== -1 ? this.textDocument.positionAt(existingNode.end) : this.position;\n      var start = this.textDocument.positionAt(existingNode.offset);\n\n      if (start.line === end.line) {\n        return Range.create(start, end); // multi line edits are not allowed\n      }\n    }\n\n    return this.defaultReplaceRange;\n  };\n\n  CSSCompletion.prototype.getColorProposals = function (entry, existingNode, result) {\n    for (var color in languageFacts.colors) {\n      result.items.push({\n        label: color,\n        documentation: languageFacts.colors[color],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n        kind: CompletionItemKind.Color\n      });\n    }\n\n    for (var color in languageFacts.colorKeywords) {\n      result.items.push({\n        label: color,\n        documentation: languageFacts.colorKeywords[color],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    var colorValues = new Set();\n    this.styleSheet.acceptVisitor(new ColorValueCollector(colorValues, this.offset));\n\n    for (var _i = 0, _a = colorValues.getEntries(); _i < _a.length; _i++) {\n      var color = _a[_i];\n      result.items.push({\n        label: color,\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n        kind: CompletionItemKind.Color\n      });\n    }\n\n    var _loop_1 = function (p) {\n      var tabStop = 1;\n\n      var replaceFunction = function (_match, p1) {\n        return '${' + tabStop++ + ':' + p1 + '}';\n      };\n\n      var insertText = p.func.replace(/\\[?\\$(\\w+)\\]?/g, replaceFunction);\n      result.items.push({\n        label: p.func.substr(0, p.func.indexOf('(')),\n        detail: p.func,\n        documentation: p.desc,\n        textEdit: TextEdit.replace(this_1.getCompletionRange(existingNode), insertText),\n        insertTextFormat: SnippetFormat,\n        kind: CompletionItemKind.Function\n      });\n    };\n\n    var this_1 = this;\n\n    for (var _b = 0, _c = languageFacts.colorFunctions; _b < _c.length; _b++) {\n      var p = _c[_b];\n\n      _loop_1(p);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getPositionProposals = function (entry, existingNode, result) {\n    for (var position in languageFacts.positionKeywords) {\n      result.items.push({\n        label: position,\n        documentation: languageFacts.positionKeywords[position],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), position),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getRepeatStyleProposals = function (entry, existingNode, result) {\n    for (var repeat in languageFacts.repeatStyleKeywords) {\n      result.items.push({\n        label: repeat,\n        documentation: languageFacts.repeatStyleKeywords[repeat],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), repeat),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getLineStyleProposals = function (entry, existingNode, result) {\n    for (var lineStyle in languageFacts.lineStyleKeywords) {\n      result.items.push({\n        label: lineStyle,\n        documentation: languageFacts.lineStyleKeywords[lineStyle],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineStyle),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getLineWidthProposals = function (entry, existingNode, result) {\n    for (var _i = 0, _a = languageFacts.lineWidthKeywords; _i < _a.length; _i++) {\n      var lineWidth = _a[_i];\n      result.items.push({\n        label: lineWidth,\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineWidth),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getGeometryBoxProposals = function (entry, existingNode, result) {\n    for (var box in languageFacts.geometryBoxKeywords) {\n      result.items.push({\n        label: box,\n        documentation: languageFacts.geometryBoxKeywords[box],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getBoxProposals = function (entry, existingNode, result) {\n    for (var box in languageFacts.boxKeywords) {\n      result.items.push({\n        label: box,\n        documentation: languageFacts.boxKeywords[box],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n        kind: CompletionItemKind.Value\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getImageProposals = function (entry, existingNode, result) {\n    for (var image in languageFacts.imageFunctions) {\n      var insertText = moveCursorInsideParenthesis(image);\n      result.items.push({\n        label: image,\n        documentation: languageFacts.imageFunctions[image],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Function,\n        insertTextFormat: image !== insertText ? SnippetFormat : void 0\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getTimingFunctionProposals = function (entry, existingNode, result) {\n    for (var timing in languageFacts.transitionTimingFunctions) {\n      var insertText = moveCursorInsideParenthesis(timing);\n      result.items.push({\n        label: timing,\n        documentation: languageFacts.transitionTimingFunctions[timing],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Function,\n        insertTextFormat: timing !== insertText ? SnippetFormat : void 0\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getBasicShapeProposals = function (entry, existingNode, result) {\n    for (var shape in languageFacts.basicShapeFunctions) {\n      var insertText = moveCursorInsideParenthesis(shape);\n      result.items.push({\n        label: shape,\n        documentation: languageFacts.basicShapeFunctions[shape],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Function,\n        insertTextFormat: shape !== insertText ? SnippetFormat : void 0\n      });\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForStylesheet = function (result) {\n    var node = this.styleSheet.findFirstChildBeforeOffset(this.offset);\n\n    if (!node) {\n      return this.getCompletionForTopLevel(result);\n    }\n\n    if (node instanceof nodes.RuleSet) {\n      return this.getCompletionsForRuleSet(node, result);\n    }\n\n    if (node instanceof nodes.Supports) {\n      return this.getCompletionsForSupports(node, result);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionForTopLevel = function (result) {\n    var _this = this;\n\n    languageFacts.cssDataManager.getAtDirectives().forEach(function (entry) {\n      result.items.push({\n        label: entry.name,\n        textEdit: TextEdit.replace(_this.getCompletionRange(null), entry.name),\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        kind: CompletionItemKind.Keyword\n      });\n    });\n    this.getCompletionsForSelector(null, false, result);\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForRuleSet = function (ruleSet, result) {\n    var declarations = ruleSet.getDeclarations();\n    var isAfter = declarations && declarations.endsWith('}') && this.offset >= declarations.end;\n\n    if (isAfter) {\n      return this.getCompletionForTopLevel(result);\n    }\n\n    var isInSelectors = !declarations || this.offset <= declarations.offset;\n\n    if (isInSelectors) {\n      return this.getCompletionsForSelector(ruleSet, ruleSet.isNested(), result);\n    }\n\n    return this.getCompletionsForDeclarations(ruleSet.getDeclarations(), result);\n  };\n\n  CSSCompletion.prototype.getCompletionsForSelector = function (ruleSet, isNested, result) {\n    var _this = this;\n\n    var existingNode = this.findInNodePath(nodes.NodeType.PseudoSelector, nodes.NodeType.IdentifierSelector, nodes.NodeType.ClassSelector, nodes.NodeType.ElementNameSelector);\n\n    if (!existingNode && this.offset - this.currentWord.length > 0 && this.textDocument.getText()[this.offset - this.currentWord.length - 1] === ':') {\n      // after the ':' of a pseudo selector, no node generated for just ':'\n      this.currentWord = ':' + this.currentWord;\n      this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n    }\n\n    var pseudoClasses = languageFacts.cssDataManager.getPseudoClasses();\n    pseudoClasses.forEach(function (entry) {\n      var insertText = moveCursorInsideParenthesis(entry.name);\n      var item = {\n        label: entry.name,\n        textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        kind: CompletionItemKind.Function,\n        insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n      };\n\n      if (strings.startsWith(entry.name, ':-')) {\n        item.sortText = SortTexts.VendorPrefixed;\n      }\n\n      result.items.push(item);\n    });\n    var pseudoElements = languageFacts.cssDataManager.getPseudoElements();\n    pseudoElements.forEach(function (entry) {\n      var insertText = moveCursorInsideParenthesis(entry.name);\n      var item = {\n        label: entry.name,\n        textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        kind: CompletionItemKind.Function,\n        insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n      };\n\n      if (strings.startsWith(entry.name, '::-')) {\n        item.sortText = SortTexts.VendorPrefixed;\n      }\n\n      result.items.push(item);\n    });\n\n    if (!isNested) {\n      // show html tags only for top level\n      for (var _i = 0, _a = languageFacts.html5Tags; _i < _a.length; _i++) {\n        var entry = _a[_i];\n        result.items.push({\n          label: entry,\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n          kind: CompletionItemKind.Keyword\n        });\n      }\n\n      for (var _b = 0, _c = languageFacts.svgElements; _b < _c.length; _b++) {\n        var entry = _c[_b];\n        result.items.push({\n          label: entry,\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n          kind: CompletionItemKind.Keyword\n        });\n      }\n    }\n\n    var visited = {};\n    visited[this.currentWord] = true;\n    var docText = this.textDocument.getText();\n    this.styleSheet.accept(function (n) {\n      if (n.type === nodes.NodeType.SimpleSelector && n.length > 0) {\n        var selector = docText.substr(n.offset, n.length);\n\n        if (selector.charAt(0) === '.' && !visited[selector]) {\n          visited[selector] = true;\n          result.items.push({\n            label: selector,\n            textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), selector),\n            kind: CompletionItemKind.Keyword\n          });\n        }\n\n        return false;\n      }\n\n      return true;\n    });\n\n    if (ruleSet && ruleSet.isNested()) {\n      var selector = ruleSet.getSelectors().findFirstChildBeforeOffset(this.offset);\n\n      if (selector && ruleSet.getSelectors().getChildren().indexOf(selector) === 0) {\n        this.getPropertyProposals(null, result);\n      }\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForDeclarations = function (declarations, result) {\n    if (!declarations || this.offset === declarations.offset) {\n      // incomplete nodes\n      return result;\n    }\n\n    var node = declarations.findFirstChildBeforeOffset(this.offset);\n\n    if (!node) {\n      return this.getCompletionsForDeclarationProperty(null, result);\n    }\n\n    if (node instanceof nodes.AbstractDeclaration) {\n      var declaration = node;\n\n      if (!isDefined(declaration.colonPosition) || this.offset <= declaration.colonPosition) {\n        // complete property\n        return this.getCompletionsForDeclarationProperty(declaration, result);\n      } else if (isDefined(declaration.semicolonPosition) && declaration.semicolonPosition < this.offset) {\n        if (this.offset === declaration.semicolonPosition + 1) {\n          return result; // don't show new properties right after semicolon (see Bug 15421:[intellisense] [css] Be less aggressive when manually typing CSS)\n        } // complete next property\n\n\n        return this.getCompletionsForDeclarationProperty(null, result);\n      }\n\n      if (declaration instanceof nodes.Declaration) {\n        // complete value\n        return this.getCompletionsForDeclarationValue(declaration, result);\n      }\n    } else if (node instanceof nodes.ExtendsReference) {\n      this.getCompletionsForExtendsReference(node, null, result);\n    } else if (this.currentWord && this.currentWord[0] === '@') {\n      this.getCompletionsForDeclarationProperty(null, result);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForVariableDeclaration = function (declaration, result) {\n    if (this.offset && isDefined(declaration.colonPosition) && this.offset > declaration.colonPosition) {\n      this.getVariableProposals(declaration.getValue(), result);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForExpression = function (expression, result) {\n    var parent = expression.getParent();\n\n    if (parent instanceof nodes.FunctionArgument) {\n      this.getCompletionsForFunctionArgument(parent, parent.getParent(), result);\n      return result;\n    }\n\n    var declaration = expression.findParent(nodes.NodeType.Declaration);\n\n    if (!declaration) {\n      this.getTermProposals(null, null, result);\n      return result;\n    }\n\n    var node = expression.findChildAtOffset(this.offset, true);\n\n    if (!node) {\n      return this.getCompletionsForDeclarationValue(declaration, result);\n    }\n\n    if (node instanceof nodes.NumericValue || node instanceof nodes.Identifier) {\n      return this.getCompletionsForDeclarationValue(declaration, result);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForFunctionArgument = function (arg, func, result) {\n    var identifier = func.getIdentifier();\n\n    if (identifier && identifier.matches('var')) {\n      if (!func.getArguments().hasChildren() || func.getArguments().getChild(0) === arg) {\n        this.getVariableProposalsForCSSVarFunction(result);\n      }\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForFunctionDeclaration = function (decl, result) {\n    var declarations = decl.getDeclarations();\n\n    if (declarations && this.offset > declarations.offset && this.offset < declarations.end) {\n      this.getTermProposals(null, null, result);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForMixinReference = function (ref, result) {\n    var allMixins = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Mixin);\n\n    for (var _i = 0, allMixins_1 = allMixins; _i < allMixins_1.length; _i++) {\n      var mixinSymbol = allMixins_1[_i];\n\n      if (mixinSymbol.node instanceof nodes.MixinDeclaration) {\n        result.items.push(this.makeTermProposal(mixinSymbol, mixinSymbol.node.getParameters(), null));\n      }\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getTermProposals = function (entry, existingNode, result) {\n    var allFunctions = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Function);\n\n    for (var _i = 0, allFunctions_1 = allFunctions; _i < allFunctions_1.length; _i++) {\n      var functionSymbol = allFunctions_1[_i];\n\n      if (functionSymbol.node instanceof nodes.FunctionDeclaration) {\n        result.items.push(this.makeTermProposal(functionSymbol, functionSymbol.node.getParameters(), existingNode));\n      }\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.makeTermProposal = function (symbol, parameters, existingNode) {\n    var decl = symbol.node;\n    var params = parameters.getChildren().map(function (c) {\n      return c instanceof nodes.FunctionParameter ? c.getName() : c.getText();\n    });\n    var insertText = symbol.name + '(' + params.map(function (p, index) {\n      return '${' + (index + 1) + ':' + p + '}';\n    }).join(', ') + ')';\n    return {\n      label: symbol.name,\n      detail: symbol.name + '(' + params.join(', ') + ')',\n      textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n      insertTextFormat: SnippetFormat,\n      kind: CompletionItemKind.Function,\n      sortText: SortTexts.Term\n    };\n  };\n\n  CSSCompletion.prototype.getCompletionsForSupportsCondition = function (supportsCondition, result) {\n    var child = supportsCondition.findFirstChildBeforeOffset(this.offset);\n\n    if (child) {\n      if (child instanceof nodes.Declaration) {\n        if (!isDefined(child.colonPosition) || this.offset <= child.colonPosition) {\n          return this.getCompletionsForDeclarationProperty(child, result);\n        } else {\n          return this.getCompletionsForDeclarationValue(child, result);\n        }\n      } else if (child instanceof nodes.SupportsCondition) {\n        return this.getCompletionsForSupportsCondition(child, result);\n      }\n    }\n\n    if (isDefined(supportsCondition.lParent) && this.offset > supportsCondition.lParent && (!isDefined(supportsCondition.rParent) || this.offset <= supportsCondition.rParent)) {\n      return this.getCompletionsForDeclarationProperty(null, result);\n    }\n\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionsForSupports = function (supports, result) {\n    var declarations = supports.getDeclarations();\n    var inInCondition = !declarations || this.offset <= declarations.offset;\n\n    if (inInCondition) {\n      var child = supports.findFirstChildBeforeOffset(this.offset);\n\n      if (child instanceof nodes.SupportsCondition) {\n        return this.getCompletionsForSupportsCondition(child, result);\n      }\n\n      return result;\n    }\n\n    return this.getCompletionForTopLevel(result);\n  };\n\n  CSSCompletion.prototype.getCompletionsForExtendsReference = function (extendsRef, existingNode, result) {\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionForUriLiteralValue = function (uriLiteralNode, result) {\n    var uriValue;\n    var position;\n    var range; // No children, empty value\n\n    if (!uriLiteralNode.hasChildren()) {\n      uriValue = '';\n      position = this.position;\n      var emptyURIValuePosition = this.textDocument.positionAt(uriLiteralNode.offset + 'url('.length);\n      range = Range.create(emptyURIValuePosition, emptyURIValuePosition);\n    } else {\n      var uriValueNode = uriLiteralNode.getChild(0);\n      uriValue = uriValueNode.getText();\n      position = this.position;\n      range = this.getCompletionRange(uriValueNode);\n    }\n\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssURILiteralValue) {\n        participant.onCssURILiteralValue({\n          uriValue: uriValue,\n          position: position,\n          range: range\n        });\n      }\n    });\n    return result;\n  };\n\n  CSSCompletion.prototype.getCompletionForImportPath = function (importPathNode, result) {\n    var _this = this;\n\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssImportPath) {\n        participant.onCssImportPath({\n          pathValue: importPathNode.getText(),\n          position: _this.position,\n          range: _this.getCompletionRange(importPathNode)\n        });\n      }\n    });\n    return result;\n  };\n\n  CSSCompletion.prototype.doesSupportMarkdown = function () {\n    if (!isDefined(this.supportsMarkdown)) {\n      if (!isDefined(this.clientCapabilities)) {\n        this.supportsMarkdown = true;\n        return this.supportsMarkdown;\n      }\n\n      var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n      this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n\n    return this.supportsMarkdown;\n  };\n\n  return CSSCompletion;\n}();\n\nexport { CSSCompletion };\n\nfunction isDeprecated(entry) {\n  if (entry.status && (entry.status === 'nonstandard' || entry.status === 'obsolete')) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Rank number should all be same length strings\n */\n\n\nfunction computeRankNumber(n) {\n  var nstr = n.toString();\n\n  switch (nstr.length) {\n    case 4:\n      return nstr;\n\n    case 3:\n      return '0' + nstr;\n\n    case 2:\n      return '00' + nstr;\n\n    case 1:\n      return '000' + nstr;\n\n    default:\n      return '0000';\n  }\n}\n\nvar Set =\n/** @class */\nfunction () {\n  function Set() {\n    this.entries = {};\n  }\n\n  Set.prototype.add = function (entry) {\n    this.entries[entry] = true;\n  };\n\n  Set.prototype.getEntries = function () {\n    return Object.keys(this.entries);\n  };\n\n  return Set;\n}();\n\nfunction moveCursorInsideParenthesis(text) {\n  return text.replace(/\\(\\)$/, \"($1)\");\n}\n\nfunction collectValues(styleSheet, declaration) {\n  var fullPropertyName = declaration.getFullPropertyName();\n  var entries = new Set();\n\n  function visitValue(node) {\n    if (node instanceof nodes.Identifier || node instanceof nodes.NumericValue || node instanceof nodes.HexColorValue) {\n      entries.add(node.getText());\n    }\n\n    return true;\n  }\n\n  function matchesProperty(decl) {\n    var propertyName = decl.getFullPropertyName();\n    return fullPropertyName === propertyName;\n  }\n\n  function vistNode(node) {\n    if (node instanceof nodes.Declaration && node !== declaration) {\n      if (matchesProperty(node)) {\n        var value = node.getValue();\n\n        if (value) {\n          value.accept(visitValue);\n        }\n      }\n    }\n\n    return true;\n  }\n\n  styleSheet.accept(vistNode);\n  return entries;\n}\n\nvar ColorValueCollector =\n/** @class */\nfunction () {\n  function ColorValueCollector(entries, currentOffset) {\n    this.entries = entries;\n    this.currentOffset = currentOffset; // nothing to do\n  }\n\n  ColorValueCollector.prototype.visitNode = function (node) {\n    if (node instanceof nodes.HexColorValue || node instanceof nodes.Function && languageFacts.isColorConstructor(node)) {\n      if (this.currentOffset < node.offset || node.end < this.currentOffset) {\n        this.entries.add(node.getText());\n      }\n    }\n\n    return true;\n  };\n\n  return ColorValueCollector;\n}();\n\nfunction getCurrentWord(document, offset) {\n  var i = offset - 1;\n  var text = document.getText();\n\n  while (i >= 0 && ' \\t\\n\\r\":{[()]},*>+'.indexOf(text.charAt(i)) === -1) {\n    i--;\n  }\n\n  return text.substring(i + 1, offset);\n}\n\nfunction isColorString(s) {\n  // From https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444\n  return s.toLowerCase() in languageFacts.colors || /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(s);\n}","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCompletion.js"],"names":["nodes","Symbols","languageFacts","strings","Position","CompletionItemKind","Range","TextEdit","InsertTextFormat","MarkupKind","CompletionItemTag","nls","isDefined","localize","loadMessageBundle","SnippetFormat","Snippet","SortTexts","CSSCompletion","variablePrefix","clientCapabilities","completionParticipants","valueTypes","NodeType","Identifier","Value","StringLiteral","URILiteral","NumericValue","HexColorValue","VariableName","Prio","prototype","configure","settings","getSymbolContext","symbolContext","styleSheet","setCompletionParticipants","registeredCompletionParticipants","doComplete","document","position","offset","offsetAt","currentWord","getCurrentWord","defaultReplaceRange","create","line","character","length","textDocument","result","isIncomplete","items","nodePath","getNodePath","i","node","Property","getCompletionsForDeclarationProperty","getParent","Expression","parent","Interpolation","getVariableProposals","getCompletionsForExpression","SimpleSelector","parentRef","findAParent","ExtendsReference","Ruleset","type","getCompletionsForExtendsReference","parentRuleSet","getCompletionsForSelector","isNested","FunctionArgument","getCompletionsForFunctionArgument","Declarations","getCompletionsForDeclarations","VariableDeclaration","getCompletionsForVariableDeclaration","RuleSet","getCompletionsForRuleSet","getCompletionsForInterpolation","FunctionDeclaration","getCompletionsForFunctionDeclaration","MixinReference","getCompletionsForMixinReference","Function","Supports","getCompletionsForSupports","SupportsCondition","getCompletionsForSupportsCondition","getCompletionForUriLiteralValue","getCompletionForTopLevel","isImportPathParent","getCompletionForImportPath","finalize","getCompletionsForStylesheet","indexOf","Import","needsSortText","some","sortText","label","forEach","item","index","VendorPrefixed","computeRankNumber","Normal","findInNodePath","types","_i","arguments","declaration","getPropertyProposals","_this","triggerPropertyValueCompletion","isTriggerPropertyValueCompletionEnabled","completePropertyWithSemicolon","isCompletePropertyWithSemicolonEnabled","properties","cssDataManager","getProperties","entry","range","insertText","retrigger","getCompletionRange","getProperty","name","colonPosition","semicolonPosition","end","documentation","getEntryDescription","doesSupportMarkdown","tags","isDeprecated","Deprecated","textEdit","replace","insertTextFormat","kind","restrictions","command","title","startsWith","push","participant","onCssProperty","propertyName","Object","defineProperty","get","completion","undefined","enumerable","configurable","getCompletionsForDeclarationValue","getFullPropertyName","existingNode","getValue","hasChildren","findChildAtOffset","onCssPropertyValue","propertyValue","_a","restriction","getColorProposals","getPositionProposals","getRepeatStyleProposals","getLineStyleProposals","getLineWidthProposals","getGeometryBoxProposals","getBoxProposals","getImageProposals","getTimingFunctionProposals","getBasicShapeProposals","getValueEnumProposals","getCSSWideKeywordProposals","getUnitProposals","existingValues","collectValues","_b","_c","getEntries","existingValue","getTermProposals","values","value","insertString","endsWith","from","lastIndexOf","substr","Enums","keywords","cssWideKeywords","symbols","findSymbolsAtOffset","ReferenceType","Variable","symbols_1","symbol","completionItem","getLimitedString","isColorString","Color","FunctionParameter","mixinNode","MixinDeclaration","detail","getName","getVariableProposalsForCSSVarFunction","filter","symbols_2","numMatch","match","Term","units","units_1","unit","Unit","positionAt","start","color","colors","colorKeywords","colorValues","Set","acceptVisitor","ColorValueCollector","_loop_1","p","tabStop","replaceFunction","_match","p1","func","desc","this_1","colorFunctions","positionKeywords","repeat","repeatStyleKeywords","lineStyle","lineStyleKeywords","lineWidthKeywords","lineWidth","box","geometryBoxKeywords","boxKeywords","image","imageFunctions","moveCursorInsideParenthesis","timing","transitionTimingFunctions","shape","basicShapeFunctions","findFirstChildBeforeOffset","getAtDirectives","Keyword","ruleSet","declarations","getDeclarations","isAfter","isInSelectors","PseudoSelector","IdentifierSelector","ClassSelector","ElementNameSelector","getText","pseudoClasses","getPseudoClasses","pseudoElements","getPseudoElements","html5Tags","svgElements","visited","docText","accept","n","selector","charAt","getSelectors","getChildren","AbstractDeclaration","Declaration","expression","findParent","arg","identifier","getIdentifier","matches","getArguments","getChild","decl","ref","allMixins","Mixin","allMixins_1","mixinSymbol","makeTermProposal","getParameters","allFunctions","allFunctions_1","functionSymbol","parameters","params","map","c","join","supportsCondition","child","lParent","rParent","supports","inInCondition","extendsRef","uriLiteralNode","uriValue","emptyURIValuePosition","uriValueNode","onCssURILiteralValue","importPathNode","onCssImportPath","pathValue","supportsMarkdown","Array","isArray","documentationFormat","Markdown","status","nstr","toString","entries","add","keys","text","fullPropertyName","visitValue","matchesProperty","vistNode","currentOffset","visitNode","isColorConstructor","substring","s","toLowerCase","test"],"mappings":"AAAA;;;;AAIA;;AACA,OAAO,KAAKA,KAAZ,MAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAO,KAAKC,aAAZ,MAA+B,2BAA/B;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,SAASC,QAAT,EAAmBC,kBAAnB,EAAuCC,KAAvC,EAA8CC,QAA9C,EAAwDC,gBAAxD,EAA0EC,UAA1E,EAAsFC,iBAAtF,QAA+G,wBAA/G;AACA,OAAO,KAAKC,GAAZ,MAAqB,kCAArB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,IAAIC,QAAQ,GAAGF,GAAG,CAACG,iBAAJ,EAAf;AACA,IAAIC,aAAa,GAAGP,gBAAgB,CAACQ,OAArC;AACA,IAAIC,SAAJ;;AACA,CAAC,UAAUA,SAAV,EAAqB;AAClB;AACAA,EAAAA,SAAS,CAAC,OAAD,CAAT,GAAqB,GAArB;AACAA,EAAAA,SAAS,CAAC,QAAD,CAAT,GAAsB,GAAtB;AACAA,EAAAA,SAAS,CAAC,gBAAD,CAAT,GAA8B,GAA9B;AACAA,EAAAA,SAAS,CAAC,MAAD,CAAT,GAAoB,GAApB;AACAA,EAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,GAAxB;AACH,CAPD,EAOGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAPZ;;AAQA,IAAIC,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,CAAuBC,cAAvB,EAAuCC,kBAAvC,EAA2D;AACvD,QAAID,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,MAAAA,cAAc,GAAG,IAAjB;AAAwB;;AACzD,SAAKA,cAAL,GAAsBA,cAAtB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,sBAAL,GAA8B,EAA9B;AACA,SAAKC,UAAL,GAAkB,CACdtB,KAAK,CAACuB,QAAN,CAAeC,UADD,EACaxB,KAAK,CAACuB,QAAN,CAAeE,KAD5B,EACmCzB,KAAK,CAACuB,QAAN,CAAeG,aADlD,EACiE1B,KAAK,CAACuB,QAAN,CAAeI,UADhF,EAC4F3B,KAAK,CAACuB,QAAN,CAAeK,YAD3G,EAEd5B,KAAK,CAACuB,QAAN,CAAeM,aAFD,EAEgB7B,KAAK,CAACuB,QAAN,CAAeO,YAF/B,EAE6C9B,KAAK,CAACuB,QAAN,CAAeQ,IAF5D,CAAlB;AAIH;;AACDb,EAAAA,aAAa,CAACc,SAAd,CAAwBC,SAAxB,GAAoC,UAAUC,QAAV,EAAoB;AACpD,SAAKA,QAAL,GAAgBA,QAAhB;AACH,GAFD;;AAGAhB,EAAAA,aAAa,CAACc,SAAd,CAAwBG,gBAAxB,GAA2C,YAAY;AACnD,QAAI,CAAC,KAAKC,aAAV,EAAyB;AACrB,WAAKA,aAAL,GAAqB,IAAInC,OAAJ,CAAY,KAAKoC,UAAjB,CAArB;AACH;;AACD,WAAO,KAAKD,aAAZ;AACH,GALD;;AAMAlB,EAAAA,aAAa,CAACc,SAAd,CAAwBM,yBAAxB,GAAoD,UAAUC,gCAAV,EAA4C;AAC5F,SAAKlB,sBAAL,GAA8BkB,gCAAgC,IAAI,EAAlE;AACH,GAFD;;AAGArB,EAAAA,aAAa,CAACc,SAAd,CAAwBQ,UAAxB,GAAqC,UAAUC,QAAV,EAAoBC,QAApB,EAA8BL,UAA9B,EAA0C;AAC3E,SAAKM,MAAL,GAAcF,QAAQ,CAACG,QAAT,CAAkBF,QAAlB,CAAd;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKG,WAAL,GAAmBC,cAAc,CAACL,QAAD,EAAW,KAAKE,MAAhB,CAAjC;AACA,SAAKI,mBAAL,GAA2BzC,KAAK,CAAC0C,MAAN,CAAa5C,QAAQ,CAAC4C,MAAT,CAAgB,KAAKN,QAAL,CAAcO,IAA9B,EAAoC,KAAKP,QAAL,CAAcQ,SAAd,GAA0B,KAAKL,WAAL,CAAiBM,MAA/E,CAAb,EAAqG,KAAKT,QAA1G,CAA3B;AACA,SAAKU,YAAL,GAAoBX,QAApB;AACA,SAAKJ,UAAL,GAAkBA,UAAlB;;AACA,QAAI;AACA,UAAIgB,MAAM,GAAG;AAAEC,QAAAA,YAAY,EAAE,KAAhB;AAAuBC,QAAAA,KAAK,EAAE;AAA9B,OAAb;AACA,WAAKC,QAAL,GAAgBxD,KAAK,CAACyD,WAAN,CAAkB,KAAKpB,UAAvB,EAAmC,KAAKM,MAAxC,CAAhB;;AACA,WAAK,IAAIe,CAAC,GAAG,KAAKF,QAAL,CAAcL,MAAd,GAAuB,CAApC,EAAuCO,CAAC,IAAI,CAA5C,EAA+CA,CAAC,EAAhD,EAAoD;AAChD,YAAIC,IAAI,GAAG,KAAKH,QAAL,CAAcE,CAAd,CAAX;;AACA,YAAIC,IAAI,YAAY3D,KAAK,CAAC4D,QAA1B,EAAoC;AAChC,eAAKC,oCAAL,CAA0CF,IAAI,CAACG,SAAL,EAA1C,EAA4DT,MAA5D;AACH,SAFD,MAGK,IAAIM,IAAI,YAAY3D,KAAK,CAAC+D,UAA1B,EAAsC;AACvC,cAAIJ,IAAI,CAACK,MAAL,YAAuBhE,KAAK,CAACiE,aAAjC,EAAgD;AAC5C,iBAAKC,oBAAL,CAA0B,IAA1B,EAAgCb,MAAhC;AACH,WAFD,MAGK;AACD,iBAAKc,2BAAL,CAAiCR,IAAjC,EAAuCN,MAAvC;AACH;AACJ,SAPI,MAQA,IAAIM,IAAI,YAAY3D,KAAK,CAACoE,cAA1B,EAA0C;AAC3C,cAAIC,SAAS,GAAGV,IAAI,CAACW,WAAL,CAAiBtE,KAAK,CAACuB,QAAN,CAAegD,gBAAhC,EAAkDvE,KAAK,CAACuB,QAAN,CAAeiD,OAAjE,CAAhB;;AACA,cAAIH,SAAJ,EAAe;AACX,gBAAIA,SAAS,CAACI,IAAV,KAAmBzE,KAAK,CAACuB,QAAN,CAAegD,gBAAtC,EAAwD;AACpD,mBAAKG,iCAAL,CAAuCL,SAAvC,EAAkDV,IAAlD,EAAwDN,MAAxD;AACH,aAFD,MAGK;AACD,kBAAIsB,aAAa,GAAGN,SAApB;AACA,mBAAKO,yBAAL,CAA+BD,aAA/B,EAA8CA,aAAa,IAAIA,aAAa,CAACE,QAAd,EAA/D,EAAyFxB,MAAzF;AACH;AACJ;AACJ,SAXI,MAYA,IAAIM,IAAI,YAAY3D,KAAK,CAAC8E,gBAA1B,EAA4C;AAC7C,eAAKC,iCAAL,CAAuCpB,IAAvC,EAA6CA,IAAI,CAACG,SAAL,EAA7C,EAA+DT,MAA/D;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAACgF,YAA1B,EAAwC;AACzC,eAAKC,6BAAL,CAAmCtB,IAAnC,EAAyCN,MAAzC;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAACkF,mBAA1B,EAA+C;AAChD,eAAKC,oCAAL,CAA0CxB,IAA1C,EAAgDN,MAAhD;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAACoF,OAA1B,EAAmC;AACpC,eAAKC,wBAAL,CAA8B1B,IAA9B,EAAoCN,MAApC;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAACiE,aAA1B,EAAyC;AAC1C,eAAKqB,8BAAL,CAAoC3B,IAApC,EAA0CN,MAA1C;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAACuF,mBAA1B,EAA+C;AAChD,eAAKC,oCAAL,CAA0C7B,IAA1C,EAAgDN,MAAhD;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAACyF,cAA1B,EAA0C;AAC3C,eAAKC,+BAAL,CAAqC/B,IAArC,EAA2CN,MAA3C;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAAC2F,QAA1B,EAAoC;AACrC,eAAKZ,iCAAL,CAAuC,IAAvC,EAA6CpB,IAA7C,EAAmDN,MAAnD;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAAC4F,QAA1B,EAAoC;AACrC,eAAKC,yBAAL,CAA+BlC,IAA/B,EAAqCN,MAArC;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAAC8F,iBAA1B,EAA6C;AAC9C,eAAKC,kCAAL,CAAwCpC,IAAxC,EAA8CN,MAA9C;AACH,SAFI,MAGA,IAAIM,IAAI,YAAY3D,KAAK,CAACuE,gBAA1B,EAA4C;AAC7C,eAAKG,iCAAL,CAAuCf,IAAvC,EAA6C,IAA7C,EAAmDN,MAAnD;AACH,SAFI,MAGA,IAAIM,IAAI,CAACc,IAAL,KAAczE,KAAK,CAACuB,QAAN,CAAeI,UAAjC,EAA6C;AAC9C,eAAKqE,+BAAL,CAAqCrC,IAArC,EAA2CN,MAA3C;AACH,SAFI,MAGA,IAAIM,IAAI,CAACK,MAAL,KAAgB,IAApB,EAA0B;AAC3B,eAAKiC,wBAAL,CAA8B5C,MAA9B;AACH,SAFI,MAGA,IAAIM,IAAI,CAACc,IAAL,KAAczE,KAAK,CAACuB,QAAN,CAAeG,aAA7B,IAA8C,KAAKwE,kBAAL,CAAwBvC,IAAI,CAACK,MAAL,CAAYS,IAApC,CAAlD,EAA6F;AAC9F,eAAK0B,0BAAL,CAAgCxC,IAAhC,EAAsCN,MAAtC,EAD8F,CAE9F;AACA;AACH,SAJI,MAKA;AACD;AACH;;AACD,YAAIA,MAAM,CAACE,KAAP,CAAaJ,MAAb,GAAsB,CAAtB,IAA2B,KAAKR,MAAL,GAAcgB,IAAI,CAAChB,MAAlD,EAA0D;AACtD,iBAAO,KAAKyD,QAAL,CAAc/C,MAAd,CAAP;AACH;AACJ;;AACD,WAAKgD,2BAAL,CAAiChD,MAAjC;;AACA,UAAIA,MAAM,CAACE,KAAP,CAAaJ,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,YAAI,KAAKhC,cAAL,IAAuB,KAAK0B,WAAL,CAAiByD,OAAjB,CAAyB,KAAKnF,cAA9B,MAAkD,CAA7E,EAAgF;AAC5E,eAAK+C,oBAAL,CAA0B,IAA1B,EAAgCb,MAAhC;AACH;AACJ;;AACD,aAAO,KAAK+C,QAAL,CAAc/C,MAAd,CAAP;AACH,KAtFD,SAuFQ;AACJ;AACA,WAAKX,QAAL,GAAgB,IAAhB;AACA,WAAKG,WAAL,GAAmB,IAAnB;AACA,WAAKO,YAAL,GAAoB,IAApB;AACA,WAAKf,UAAL,GAAkB,IAAlB;AACA,WAAKD,aAAL,GAAqB,IAArB;AACA,WAAKW,mBAAL,GAA2B,IAA3B;AACA,WAAKS,QAAL,GAAgB,IAAhB;AACH;AACJ,GAxGD;;AAyGAtC,EAAAA,aAAa,CAACc,SAAd,CAAwBkE,kBAAxB,GAA6C,UAAUzB,IAAV,EAAgB;AACzD,WAAOA,IAAI,KAAKzE,KAAK,CAACuB,QAAN,CAAegF,MAA/B;AACH,GAFD;;AAGArF,EAAAA,aAAa,CAACc,SAAd,CAAwBoE,QAAxB,GAAmC,UAAU/C,MAAV,EAAkB;AACjD,QAAImD,aAAa,GAAGnD,MAAM,CAACE,KAAP,CAAakD,IAAb,CAAkB,UAAU/C,CAAV,EAAa;AAAE,aAAO,CAAC,CAACA,CAAC,CAACgD,QAAJ,IAAgBhD,CAAC,CAACiD,KAAF,CAAQ,CAAR,MAAe,GAAtC;AAA4C,KAA7E,CAApB;;AACA,QAAIH,aAAJ,EAAmB;AACfnD,MAAAA,MAAM,CAACE,KAAP,CAAaqD,OAAb,CAAqB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AACxC,YAAI,CAACD,IAAI,CAACH,QAAV,EAAoB;AAChB,cAAIG,IAAI,CAACF,KAAL,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvBE,YAAAA,IAAI,CAACH,QAAL,GAAgBzF,SAAS,CAAC8F,cAAV,GAA2B,GAA3B,GAAiCC,iBAAiB,CAACF,KAAD,CAAlE;AACH,WAFD,MAGK;AACDD,YAAAA,IAAI,CAACH,QAAL,GAAgBzF,SAAS,CAACgG,MAAV,GAAmB,GAAnB,GAAyBD,iBAAiB,CAACF,KAAD,CAA1D;AACH;AACJ,SAPD,MAQK;AACD,cAAID,IAAI,CAACF,KAAL,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvBE,YAAAA,IAAI,CAACH,QAAL,IAAiBzF,SAAS,CAAC8F,cAAV,GAA2B,GAA3B,GAAiCC,iBAAiB,CAACF,KAAD,CAAnE;AACH,WAFD,MAGK;AACDD,YAAAA,IAAI,CAACH,QAAL,IAAiBzF,SAAS,CAACgG,MAAV,GAAmB,GAAnB,GAAyBD,iBAAiB,CAACF,KAAD,CAA3D;AACH;AACJ;AACJ,OAjBD;AAkBH;;AACD,WAAOzD,MAAP;AACH,GAvBD;;AAwBAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBkF,cAAxB,GAAyC,YAAY;AACjD,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAAClE,MAAhC,EAAwCiE,EAAE,EAA1C,EAA8C;AAC1CD,MAAAA,KAAK,CAACC,EAAD,CAAL,GAAYC,SAAS,CAACD,EAAD,CAArB;AACH;;AACD,SAAK,IAAI1D,CAAC,GAAG,KAAKF,QAAL,CAAcL,MAAd,GAAuB,CAApC,EAAuCO,CAAC,IAAI,CAA5C,EAA+CA,CAAC,EAAhD,EAAoD;AAChD,UAAIC,IAAI,GAAG,KAAKH,QAAL,CAAcE,CAAd,CAAX;;AACA,UAAIyD,KAAK,CAACb,OAAN,CAAc3C,IAAI,CAACc,IAAnB,MAA6B,CAAC,CAAlC,EAAqC;AACjC,eAAOd,IAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAZD;;AAaAzC,EAAAA,aAAa,CAACc,SAAd,CAAwB6B,oCAAxB,GAA+D,UAAUyD,WAAV,EAAuBjE,MAAvB,EAA+B;AAC1F,WAAO,KAAKkE,oBAAL,CAA0BD,WAA1B,EAAuCjE,MAAvC,CAAP;AACH,GAFD;;AAGAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBuF,oBAAxB,GAA+C,UAAUD,WAAV,EAAuBjE,MAAvB,EAA+B;AAC1E,QAAImE,KAAK,GAAG,IAAZ;;AACA,QAAIC,8BAA8B,GAAG,KAAKC,uCAA1C;AACA,QAAIC,6BAA6B,GAAG,KAAKC,sCAAzC;AACA,QAAIC,UAAU,GAAG3H,aAAa,CAAC4H,cAAd,CAA6BC,aAA7B,EAAjB;AACAF,IAAAA,UAAU,CAACjB,OAAX,CAAmB,UAAUoB,KAAV,EAAiB;AAChC,UAAIC,KAAJ;AACA,UAAIC,UAAJ;AACA,UAAIC,SAAS,GAAG,KAAhB;;AACA,UAAIb,WAAJ,EAAiB;AACbW,QAAAA,KAAK,GAAGT,KAAK,CAACY,kBAAN,CAAyBd,WAAW,CAACe,WAAZ,EAAzB,CAAR;AACAH,QAAAA,UAAU,GAAGF,KAAK,CAACM,IAAnB;;AACA,YAAI,CAAC1H,SAAS,CAAC0G,WAAW,CAACiB,aAAb,CAAd,EAA2C;AACvCL,UAAAA,UAAU,IAAI,IAAd;AACAC,UAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,OAPD,MAQK;AACDF,QAAAA,KAAK,GAAGT,KAAK,CAACY,kBAAN,CAAyB,IAAzB,CAAR;AACAF,QAAAA,UAAU,GAAGF,KAAK,CAACM,IAAN,GAAa,IAA1B;AACAH,QAAAA,SAAS,GAAG,IAAZ;AACH,OAhB+B,CAiBhC;;;AACA,UAAI,CAACb,WAAD,IAAgBK,6BAApB,EAAmD;AAC/CO,QAAAA,UAAU,IAAI,KAAd;AACH,OApB+B,CAqBhC;;;AACA,UAAIZ,WAAW,IAAI,CAACA,WAAW,CAACkB,iBAAhC,EAAmD;AAC/C,YAAIb,6BAA6B,IAAIH,KAAK,CAAC7E,MAAN,IAAgB6E,KAAK,CAACpE,YAAN,CAAmBR,QAAnB,CAA4BqF,KAAK,CAACQ,GAAlC,CAArD,EAA6F;AACzFP,UAAAA,UAAU,IAAI,KAAd;AACH;AACJ;;AACD,UAAIrB,IAAI,GAAG;AACPF,QAAAA,KAAK,EAAEqB,KAAK,CAACM,IADN;AAEPI,QAAAA,aAAa,EAAExI,aAAa,CAACyI,mBAAd,CAAkCX,KAAlC,EAAyCR,KAAK,CAACoB,mBAAN,EAAzC,CAFR;AAGPC,QAAAA,IAAI,EAAEC,YAAY,CAACd,KAAD,CAAZ,GAAsB,CAACtH,iBAAiB,CAACqI,UAAnB,CAAtB,GAAuD,EAHtD;AAIPC,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiBhB,KAAjB,EAAwBC,UAAxB,CAJH;AAKPgB,QAAAA,gBAAgB,EAAE1I,gBAAgB,CAACQ,OAL5B;AAMPmI,QAAAA,IAAI,EAAE9I,kBAAkB,CAACuD;AANlB,OAAX;;AAQA,UAAI,CAACoE,KAAK,CAACoB,YAAX,EAAyB;AACrBjB,QAAAA,SAAS,GAAG,KAAZ;AACH;;AACD,UAAIV,8BAA8B,IAAIU,SAAtC,EAAiD;AAC7CtB,QAAAA,IAAI,CAACwC,OAAL,GAAe;AACXC,UAAAA,KAAK,EAAE,SADI;AAEXD,UAAAA,OAAO,EAAE;AAFE,SAAf;AAIH;;AACD,UAAIlJ,OAAO,CAACoJ,UAAR,CAAmBvB,KAAK,CAACM,IAAzB,EAA+B,GAA/B,CAAJ,EAAyC;AACrCzB,QAAAA,IAAI,CAACH,QAAL,GAAgBzF,SAAS,CAAC8F,cAA1B;AACH;;AACD1D,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB3C,IAAlB;AACH,KAhDD;AAiDA,SAAKxF,sBAAL,CAA4BuF,OAA5B,CAAoC,UAAU6C,WAAV,EAAuB;AACvD,UAAIA,WAAW,CAACC,aAAhB,EAA+B;AAC3BD,QAAAA,WAAW,CAACC,aAAZ,CAA0B;AACtBC,UAAAA,YAAY,EAAEnC,KAAK,CAAC3E,WADE;AAEtBoF,UAAAA,KAAK,EAAET,KAAK,CAACzE;AAFS,SAA1B;AAIH;AACJ,KAPD;AAQA,WAAOM,MAAP;AACH,GA/DD;;AAgEAuG,EAAAA,MAAM,CAACC,cAAP,CAAsB3I,aAAa,CAACc,SAApC,EAA+C,yCAA/C,EAA0F;AACtF8H,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,CAAC,KAAK5H,QAAN,IACA,CAAC,KAAKA,QAAL,CAAc6H,UADf,IAEA,KAAK7H,QAAL,CAAc6H,UAAd,CAAyBtC,8BAAzB,KAA4DuC,SAFhE,EAE2E;AACvE,eAAO,IAAP;AACH;;AACD,aAAO,KAAK9H,QAAL,CAAc6H,UAAd,CAAyBtC,8BAAhC;AACH,KARqF;AAStFwC,IAAAA,UAAU,EAAE,IAT0E;AAUtFC,IAAAA,YAAY,EAAE;AAVwE,GAA1F;AAYAN,EAAAA,MAAM,CAACC,cAAP,CAAsB3I,aAAa,CAACc,SAApC,EAA+C,wCAA/C,EAAyF;AACrF8H,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,CAAC,KAAK5H,QAAN,IACA,CAAC,KAAKA,QAAL,CAAc6H,UADf,IAEA,KAAK7H,QAAL,CAAc6H,UAAd,CAAyBpC,6BAAzB,KAA2DqC,SAF/D,EAE0E;AACtE,eAAO,IAAP;AACH;;AACD,aAAO,KAAK9H,QAAL,CAAc6H,UAAd,CAAyBpC,6BAAhC;AACH,KARoF;AASrFsC,IAAAA,UAAU,EAAE,IATyE;AAUrFC,IAAAA,YAAY,EAAE;AAVuE,GAAzF;;AAYAhJ,EAAAA,aAAa,CAACc,SAAd,CAAwBmI,iCAAxB,GAA4D,UAAUxG,IAAV,EAAgBN,MAAhB,EAAwB;AAChF,QAAImE,KAAK,GAAG,IAAZ;;AACA,QAAImC,YAAY,GAAGhG,IAAI,CAACyG,mBAAL,EAAnB;AACA,QAAIpC,KAAK,GAAG9H,aAAa,CAAC4H,cAAd,CAA6BO,WAA7B,CAAyCsB,YAAzC,CAAZ;AACA,QAAIU,YAAY,GAAG1G,IAAI,CAAC2G,QAAL,MAAmB,IAAtC;;AACA,WAAOD,YAAY,IAAIA,YAAY,CAACE,WAAb,EAAvB,EAAmD;AAC/CF,MAAAA,YAAY,GAAGA,YAAY,CAACG,iBAAb,CAA+B,KAAK7H,MAApC,EAA4C,KAA5C,CAAf;AACH;;AACD,SAAKtB,sBAAL,CAA4BuF,OAA5B,CAAoC,UAAU6C,WAAV,EAAuB;AACvD,UAAIA,WAAW,CAACgB,kBAAhB,EAAoC;AAChChB,QAAAA,WAAW,CAACgB,kBAAZ,CAA+B;AAC3Bd,UAAAA,YAAY,EAAEA,YADa;AAE3Be,UAAAA,aAAa,EAAElD,KAAK,CAAC3E,WAFM;AAG3BoF,UAAAA,KAAK,EAAET,KAAK,CAACY,kBAAN,CAAyBiC,YAAzB;AAHoB,SAA/B;AAKH;AACJ,KARD;;AASA,QAAIrC,KAAJ,EAAW;AACP,UAAIA,KAAK,CAACoB,YAAV,EAAwB;AACpB,aAAK,IAAIhC,EAAE,GAAG,CAAT,EAAYuD,EAAE,GAAG3C,KAAK,CAACoB,YAA5B,EAA0ChC,EAAE,GAAGuD,EAAE,CAACxH,MAAlD,EAA0DiE,EAAE,EAA5D,EAAgE;AAC5D,cAAIwD,WAAW,GAAGD,EAAE,CAACvD,EAAD,CAApB;;AACA,kBAAQwD,WAAR;AACI,iBAAK,OAAL;AACI,mBAAKC,iBAAL,CAAuB7C,KAAvB,EAA8BqC,YAA9B,EAA4ChH,MAA5C;AACA;;AACJ,iBAAK,UAAL;AACI,mBAAKyH,oBAAL,CAA0B9C,KAA1B,EAAiCqC,YAAjC,EAA+ChH,MAA/C;AACA;;AACJ,iBAAK,QAAL;AACI,mBAAK0H,uBAAL,CAA6B/C,KAA7B,EAAoCqC,YAApC,EAAkDhH,MAAlD;AACA;;AACJ,iBAAK,YAAL;AACI,mBAAK2H,qBAAL,CAA2BhD,KAA3B,EAAkCqC,YAAlC,EAAgDhH,MAAhD;AACA;;AACJ,iBAAK,YAAL;AACI,mBAAK4H,qBAAL,CAA2BjD,KAA3B,EAAkCqC,YAAlC,EAAgDhH,MAAhD;AACA;;AACJ,iBAAK,cAAL;AACI,mBAAK6H,uBAAL,CAA6BlD,KAA7B,EAAoCqC,YAApC,EAAkDhH,MAAlD;AACA;;AACJ,iBAAK,KAAL;AACI,mBAAK8H,eAAL,CAAqBnD,KAArB,EAA4BqC,YAA5B,EAA0ChH,MAA1C;AACA;;AACJ,iBAAK,OAAL;AACI,mBAAK+H,iBAAL,CAAuBpD,KAAvB,EAA8BqC,YAA9B,EAA4ChH,MAA5C;AACA;;AACJ,iBAAK,iBAAL;AACI,mBAAKgI,0BAAL,CAAgCrD,KAAhC,EAAuCqC,YAAvC,EAAqDhH,MAArD;AACA;;AACJ,iBAAK,OAAL;AACI,mBAAKiI,sBAAL,CAA4BtD,KAA5B,EAAmCqC,YAAnC,EAAiDhH,MAAjD;AACA;AA9BR;AAgCH;AACJ;;AACD,WAAKkI,qBAAL,CAA2BvD,KAA3B,EAAkCqC,YAAlC,EAAgDhH,MAAhD;AACA,WAAKmI,0BAAL,CAAgCxD,KAAhC,EAAuCqC,YAAvC,EAAqDhH,MAArD;AACA,WAAKoI,gBAAL,CAAsBzD,KAAtB,EAA6BqC,YAA7B,EAA2ChH,MAA3C;AACH,KAzCD,MA0CK;AACD,UAAIqI,cAAc,GAAGC,aAAa,CAAC,KAAKtJ,UAAN,EAAkBsB,IAAlB,CAAlC;;AACA,WAAK,IAAIiI,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGH,cAAc,CAACI,UAAf,EAAtB,EAAmDF,EAAE,GAAGC,EAAE,CAAC1I,MAA3D,EAAmEyI,EAAE,EAArE,EAAyE;AACrE,YAAIG,aAAa,GAAGF,EAAE,CAACD,EAAD,CAAtB;AACAvI,QAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,UAAAA,KAAK,EAAEoF,aADO;AAEd/C,UAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwD0B,aAAxD,CAFI;AAGd5C,UAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAHX,SAAlB;AAKH;AACJ;;AACD,SAAKyC,oBAAL,CAA0BmG,YAA1B,EAAwChH,MAAxC;AACA,SAAK2I,gBAAL,CAAsBhE,KAAtB,EAA6BqC,YAA7B,EAA2ChH,MAA3C;AACA,WAAOA,MAAP;AACH,GAzED;;AA0EAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBuJ,qBAAxB,GAAgD,UAAUvD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACnF,QAAI2E,KAAK,CAACiE,MAAV,EAAkB;AACd,WAAK,IAAI7E,EAAE,GAAG,CAAT,EAAYuD,EAAE,GAAG3C,KAAK,CAACiE,MAA5B,EAAoC7E,EAAE,GAAGuD,EAAE,CAACxH,MAA5C,EAAoDiE,EAAE,EAAtD,EAA0D;AACtD,YAAI8E,KAAK,GAAGvB,EAAE,CAACvD,EAAD,CAAd;AACA,YAAI+E,YAAY,GAAGD,KAAK,CAAC5D,IAAzB;AACA,YAAIY,gBAAgB,GAAG,KAAK,CAA5B;;AACA,YAAI/I,OAAO,CAACiM,QAAR,CAAiBD,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC,cAAIE,IAAI,GAAGF,YAAY,CAACG,WAAb,CAAyB,GAAzB,CAAX;;AACA,cAAID,IAAI,KAAK,CAAC,CAAd,EAAiB;AACbF,YAAAA,YAAY,GAAGA,YAAY,CAACI,MAAb,CAAoB,CAApB,EAAuBF,IAAvB,IAA+B,MAA9C;AACAnD,YAAAA,gBAAgB,GAAGnI,aAAnB;AACH;AACJ;;AACD,YAAI8F,IAAI,GAAG;AACPF,UAAAA,KAAK,EAAEuF,KAAK,CAAC5D,IADN;AAEPI,UAAAA,aAAa,EAAExI,aAAa,CAACyI,mBAAd,CAAkCuD,KAAlC,EAAyC,KAAKtD,mBAAL,EAAzC,CAFR;AAGPC,UAAAA,IAAI,EAAEC,YAAY,CAACd,KAAD,CAAZ,GAAsB,CAACtH,iBAAiB,CAACqI,UAAnB,CAAtB,GAAuD,EAHtD;AAIPC,UAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwD8B,YAAxD,CAJH;AAKPzF,UAAAA,QAAQ,EAAEzF,SAAS,CAACuL,KALb;AAMPrD,UAAAA,IAAI,EAAE9I,kBAAkB,CAACoB,KANlB;AAOPyH,UAAAA,gBAAgB,EAAEA;AAPX,SAAX;AASA7F,QAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB3C,IAAlB;AACH;AACJ;;AACD,WAAOxD,MAAP;AACH,GA1BD;;AA2BAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBwJ,0BAAxB,GAAqD,UAAUxD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACxF,SAAK,IAAIoJ,QAAT,IAAqBvM,aAAa,CAACwM,eAAnC,EAAoD;AAChDrJ,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAE8F,QADO;AAEd/D,QAAAA,aAAa,EAAExI,aAAa,CAACwM,eAAd,CAA8BD,QAA9B,CAFD;AAGdzD,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDoC,QAAxD,CAHI;AAIdtD,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAJX,OAAlB;AAMH;;AACD,WAAO4B,MAAP;AACH,GAVD;;AAWAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBsD,8BAAxB,GAAyD,UAAU3B,IAAV,EAAgBN,MAAhB,EAAwB;AAC7E,QAAI,KAAKV,MAAL,IAAegB,IAAI,CAAChB,MAAL,GAAc,CAAjC,EAAoC;AAChC,WAAKuB,oBAAL,CAA0B,IAA1B,EAAgCb,MAAhC;AACH;;AACD,WAAOA,MAAP;AACH,GALD;;AAMAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBkC,oBAAxB,GAA+C,UAAUmG,YAAV,EAAwBhH,MAAxB,EAAgC;AAC3E,QAAIsJ,OAAO,GAAG,KAAKxK,gBAAL,GAAwByK,mBAAxB,CAA4C,KAAKjK,MAAjD,EAAyD3C,KAAK,CAAC6M,aAAN,CAAoBC,QAA7E,CAAd;;AACA,SAAK,IAAI1F,EAAE,GAAG,CAAT,EAAY2F,SAAS,GAAGJ,OAA7B,EAAsCvF,EAAE,GAAG2F,SAAS,CAAC5J,MAArD,EAA6DiE,EAAE,EAA/D,EAAmE;AAC/D,UAAI4F,MAAM,GAAGD,SAAS,CAAC3F,EAAD,CAAtB;AACA,UAAIc,UAAU,GAAG/H,OAAO,CAACoJ,UAAR,CAAmByD,MAAM,CAAC1E,IAA1B,EAAgC,IAAhC,IAAwC,SAAS0E,MAAM,CAAC1E,IAAhB,GAAuB,GAA/D,GAAqE0E,MAAM,CAAC1E,IAA7F;AACA,UAAI2E,cAAc,GAAG;AACjBtG,QAAAA,KAAK,EAAEqG,MAAM,CAAC1E,IADG;AAEjBI,QAAAA,aAAa,EAAEsE,MAAM,CAACd,KAAP,GAAe/L,OAAO,CAAC+M,gBAAR,CAAyBF,MAAM,CAACd,KAAhC,CAAf,GAAwDc,MAAM,CAACd,KAF7D;AAGjBlD,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDnC,UAAxD,CAHO;AAIjBiB,QAAAA,IAAI,EAAE9I,kBAAkB,CAACyM,QAJR;AAKjBpG,QAAAA,QAAQ,EAAEzF,SAAS,CAAC6L;AALH,OAArB;;AAOA,UAAI,OAAOG,cAAc,CAACvE,aAAtB,KAAwC,QAAxC,IAAoDyE,aAAa,CAACF,cAAc,CAACvE,aAAhB,CAArE,EAAqG;AACjGuE,QAAAA,cAAc,CAAC9D,IAAf,GAAsB9I,kBAAkB,CAAC+M,KAAzC;AACH;;AACD,UAAIJ,MAAM,CAACrJ,IAAP,CAAYc,IAAZ,KAAqBzE,KAAK,CAACuB,QAAN,CAAe8L,iBAAxC,EAA2D;AACvD,YAAIC,SAAS,GAAIN,MAAM,CAACrJ,IAAP,CAAYG,SAAZ,EAAjB;;AACA,YAAIwJ,SAAS,CAAC7I,IAAV,KAAmBzE,KAAK,CAACuB,QAAN,CAAegM,gBAAtC,EAAwD;AACpDN,UAAAA,cAAc,CAACO,MAAf,GAAwB3M,QAAQ,CAAC,qBAAD,EAAwB,uBAAxB,EAAiDyM,SAAS,CAACG,OAAV,EAAjD,CAAhC;AACH;AACJ;;AACDpK,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkByD,cAAlB;AACH;;AACD,WAAO5J,MAAP;AACH,GAxBD;;AAyBAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB0L,qCAAxB,GAAgE,UAAUrK,MAAV,EAAkB;AAC9E,QAAIsJ,OAAO,GAAG,KAAKxK,gBAAL,GAAwByK,mBAAxB,CAA4C,KAAKjK,MAAjD,EAAyD3C,KAAK,CAAC6M,aAAN,CAAoBC,QAA7E,CAAd;AACAH,IAAAA,OAAO,GAAGA,OAAO,CAACgB,MAAR,CAAe,UAAUX,MAAV,EAAkB;AACvC,aAAO7M,OAAO,CAACoJ,UAAR,CAAmByD,MAAM,CAAC1E,IAA1B,EAAgC,IAAhC,CAAP;AACH,KAFS,CAAV;;AAGA,SAAK,IAAIlB,EAAE,GAAG,CAAT,EAAYwG,SAAS,GAAGjB,OAA7B,EAAsCvF,EAAE,GAAGwG,SAAS,CAACzK,MAArD,EAA6DiE,EAAE,EAA/D,EAAmE;AAC/D,UAAI4F,MAAM,GAAGY,SAAS,CAACxG,EAAD,CAAtB;AACA,UAAI6F,cAAc,GAAG;AACjBtG,QAAAA,KAAK,EAAEqG,MAAM,CAAC1E,IADG;AAEjBI,QAAAA,aAAa,EAAEsE,MAAM,CAACd,KAAP,GAAe/L,OAAO,CAAC+M,gBAAR,CAAyBF,MAAM,CAACd,KAAhC,CAAf,GAAwDc,MAAM,CAACd,KAF7D;AAGjBlD,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwB,IAAxB,CAAjB,EAAgD4E,MAAM,CAAC1E,IAAvD,CAHO;AAIjBa,QAAAA,IAAI,EAAE9I,kBAAkB,CAACyM;AAJR,OAArB;;AAMA,UAAI,OAAOG,cAAc,CAACvE,aAAtB,KAAwC,QAAxC,IAAoDyE,aAAa,CAACF,cAAc,CAACvE,aAAhB,CAArE,EAAqG;AACjGuE,QAAAA,cAAc,CAAC9D,IAAf,GAAsB9I,kBAAkB,CAAC+M,KAAzC;AACH;;AACD/J,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkByD,cAAlB;AACH;;AACD,WAAO5J,MAAP;AACH,GAnBD;;AAoBAnC,EAAAA,aAAa,CAACc,SAAd,CAAwByJ,gBAAxB,GAA2C,UAAUzD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AAC9E,QAAIR,WAAW,GAAG,GAAlB;;AACA,QAAI,KAAKA,WAAL,CAAiBM,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,UAAI0K,QAAQ,GAAG,KAAKhL,WAAL,CAAiBiL,KAAjB,CAAuB,eAAvB,CAAf;;AACA,UAAID,QAAJ,EAAc;AACVhL,QAAAA,WAAW,GAAGgL,QAAQ,CAAC,CAAD,CAAtB;AACAxK,QAAAA,MAAM,CAACC,YAAP,GAAsBT,WAAW,CAACM,MAAZ,KAAuB,KAAKN,WAAL,CAAiBM,MAA9D;AACH;AACJ,KAND,MAOK,IAAI,KAAKN,WAAL,CAAiBM,MAAjB,KAA4B,CAAhC,EAAmC;AACpCE,MAAAA,MAAM,CAACC,YAAP,GAAsB,IAAtB;AACH;;AACD,QAAI+G,YAAY,IAAIA,YAAY,CAACrG,MAA7B,IAAuCqG,YAAY,CAACrG,MAAb,CAAoBS,IAApB,KAA6BzE,KAAK,CAACuB,QAAN,CAAewM,IAAvF,EAA6F;AACzF1D,MAAAA,YAAY,GAAGA,YAAY,CAACvG,SAAb,EAAf,CADyF,CAChD;AAC5C;;AACD,QAAIkE,KAAK,CAACoB,YAAV,EAAwB;AACpB,WAAK,IAAIhC,EAAE,GAAG,CAAT,EAAYuD,EAAE,GAAG3C,KAAK,CAACoB,YAA5B,EAA0ChC,EAAE,GAAGuD,EAAE,CAACxH,MAAlD,EAA0DiE,EAAE,EAA5D,EAAgE;AAC5D,YAAIwD,WAAW,GAAGD,EAAE,CAACvD,EAAD,CAApB;AACA,YAAI4G,KAAK,GAAG9N,aAAa,CAAC8N,KAAd,CAAoBpD,WAApB,CAAZ;;AACA,YAAIoD,KAAJ,EAAW;AACP,eAAK,IAAIpC,EAAE,GAAG,CAAT,EAAYqC,OAAO,GAAGD,KAA3B,EAAkCpC,EAAE,GAAGqC,OAAO,CAAC9K,MAA/C,EAAuDyI,EAAE,EAAzD,EAA6D;AACzD,gBAAIsC,IAAI,GAAGD,OAAO,CAACrC,EAAD,CAAlB;AACA,gBAAI1D,UAAU,GAAGrF,WAAW,GAAGqL,IAA/B;AACA7K,YAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,cAAAA,KAAK,EAAEuB,UADO;AAEdc,cAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDnC,UAAxD,CAFI;AAGdiB,cAAAA,IAAI,EAAE9I,kBAAkB,CAAC8N;AAHX,aAAlB;AAKH;AACJ;AACJ;AACJ;;AACD,WAAO9K,MAAP;AACH,GAjCD;;AAkCAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBoG,kBAAxB,GAA6C,UAAUiC,YAAV,EAAwB;AACjE,QAAIA,YAAY,IAAIA,YAAY,CAAC1H,MAAb,IAAuB,KAAKA,MAA5C,IAAsD,KAAKA,MAAL,IAAe0H,YAAY,CAAC5B,GAAtF,EAA2F;AACvF,UAAIA,GAAG,GAAG4B,YAAY,CAAC5B,GAAb,KAAqB,CAAC,CAAtB,GAA0B,KAAKrF,YAAL,CAAkBgL,UAAlB,CAA6B/D,YAAY,CAAC5B,GAA1C,CAA1B,GAA2E,KAAK/F,QAA1F;AACA,UAAI2L,KAAK,GAAG,KAAKjL,YAAL,CAAkBgL,UAAlB,CAA6B/D,YAAY,CAAC1H,MAA1C,CAAZ;;AACA,UAAI0L,KAAK,CAACpL,IAAN,KAAewF,GAAG,CAACxF,IAAvB,EAA6B;AACzB,eAAO3C,KAAK,CAAC0C,MAAN,CAAaqL,KAAb,EAAoB5F,GAApB,CAAP,CADyB,CACQ;AACpC;AACJ;;AACD,WAAO,KAAK1F,mBAAZ;AACH,GATD;;AAUA7B,EAAAA,aAAa,CAACc,SAAd,CAAwB6I,iBAAxB,GAA4C,UAAU7C,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AAC/E,SAAK,IAAIiL,KAAT,IAAkBpO,aAAa,CAACqO,MAAhC,EAAwC;AACpClL,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAE2H,KADO;AAEd5F,QAAAA,aAAa,EAAExI,aAAa,CAACqO,MAAd,CAAqBD,KAArB,CAFD;AAGdtF,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDiE,KAAxD,CAHI;AAIdnF,QAAAA,IAAI,EAAE9I,kBAAkB,CAAC+M;AAJX,OAAlB;AAMH;;AACD,SAAK,IAAIkB,KAAT,IAAkBpO,aAAa,CAACsO,aAAhC,EAA+C;AAC3CnL,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAE2H,KADO;AAEd5F,QAAAA,aAAa,EAAExI,aAAa,CAACsO,aAAd,CAA4BF,KAA5B,CAFD;AAGdtF,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDiE,KAAxD,CAHI;AAIdnF,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAJX,OAAlB;AAMH;;AACD,QAAIgN,WAAW,GAAG,IAAIC,GAAJ,EAAlB;AACA,SAAKrM,UAAL,CAAgBsM,aAAhB,CAA8B,IAAIC,mBAAJ,CAAwBH,WAAxB,EAAqC,KAAK9L,MAA1C,CAA9B;;AACA,SAAK,IAAIyE,EAAE,GAAG,CAAT,EAAYuD,EAAE,GAAG8D,WAAW,CAAC3C,UAAZ,EAAtB,EAAgD1E,EAAE,GAAGuD,EAAE,CAACxH,MAAxD,EAAgEiE,EAAE,EAAlE,EAAsE;AAClE,UAAIkH,KAAK,GAAG3D,EAAE,CAACvD,EAAD,CAAd;AACA/D,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAE2H,KADO;AAEdtF,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDiE,KAAxD,CAFI;AAGdnF,QAAAA,IAAI,EAAE9I,kBAAkB,CAAC+M;AAHX,OAAlB;AAKH;;AACD,QAAIyB,OAAO,GAAG,UAAUC,CAAV,EAAa;AACvB,UAAIC,OAAO,GAAG,CAAd;;AACA,UAAIC,eAAe,GAAG,UAAUC,MAAV,EAAkBC,EAAlB,EAAsB;AAAE,eAAO,OAAOH,OAAO,EAAd,GAAmB,GAAnB,GAAyBG,EAAzB,GAA8B,GAArC;AAA2C,OAAzF;;AACA,UAAIhH,UAAU,GAAG4G,CAAC,CAACK,IAAF,CAAOlG,OAAP,CAAe,gBAAf,EAAiC+F,eAAjC,CAAjB;AACA3L,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEmI,CAAC,CAACK,IAAF,CAAO5C,MAAP,CAAc,CAAd,EAAiBuC,CAAC,CAACK,IAAF,CAAO7I,OAAP,CAAe,GAAf,CAAjB,CADO;AAEdkH,QAAAA,MAAM,EAAEsB,CAAC,CAACK,IAFI;AAGdzG,QAAAA,aAAa,EAAEoG,CAAC,CAACM,IAHH;AAIdpG,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiBoG,MAAM,CAACjH,kBAAP,CAA0BiC,YAA1B,CAAjB,EAA0DnC,UAA1D,CAJI;AAKdgB,QAAAA,gBAAgB,EAAEnI,aALJ;AAMdoI,QAAAA,IAAI,EAAE9I,kBAAkB,CAACsF;AANX,OAAlB;AAQH,KAZD;;AAaA,QAAI0J,MAAM,GAAG,IAAb;;AACA,SAAK,IAAIzD,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG3L,aAAa,CAACoP,cAApC,EAAoD1D,EAAE,GAAGC,EAAE,CAAC1I,MAA5D,EAAoEyI,EAAE,EAAtE,EAA0E;AACtE,UAAIkD,CAAC,GAAGjD,EAAE,CAACD,EAAD,CAAV;;AACAiD,MAAAA,OAAO,CAACC,CAAD,CAAP;AACH;;AACD,WAAOzL,MAAP;AACH,GA9CD;;AA+CAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB8I,oBAAxB,GAA+C,UAAU9C,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AAClF,SAAK,IAAIX,QAAT,IAAqBxC,aAAa,CAACqP,gBAAnC,EAAqD;AACjDlM,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEjE,QADO;AAEdgG,QAAAA,aAAa,EAAExI,aAAa,CAACqP,gBAAd,CAA+B7M,QAA/B,CAFD;AAGdsG,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwD3H,QAAxD,CAHI;AAIdyG,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAJX,OAAlB;AAMH;;AACD,WAAO4B,MAAP;AACH,GAVD;;AAWAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB+I,uBAAxB,GAAkD,UAAU/C,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACrF,SAAK,IAAImM,MAAT,IAAmBtP,aAAa,CAACuP,mBAAjC,EAAsD;AAClDpM,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAE6I,MADO;AAEd9G,QAAAA,aAAa,EAAExI,aAAa,CAACuP,mBAAd,CAAkCD,MAAlC,CAFD;AAGdxG,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDmF,MAAxD,CAHI;AAIdrG,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAJX,OAAlB;AAMH;;AACD,WAAO4B,MAAP;AACH,GAVD;;AAWAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBgJ,qBAAxB,GAAgD,UAAUhD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACnF,SAAK,IAAIqM,SAAT,IAAsBxP,aAAa,CAACyP,iBAApC,EAAuD;AACnDtM,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAE+I,SADO;AAEdhH,QAAAA,aAAa,EAAExI,aAAa,CAACyP,iBAAd,CAAgCD,SAAhC,CAFD;AAGd1G,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDqF,SAAxD,CAHI;AAIdvG,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAJX,OAAlB;AAMH;;AACD,WAAO4B,MAAP;AACH,GAVD;;AAWAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBiJ,qBAAxB,GAAgD,UAAUjD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACnF,SAAK,IAAI+D,EAAE,GAAG,CAAT,EAAYuD,EAAE,GAAGzK,aAAa,CAAC0P,iBAApC,EAAuDxI,EAAE,GAAGuD,EAAE,CAACxH,MAA/D,EAAuEiE,EAAE,EAAzE,EAA6E;AACzE,UAAIyI,SAAS,GAAGlF,EAAE,CAACvD,EAAD,CAAlB;AACA/D,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEkJ,SADO;AAEd7G,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDwF,SAAxD,CAFI;AAGd1G,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAHX,OAAlB;AAKH;;AACD,WAAO4B,MAAP;AACH,GAVD;;AAWAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBkJ,uBAAxB,GAAkD,UAAUlD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACrF,SAAK,IAAIyM,GAAT,IAAgB5P,aAAa,CAAC6P,mBAA9B,EAAmD;AAC/C1M,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEmJ,GADO;AAEdpH,QAAAA,aAAa,EAAExI,aAAa,CAAC6P,mBAAd,CAAkCD,GAAlC,CAFD;AAGd9G,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDyF,GAAxD,CAHI;AAId3G,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAJX,OAAlB;AAMH;;AACD,WAAO4B,MAAP;AACH,GAVD;;AAWAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBmJ,eAAxB,GAA0C,UAAUnD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AAC7E,SAAK,IAAIyM,GAAT,IAAgB5P,aAAa,CAAC8P,WAA9B,EAA2C;AACvC3M,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEmJ,GADO;AAEdpH,QAAAA,aAAa,EAAExI,aAAa,CAAC8P,WAAd,CAA0BF,GAA1B,CAFD;AAGd9G,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDyF,GAAxD,CAHI;AAId3G,QAAAA,IAAI,EAAE9I,kBAAkB,CAACoB;AAJX,OAAlB;AAMH;;AACD,WAAO4B,MAAP;AACH,GAVD;;AAWAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBoJ,iBAAxB,GAA4C,UAAUpD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AAC/E,SAAK,IAAI4M,KAAT,IAAkB/P,aAAa,CAACgQ,cAAhC,EAAgD;AAC5C,UAAIhI,UAAU,GAAGiI,2BAA2B,CAACF,KAAD,CAA5C;AACA5M,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEsJ,KADO;AAEdvH,QAAAA,aAAa,EAAExI,aAAa,CAACgQ,cAAd,CAA6BD,KAA7B,CAFD;AAGdjH,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDnC,UAAxD,CAHI;AAIdiB,QAAAA,IAAI,EAAE9I,kBAAkB,CAACsF,QAJX;AAKduD,QAAAA,gBAAgB,EAAE+G,KAAK,KAAK/H,UAAV,GAAuBnH,aAAvB,GAAuC,KAAK;AALhD,OAAlB;AAOH;;AACD,WAAOsC,MAAP;AACH,GAZD;;AAaAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBqJ,0BAAxB,GAAqD,UAAUrD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACxF,SAAK,IAAI+M,MAAT,IAAmBlQ,aAAa,CAACmQ,yBAAjC,EAA4D;AACxD,UAAInI,UAAU,GAAGiI,2BAA2B,CAACC,MAAD,CAA5C;AACA/M,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEyJ,MADO;AAEd1H,QAAAA,aAAa,EAAExI,aAAa,CAACmQ,yBAAd,CAAwCD,MAAxC,CAFD;AAGdpH,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDnC,UAAxD,CAHI;AAIdiB,QAAAA,IAAI,EAAE9I,kBAAkB,CAACsF,QAJX;AAKduD,QAAAA,gBAAgB,EAAEkH,MAAM,KAAKlI,UAAX,GAAwBnH,aAAxB,GAAwC,KAAK;AALjD,OAAlB;AAOH;;AACD,WAAOsC,MAAP;AACH,GAZD;;AAaAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBsJ,sBAAxB,GAAiD,UAAUtD,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AACpF,SAAK,IAAIiN,KAAT,IAAkBpQ,aAAa,CAACqQ,mBAAhC,EAAqD;AACjD,UAAIrI,UAAU,GAAGiI,2BAA2B,CAACG,KAAD,CAA5C;AACAjN,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAE2J,KADO;AAEd5H,QAAAA,aAAa,EAAExI,aAAa,CAACqQ,mBAAd,CAAkCD,KAAlC,CAFD;AAGdtH,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDnC,UAAxD,CAHI;AAIdiB,QAAAA,IAAI,EAAE9I,kBAAkB,CAACsF,QAJX;AAKduD,QAAAA,gBAAgB,EAAEoH,KAAK,KAAKpI,UAAV,GAAuBnH,aAAvB,GAAuC,KAAK;AALhD,OAAlB;AAOH;;AACD,WAAOsC,MAAP;AACH,GAZD;;AAaAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBqE,2BAAxB,GAAsD,UAAUhD,MAAV,EAAkB;AACpE,QAAIM,IAAI,GAAG,KAAKtB,UAAL,CAAgBmO,0BAAhB,CAA2C,KAAK7N,MAAhD,CAAX;;AACA,QAAI,CAACgB,IAAL,EAAW;AACP,aAAO,KAAKsC,wBAAL,CAA8B5C,MAA9B,CAAP;AACH;;AACD,QAAIM,IAAI,YAAY3D,KAAK,CAACoF,OAA1B,EAAmC;AAC/B,aAAO,KAAKC,wBAAL,CAA8B1B,IAA9B,EAAoCN,MAApC,CAAP;AACH;;AACD,QAAIM,IAAI,YAAY3D,KAAK,CAAC4F,QAA1B,EAAoC;AAChC,aAAO,KAAKC,yBAAL,CAA+BlC,IAA/B,EAAqCN,MAArC,CAAP;AACH;;AACD,WAAOA,MAAP;AACH,GAZD;;AAaAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBiE,wBAAxB,GAAmD,UAAU5C,MAAV,EAAkB;AACjE,QAAImE,KAAK,GAAG,IAAZ;;AACAtH,IAAAA,aAAa,CAAC4H,cAAd,CAA6B2I,eAA7B,GAA+C7J,OAA/C,CAAuD,UAAUoB,KAAV,EAAiB;AACpE3E,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,QAAAA,KAAK,EAAEqB,KAAK,CAACM,IADC;AAEdU,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiBzB,KAAK,CAACY,kBAAN,CAAyB,IAAzB,CAAjB,EAAiDJ,KAAK,CAACM,IAAvD,CAFI;AAGdI,QAAAA,aAAa,EAAExI,aAAa,CAACyI,mBAAd,CAAkCX,KAAlC,EAAyCR,KAAK,CAACoB,mBAAN,EAAzC,CAHD;AAIdC,QAAAA,IAAI,EAAEC,YAAY,CAACd,KAAD,CAAZ,GAAsB,CAACtH,iBAAiB,CAACqI,UAAnB,CAAtB,GAAuD,EAJ/C;AAKdI,QAAAA,IAAI,EAAE9I,kBAAkB,CAACqQ;AALX,OAAlB;AAOH,KARD;AASA,SAAK9L,yBAAL,CAA+B,IAA/B,EAAqC,KAArC,EAA4CvB,MAA5C;AACA,WAAOA,MAAP;AACH,GAbD;;AAcAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBqD,wBAAxB,GAAmD,UAAUsL,OAAV,EAAmBtN,MAAnB,EAA2B;AAC1E,QAAIuN,YAAY,GAAGD,OAAO,CAACE,eAAR,EAAnB;AACA,QAAIC,OAAO,GAAGF,YAAY,IAAIA,YAAY,CAACxE,QAAb,CAAsB,GAAtB,CAAhB,IAA8C,KAAKzJ,MAAL,IAAeiO,YAAY,CAACnI,GAAxF;;AACA,QAAIqI,OAAJ,EAAa;AACT,aAAO,KAAK7K,wBAAL,CAA8B5C,MAA9B,CAAP;AACH;;AACD,QAAI0N,aAAa,GAAG,CAACH,YAAD,IAAiB,KAAKjO,MAAL,IAAeiO,YAAY,CAACjO,MAAjE;;AACA,QAAIoO,aAAJ,EAAmB;AACf,aAAO,KAAKnM,yBAAL,CAA+B+L,OAA/B,EAAwCA,OAAO,CAAC9L,QAAR,EAAxC,EAA4DxB,MAA5D,CAAP;AACH;;AACD,WAAO,KAAK4B,6BAAL,CAAmC0L,OAAO,CAACE,eAAR,EAAnC,EAA8DxN,MAA9D,CAAP;AACH,GAXD;;AAYAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB4C,yBAAxB,GAAoD,UAAU+L,OAAV,EAAmB9L,QAAnB,EAA6BxB,MAA7B,EAAqC;AACrF,QAAImE,KAAK,GAAG,IAAZ;;AACA,QAAI6C,YAAY,GAAG,KAAKnD,cAAL,CAAoBlH,KAAK,CAACuB,QAAN,CAAeyP,cAAnC,EAAmDhR,KAAK,CAACuB,QAAN,CAAe0P,kBAAlE,EAAsFjR,KAAK,CAACuB,QAAN,CAAe2P,aAArG,EAAoHlR,KAAK,CAACuB,QAAN,CAAe4P,mBAAnI,CAAnB;;AACA,QAAI,CAAC9G,YAAD,IAAiB,KAAK1H,MAAL,GAAc,KAAKE,WAAL,CAAiBM,MAA/B,GAAwC,CAAzD,IAA8D,KAAKC,YAAL,CAAkBgO,OAAlB,GAA4B,KAAKzO,MAAL,GAAc,KAAKE,WAAL,CAAiBM,MAA/B,GAAwC,CAApE,MAA2E,GAA7I,EAAkJ;AAC9I;AACA,WAAKN,WAAL,GAAmB,MAAM,KAAKA,WAA9B;AACA,WAAKE,mBAAL,GAA2BzC,KAAK,CAAC0C,MAAN,CAAa5C,QAAQ,CAAC4C,MAAT,CAAgB,KAAKN,QAAL,CAAcO,IAA9B,EAAoC,KAAKP,QAAL,CAAcQ,SAAd,GAA0B,KAAKL,WAAL,CAAiBM,MAA/E,CAAb,EAAqG,KAAKT,QAA1G,CAA3B;AACH;;AACD,QAAI2O,aAAa,GAAGnR,aAAa,CAAC4H,cAAd,CAA6BwJ,gBAA7B,EAApB;AACAD,IAAAA,aAAa,CAACzK,OAAd,CAAsB,UAAUoB,KAAV,EAAiB;AACnC,UAAIE,UAAU,GAAGiI,2BAA2B,CAACnI,KAAK,CAACM,IAAP,CAA5C;AACA,UAAIzB,IAAI,GAAG;AACPF,QAAAA,KAAK,EAAEqB,KAAK,CAACM,IADN;AAEPU,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiBzB,KAAK,CAACY,kBAAN,CAAyBiC,YAAzB,CAAjB,EAAyDnC,UAAzD,CAFH;AAGPQ,QAAAA,aAAa,EAAExI,aAAa,CAACyI,mBAAd,CAAkCX,KAAlC,EAAyCR,KAAK,CAACoB,mBAAN,EAAzC,CAHR;AAIPC,QAAAA,IAAI,EAAEC,YAAY,CAACd,KAAD,CAAZ,GAAsB,CAACtH,iBAAiB,CAACqI,UAAnB,CAAtB,GAAuD,EAJtD;AAKPI,QAAAA,IAAI,EAAE9I,kBAAkB,CAACsF,QALlB;AAMPuD,QAAAA,gBAAgB,EAAElB,KAAK,CAACM,IAAN,KAAeJ,UAAf,GAA4BnH,aAA5B,GAA4C,KAAK;AAN5D,OAAX;;AAQA,UAAIZ,OAAO,CAACoJ,UAAR,CAAmBvB,KAAK,CAACM,IAAzB,EAA+B,IAA/B,CAAJ,EAA0C;AACtCzB,QAAAA,IAAI,CAACH,QAAL,GAAgBzF,SAAS,CAAC8F,cAA1B;AACH;;AACD1D,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB3C,IAAlB;AACH,KAdD;AAeA,QAAI0K,cAAc,GAAGrR,aAAa,CAAC4H,cAAd,CAA6B0J,iBAA7B,EAArB;AACAD,IAAAA,cAAc,CAAC3K,OAAf,CAAuB,UAAUoB,KAAV,EAAiB;AACpC,UAAIE,UAAU,GAAGiI,2BAA2B,CAACnI,KAAK,CAACM,IAAP,CAA5C;AACA,UAAIzB,IAAI,GAAG;AACPF,QAAAA,KAAK,EAAEqB,KAAK,CAACM,IADN;AAEPU,QAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiBzB,KAAK,CAACY,kBAAN,CAAyBiC,YAAzB,CAAjB,EAAyDnC,UAAzD,CAFH;AAGPQ,QAAAA,aAAa,EAAExI,aAAa,CAACyI,mBAAd,CAAkCX,KAAlC,EAAyCR,KAAK,CAACoB,mBAAN,EAAzC,CAHR;AAIPC,QAAAA,IAAI,EAAEC,YAAY,CAACd,KAAD,CAAZ,GAAsB,CAACtH,iBAAiB,CAACqI,UAAnB,CAAtB,GAAuD,EAJtD;AAKPI,QAAAA,IAAI,EAAE9I,kBAAkB,CAACsF,QALlB;AAMPuD,QAAAA,gBAAgB,EAAElB,KAAK,CAACM,IAAN,KAAeJ,UAAf,GAA4BnH,aAA5B,GAA4C,KAAK;AAN5D,OAAX;;AAQA,UAAIZ,OAAO,CAACoJ,UAAR,CAAmBvB,KAAK,CAACM,IAAzB,EAA+B,KAA/B,CAAJ,EAA2C;AACvCzB,QAAAA,IAAI,CAACH,QAAL,GAAgBzF,SAAS,CAAC8F,cAA1B;AACH;;AACD1D,MAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB3C,IAAlB;AACH,KAdD;;AAeA,QAAI,CAAChC,QAAL,EAAe;AAAE;AACb,WAAK,IAAIuC,EAAE,GAAG,CAAT,EAAYuD,EAAE,GAAGzK,aAAa,CAACuR,SAApC,EAA+CrK,EAAE,GAAGuD,EAAE,CAACxH,MAAvD,EAA+DiE,EAAE,EAAjE,EAAqE;AACjE,YAAIY,KAAK,GAAG2C,EAAE,CAACvD,EAAD,CAAd;AACA/D,QAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,UAAAA,KAAK,EAAEqB,KADO;AAEdgB,UAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDrC,KAAxD,CAFI;AAGdmB,UAAAA,IAAI,EAAE9I,kBAAkB,CAACqQ;AAHX,SAAlB;AAKH;;AACD,WAAK,IAAI9E,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG3L,aAAa,CAACwR,WAApC,EAAiD9F,EAAE,GAAGC,EAAE,CAAC1I,MAAzD,EAAiEyI,EAAE,EAAnE,EAAuE;AACnE,YAAI5D,KAAK,GAAG6D,EAAE,CAACD,EAAD,CAAd;AACAvI,QAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,UAAAA,KAAK,EAAEqB,KADO;AAEdgB,UAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDrC,KAAxD,CAFI;AAGdmB,UAAAA,IAAI,EAAE9I,kBAAkB,CAACqQ;AAHX,SAAlB;AAKH;AACJ;;AACD,QAAIiB,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAAC,KAAK9O,WAAN,CAAP,GAA4B,IAA5B;AACA,QAAI+O,OAAO,GAAG,KAAKxO,YAAL,CAAkBgO,OAAlB,EAAd;AACA,SAAK/O,UAAL,CAAgBwP,MAAhB,CAAuB,UAAUC,CAAV,EAAa;AAChC,UAAIA,CAAC,CAACrN,IAAF,KAAWzE,KAAK,CAACuB,QAAN,CAAe6C,cAA1B,IAA4C0N,CAAC,CAAC3O,MAAF,GAAW,CAA3D,EAA8D;AAC1D,YAAI4O,QAAQ,GAAGH,OAAO,CAACrF,MAAR,CAAeuF,CAAC,CAACnP,MAAjB,EAAyBmP,CAAC,CAAC3O,MAA3B,CAAf;;AACA,YAAI4O,QAAQ,CAACC,MAAT,CAAgB,CAAhB,MAAuB,GAAvB,IAA8B,CAACL,OAAO,CAACI,QAAD,CAA1C,EAAsD;AAClDJ,UAAAA,OAAO,CAACI,QAAD,CAAP,GAAoB,IAApB;AACA1O,UAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB;AACd7C,YAAAA,KAAK,EAAEoL,QADO;AAEd/I,YAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiBzB,KAAK,CAACY,kBAAN,CAAyBiC,YAAzB,CAAjB,EAAyD0H,QAAzD,CAFI;AAGd5I,YAAAA,IAAI,EAAE9I,kBAAkB,CAACqQ;AAHX,WAAlB;AAKH;;AACD,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH,KAdD;;AAeA,QAAIC,OAAO,IAAIA,OAAO,CAAC9L,QAAR,EAAf,EAAmC;AAC/B,UAAIkN,QAAQ,GAAGpB,OAAO,CAACsB,YAAR,GAAuBzB,0BAAvB,CAAkD,KAAK7N,MAAvD,CAAf;;AACA,UAAIoP,QAAQ,IAAIpB,OAAO,CAACsB,YAAR,GAAuBC,WAAvB,GAAqC5L,OAArC,CAA6CyL,QAA7C,MAA2D,CAA3E,EAA8E;AAC1E,aAAKxK,oBAAL,CAA0B,IAA1B,EAAgClE,MAAhC;AACH;AACJ;;AACD,WAAOA,MAAP;AACH,GAnFD;;AAoFAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBiD,6BAAxB,GAAwD,UAAU2L,YAAV,EAAwBvN,MAAxB,EAAgC;AACpF,QAAI,CAACuN,YAAD,IAAiB,KAAKjO,MAAL,KAAgBiO,YAAY,CAACjO,MAAlD,EAA0D;AAAE;AACxD,aAAOU,MAAP;AACH;;AACD,QAAIM,IAAI,GAAGiN,YAAY,CAACJ,0BAAb,CAAwC,KAAK7N,MAA7C,CAAX;;AACA,QAAI,CAACgB,IAAL,EAAW;AACP,aAAO,KAAKE,oCAAL,CAA0C,IAA1C,EAAgDR,MAAhD,CAAP;AACH;;AACD,QAAIM,IAAI,YAAY3D,KAAK,CAACmS,mBAA1B,EAA+C;AAC3C,UAAI7K,WAAW,GAAG3D,IAAlB;;AACA,UAAI,CAAC/C,SAAS,CAAC0G,WAAW,CAACiB,aAAb,CAAV,IAAyC,KAAK5F,MAAL,IAAe2E,WAAW,CAACiB,aAAxE,EAAuF;AACnF;AACA,eAAO,KAAK1E,oCAAL,CAA0CyD,WAA1C,EAAuDjE,MAAvD,CAAP;AACH,OAHD,MAIK,IAAKzC,SAAS,CAAC0G,WAAW,CAACkB,iBAAb,CAAT,IAA4ClB,WAAW,CAACkB,iBAAZ,GAAgC,KAAK7F,MAAtF,EAA+F;AAChG,YAAI,KAAKA,MAAL,KAAgB2E,WAAW,CAACkB,iBAAZ,GAAgC,CAApD,EAAuD;AACnD,iBAAOnF,MAAP,CADmD,CACpC;AAClB,SAH+F,CAIhG;;;AACA,eAAO,KAAKQ,oCAAL,CAA0C,IAA1C,EAAgDR,MAAhD,CAAP;AACH;;AACD,UAAIiE,WAAW,YAAYtH,KAAK,CAACoS,WAAjC,EAA8C;AAC1C;AACA,eAAO,KAAKjI,iCAAL,CAAuC7C,WAAvC,EAAoDjE,MAApD,CAAP;AACH;AACJ,KAjBD,MAkBK,IAAIM,IAAI,YAAY3D,KAAK,CAACuE,gBAA1B,EAA4C;AAC7C,WAAKG,iCAAL,CAAuCf,IAAvC,EAA6C,IAA7C,EAAmDN,MAAnD;AACH,KAFI,MAGA,IAAI,KAAKR,WAAL,IAAoB,KAAKA,WAAL,CAAiB,CAAjB,MAAwB,GAAhD,EAAqD;AACtD,WAAKgB,oCAAL,CAA0C,IAA1C,EAAgDR,MAAhD;AACH;;AACD,WAAOA,MAAP;AACH,GAjCD;;AAkCAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBmD,oCAAxB,GAA+D,UAAUmC,WAAV,EAAuBjE,MAAvB,EAA+B;AAC1F,QAAI,KAAKV,MAAL,IAAe/B,SAAS,CAAC0G,WAAW,CAACiB,aAAb,CAAxB,IAAuD,KAAK5F,MAAL,GAAc2E,WAAW,CAACiB,aAArF,EAAoG;AAChG,WAAKrE,oBAAL,CAA0BoD,WAAW,CAACgD,QAAZ,EAA1B,EAAkDjH,MAAlD;AACH;;AACD,WAAOA,MAAP;AACH,GALD;;AAMAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBmC,2BAAxB,GAAsD,UAAUkO,UAAV,EAAsBhP,MAAtB,EAA8B;AAChF,QAAIW,MAAM,GAAGqO,UAAU,CAACvO,SAAX,EAAb;;AACA,QAAIE,MAAM,YAAYhE,KAAK,CAAC8E,gBAA5B,EAA8C;AAC1C,WAAKC,iCAAL,CAAuCf,MAAvC,EAA+CA,MAAM,CAACF,SAAP,EAA/C,EAAmET,MAAnE;AACA,aAAOA,MAAP;AACH;;AACD,QAAIiE,WAAW,GAAG+K,UAAU,CAACC,UAAX,CAAsBtS,KAAK,CAACuB,QAAN,CAAe6Q,WAArC,CAAlB;;AACA,QAAI,CAAC9K,WAAL,EAAkB;AACd,WAAK0E,gBAAL,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC3I,MAAlC;AACA,aAAOA,MAAP;AACH;;AACD,QAAIM,IAAI,GAAG0O,UAAU,CAAC7H,iBAAX,CAA6B,KAAK7H,MAAlC,EAA0C,IAA1C,CAAX;;AACA,QAAI,CAACgB,IAAL,EAAW;AACP,aAAO,KAAKwG,iCAAL,CAAuC7C,WAAvC,EAAoDjE,MAApD,CAAP;AACH;;AACD,QAAIM,IAAI,YAAY3D,KAAK,CAAC4B,YAAtB,IAAsC+B,IAAI,YAAY3D,KAAK,CAACwB,UAAhE,EAA4E;AACxE,aAAO,KAAK2I,iCAAL,CAAuC7C,WAAvC,EAAoDjE,MAApD,CAAP;AACH;;AACD,WAAOA,MAAP;AACH,GAnBD;;AAoBAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB+C,iCAAxB,GAA4D,UAAUwN,GAAV,EAAepD,IAAf,EAAqB9L,MAArB,EAA6B;AACrF,QAAImP,UAAU,GAAGrD,IAAI,CAACsD,aAAL,EAAjB;;AACA,QAAID,UAAU,IAAIA,UAAU,CAACE,OAAX,CAAmB,KAAnB,CAAlB,EAA6C;AACzC,UAAI,CAACvD,IAAI,CAACwD,YAAL,GAAoBpI,WAApB,EAAD,IAAsC4E,IAAI,CAACwD,YAAL,GAAoBC,QAApB,CAA6B,CAA7B,MAAoCL,GAA9E,EAAmF;AAC/E,aAAK7E,qCAAL,CAA2CrK,MAA3C;AACH;AACJ;;AACD,WAAOA,MAAP;AACH,GARD;;AASAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBwD,oCAAxB,GAA+D,UAAUqN,IAAV,EAAgBxP,MAAhB,EAAwB;AACnF,QAAIuN,YAAY,GAAGiC,IAAI,CAAChC,eAAL,EAAnB;;AACA,QAAID,YAAY,IAAI,KAAKjO,MAAL,GAAciO,YAAY,CAACjO,MAA3C,IAAqD,KAAKA,MAAL,GAAciO,YAAY,CAACnI,GAApF,EAAyF;AACrF,WAAKuD,gBAAL,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC3I,MAAlC;AACH;;AACD,WAAOA,MAAP;AACH,GAND;;AAOAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB0D,+BAAxB,GAA0D,UAAUoN,GAAV,EAAezP,MAAf,EAAuB;AAC7E,QAAI0P,SAAS,GAAG,KAAK5Q,gBAAL,GAAwByK,mBAAxB,CAA4C,KAAKjK,MAAjD,EAAyD3C,KAAK,CAAC6M,aAAN,CAAoBmG,KAA7E,CAAhB;;AACA,SAAK,IAAI5L,EAAE,GAAG,CAAT,EAAY6L,WAAW,GAAGF,SAA/B,EAA0C3L,EAAE,GAAG6L,WAAW,CAAC9P,MAA3D,EAAmEiE,EAAE,EAArE,EAAyE;AACrE,UAAI8L,WAAW,GAAGD,WAAW,CAAC7L,EAAD,CAA7B;;AACA,UAAI8L,WAAW,CAACvP,IAAZ,YAA4B3D,KAAK,CAACuN,gBAAtC,EAAwD;AACpDlK,QAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB,KAAK2J,gBAAL,CAAsBD,WAAtB,EAAmCA,WAAW,CAACvP,IAAZ,CAAiByP,aAAjB,EAAnC,EAAqE,IAArE,CAAlB;AACH;AACJ;;AACD,WAAO/P,MAAP;AACH,GATD;;AAUAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBgK,gBAAxB,GAA2C,UAAUhE,KAAV,EAAiBqC,YAAjB,EAA+BhH,MAA/B,EAAuC;AAC9E,QAAIgQ,YAAY,GAAG,KAAKlR,gBAAL,GAAwByK,mBAAxB,CAA4C,KAAKjK,MAAjD,EAAyD3C,KAAK,CAAC6M,aAAN,CAAoBlH,QAA7E,CAAnB;;AACA,SAAK,IAAIyB,EAAE,GAAG,CAAT,EAAYkM,cAAc,GAAGD,YAAlC,EAAgDjM,EAAE,GAAGkM,cAAc,CAACnQ,MAApE,EAA4EiE,EAAE,EAA9E,EAAkF;AAC9E,UAAImM,cAAc,GAAGD,cAAc,CAAClM,EAAD,CAAnC;;AACA,UAAImM,cAAc,CAAC5P,IAAf,YAA+B3D,KAAK,CAACuF,mBAAzC,EAA8D;AAC1DlC,QAAAA,MAAM,CAACE,KAAP,CAAaiG,IAAb,CAAkB,KAAK2J,gBAAL,CAAsBI,cAAtB,EAAsCA,cAAc,CAAC5P,IAAf,CAAoByP,aAApB,EAAtC,EAA2E/I,YAA3E,CAAlB;AACH;AACJ;;AACD,WAAOhH,MAAP;AACH,GATD;;AAUAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBmR,gBAAxB,GAA2C,UAAUnG,MAAV,EAAkBwG,UAAlB,EAA8BnJ,YAA9B,EAA4C;AACnF,QAAIwI,IAAI,GAAG7F,MAAM,CAACrJ,IAAlB;AACA,QAAI8P,MAAM,GAAGD,UAAU,CAACtB,WAAX,GAAyBwB,GAAzB,CAA6B,UAAUC,CAAV,EAAa;AACnD,aAAQA,CAAC,YAAY3T,KAAK,CAACqN,iBAApB,GAAyCsG,CAAC,CAAClG,OAAF,EAAzC,GAAuDkG,CAAC,CAACvC,OAAF,EAA9D;AACH,KAFY,CAAb;AAGA,QAAIlJ,UAAU,GAAG8E,MAAM,CAAC1E,IAAP,GAAc,GAAd,GAAoBmL,MAAM,CAACC,GAAP,CAAW,UAAU5E,CAAV,EAAahI,KAAb,EAAoB;AAAE,aAAO,QAAQA,KAAK,GAAG,CAAhB,IAAqB,GAArB,GAA2BgI,CAA3B,GAA+B,GAAtC;AAA4C,KAA7E,EAA+E8E,IAA/E,CAAoF,IAApF,CAApB,GAAgH,GAAjI;AACA,WAAO;AACHjN,MAAAA,KAAK,EAAEqG,MAAM,CAAC1E,IADX;AAEHkF,MAAAA,MAAM,EAAER,MAAM,CAAC1E,IAAP,GAAc,GAAd,GAAoBmL,MAAM,CAACG,IAAP,CAAY,IAAZ,CAApB,GAAwC,GAF7C;AAGH5K,MAAAA,QAAQ,EAAEzI,QAAQ,CAAC0I,OAAT,CAAiB,KAAKb,kBAAL,CAAwBiC,YAAxB,CAAjB,EAAwDnC,UAAxD,CAHP;AAIHgB,MAAAA,gBAAgB,EAAEnI,aAJf;AAKHoI,MAAAA,IAAI,EAAE9I,kBAAkB,CAACsF,QALtB;AAMHe,MAAAA,QAAQ,EAAEzF,SAAS,CAAC8M;AANjB,KAAP;AAQH,GAdD;;AAeA7M,EAAAA,aAAa,CAACc,SAAd,CAAwB+D,kCAAxB,GAA6D,UAAU8N,iBAAV,EAA6BxQ,MAA7B,EAAqC;AAC9F,QAAIyQ,KAAK,GAAGD,iBAAiB,CAACrD,0BAAlB,CAA6C,KAAK7N,MAAlD,CAAZ;;AACA,QAAImR,KAAJ,EAAW;AACP,UAAIA,KAAK,YAAY9T,KAAK,CAACoS,WAA3B,EAAwC;AACpC,YAAI,CAACxR,SAAS,CAACkT,KAAK,CAACvL,aAAP,CAAV,IAAmC,KAAK5F,MAAL,IAAemR,KAAK,CAACvL,aAA5D,EAA2E;AACvE,iBAAO,KAAK1E,oCAAL,CAA0CiQ,KAA1C,EAAiDzQ,MAAjD,CAAP;AACH,SAFD,MAGK;AACD,iBAAO,KAAK8G,iCAAL,CAAuC2J,KAAvC,EAA8CzQ,MAA9C,CAAP;AACH;AACJ,OAPD,MAQK,IAAIyQ,KAAK,YAAY9T,KAAK,CAAC8F,iBAA3B,EAA8C;AAC/C,eAAO,KAAKC,kCAAL,CAAwC+N,KAAxC,EAA+CzQ,MAA/C,CAAP;AACH;AACJ;;AACD,QAAIzC,SAAS,CAACiT,iBAAiB,CAACE,OAAnB,CAAT,IAAwC,KAAKpR,MAAL,GAAckR,iBAAiB,CAACE,OAAxE,KAAoF,CAACnT,SAAS,CAACiT,iBAAiB,CAACG,OAAnB,CAAV,IAAyC,KAAKrR,MAAL,IAAekR,iBAAiB,CAACG,OAA9J,CAAJ,EAA4K;AACxK,aAAO,KAAKnQ,oCAAL,CAA0C,IAA1C,EAAgDR,MAAhD,CAAP;AACH;;AACD,WAAOA,MAAP;AACH,GAnBD;;AAoBAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB6D,yBAAxB,GAAoD,UAAUoO,QAAV,EAAoB5Q,MAApB,EAA4B;AAC5E,QAAIuN,YAAY,GAAGqD,QAAQ,CAACpD,eAAT,EAAnB;AACA,QAAIqD,aAAa,GAAG,CAACtD,YAAD,IAAiB,KAAKjO,MAAL,IAAeiO,YAAY,CAACjO,MAAjE;;AACA,QAAIuR,aAAJ,EAAmB;AACf,UAAIJ,KAAK,GAAGG,QAAQ,CAACzD,0BAAT,CAAoC,KAAK7N,MAAzC,CAAZ;;AACA,UAAImR,KAAK,YAAY9T,KAAK,CAAC8F,iBAA3B,EAA8C;AAC1C,eAAO,KAAKC,kCAAL,CAAwC+N,KAAxC,EAA+CzQ,MAA/C,CAAP;AACH;;AACD,aAAOA,MAAP;AACH;;AACD,WAAO,KAAK4C,wBAAL,CAA8B5C,MAA9B,CAAP;AACH,GAXD;;AAYAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB0C,iCAAxB,GAA4D,UAAUyP,UAAV,EAAsB9J,YAAtB,EAAoChH,MAApC,EAA4C;AACpG,WAAOA,MAAP;AACH,GAFD;;AAGAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBgE,+BAAxB,GAA0D,UAAUoO,cAAV,EAA0B/Q,MAA1B,EAAkC;AACxF,QAAIgR,QAAJ;AACA,QAAI3R,QAAJ;AACA,QAAIuF,KAAJ,CAHwF,CAIxF;;AACA,QAAI,CAACmM,cAAc,CAAC7J,WAAf,EAAL,EAAmC;AAC/B8J,MAAAA,QAAQ,GAAG,EAAX;AACA3R,MAAAA,QAAQ,GAAG,KAAKA,QAAhB;AACA,UAAI4R,qBAAqB,GAAG,KAAKlR,YAAL,CAAkBgL,UAAlB,CAA6BgG,cAAc,CAACzR,MAAf,GAAwB,OAAOQ,MAA5D,CAA5B;AACA8E,MAAAA,KAAK,GAAG3H,KAAK,CAAC0C,MAAN,CAAasR,qBAAb,EAAoCA,qBAApC,CAAR;AACH,KALD,MAMK;AACD,UAAIC,YAAY,GAAGH,cAAc,CAACxB,QAAf,CAAwB,CAAxB,CAAnB;AACAyB,MAAAA,QAAQ,GAAGE,YAAY,CAACnD,OAAb,EAAX;AACA1O,MAAAA,QAAQ,GAAG,KAAKA,QAAhB;AACAuF,MAAAA,KAAK,GAAG,KAAKG,kBAAL,CAAwBmM,YAAxB,CAAR;AACH;;AACD,SAAKlT,sBAAL,CAA4BuF,OAA5B,CAAoC,UAAU6C,WAAV,EAAuB;AACvD,UAAIA,WAAW,CAAC+K,oBAAhB,EAAsC;AAClC/K,QAAAA,WAAW,CAAC+K,oBAAZ,CAAiC;AAC7BH,UAAAA,QAAQ,EAAEA,QADmB;AAE7B3R,UAAAA,QAAQ,EAAEA,QAFmB;AAG7BuF,UAAAA,KAAK,EAAEA;AAHsB,SAAjC;AAKH;AACJ,KARD;AASA,WAAO5E,MAAP;AACH,GA3BD;;AA4BAnC,EAAAA,aAAa,CAACc,SAAd,CAAwBmE,0BAAxB,GAAqD,UAAUsO,cAAV,EAA0BpR,MAA1B,EAAkC;AACnF,QAAImE,KAAK,GAAG,IAAZ;;AACA,SAAKnG,sBAAL,CAA4BuF,OAA5B,CAAoC,UAAU6C,WAAV,EAAuB;AACvD,UAAIA,WAAW,CAACiL,eAAhB,EAAiC;AAC7BjL,QAAAA,WAAW,CAACiL,eAAZ,CAA4B;AACxBC,UAAAA,SAAS,EAAEF,cAAc,CAACrD,OAAf,EADa;AAExB1O,UAAAA,QAAQ,EAAE8E,KAAK,CAAC9E,QAFQ;AAGxBuF,UAAAA,KAAK,EAAET,KAAK,CAACY,kBAAN,CAAyBqM,cAAzB;AAHiB,SAA5B;AAKH;AACJ,KARD;AASA,WAAOpR,MAAP;AACH,GAZD;;AAaAnC,EAAAA,aAAa,CAACc,SAAd,CAAwB4G,mBAAxB,GAA8C,YAAY;AACtD,QAAI,CAAChI,SAAS,CAAC,KAAKgU,gBAAN,CAAd,EAAuC;AACnC,UAAI,CAAChU,SAAS,CAAC,KAAKQ,kBAAN,CAAd,EAAyC;AACrC,aAAKwT,gBAAL,GAAwB,IAAxB;AACA,eAAO,KAAKA,gBAAZ;AACH;;AACD,UAAI7K,UAAU,GAAG,KAAK3I,kBAAL,CAAwBgC,YAAxB,IAAwC,KAAKhC,kBAAL,CAAwBgC,YAAxB,CAAqC2G,UAA9F;AACA,WAAK6K,gBAAL,GAAwB7K,UAAU,IAAIA,UAAU,CAACkD,cAAzB,IAA2C4H,KAAK,CAACC,OAAN,CAAc/K,UAAU,CAACkD,cAAX,CAA0B8H,mBAAxC,CAA3C,IAA2GhL,UAAU,CAACkD,cAAX,CAA0B8H,mBAA1B,CAA8CzO,OAA9C,CAAsD7F,UAAU,CAACuU,QAAjE,MAA+E,CAAC,CAAnN;AACH;;AACD,WAAO,KAAKJ,gBAAZ;AACH,GAVD;;AAWA,SAAO1T,aAAP;AACH,CA56BkC,EAAnC;;AA66BA,SAASA,aAAT;;AACA,SAAS4H,YAAT,CAAsBd,KAAtB,EAA6B;AACzB,MAAIA,KAAK,CAACiN,MAAN,KAAiBjN,KAAK,CAACiN,MAAN,KAAiB,aAAjB,IAAkCjN,KAAK,CAACiN,MAAN,KAAiB,UAApE,CAAJ,EAAqF;AACjF,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;AACD;;;;;AAGA,SAASjO,iBAAT,CAA2B8K,CAA3B,EAA8B;AAC1B,MAAIoD,IAAI,GAAGpD,CAAC,CAACqD,QAAF,EAAX;;AACA,UAAQD,IAAI,CAAC/R,MAAb;AACI,SAAK,CAAL;AACI,aAAO+R,IAAP;;AACJ,SAAK,CAAL;AACI,aAAO,MAAMA,IAAb;;AACJ,SAAK,CAAL;AACI,aAAO,OAAOA,IAAd;;AACJ,SAAK,CAAL;AACI,aAAO,QAAQA,IAAf;;AACJ;AACI,aAAO,MAAP;AAVR;AAYH;;AACD,IAAIxG,GAAG;AAAG;AAAe,YAAY;AACjC,WAASA,GAAT,GAAe;AACX,SAAK0G,OAAL,GAAe,EAAf;AACH;;AACD1G,EAAAA,GAAG,CAAC1M,SAAJ,CAAcqT,GAAd,GAAoB,UAAUrN,KAAV,EAAiB;AACjC,SAAKoN,OAAL,CAAapN,KAAb,IAAsB,IAAtB;AACH,GAFD;;AAGA0G,EAAAA,GAAG,CAAC1M,SAAJ,CAAc8J,UAAd,GAA2B,YAAY;AACnC,WAAOlC,MAAM,CAAC0L,IAAP,CAAY,KAAKF,OAAjB,CAAP;AACH,GAFD;;AAGA,SAAO1G,GAAP;AACH,CAXwB,EAAzB;;AAYA,SAASyB,2BAAT,CAAqCoF,IAArC,EAA2C;AACvC,SAAOA,IAAI,CAACtM,OAAL,CAAa,OAAb,EAAsB,MAAtB,CAAP;AACH;;AACD,SAAS0C,aAAT,CAAuBtJ,UAAvB,EAAmCiF,WAAnC,EAAgD;AAC5C,MAAIkO,gBAAgB,GAAGlO,WAAW,CAAC8C,mBAAZ,EAAvB;AACA,MAAIgL,OAAO,GAAG,IAAI1G,GAAJ,EAAd;;AACA,WAAS+G,UAAT,CAAoB9R,IAApB,EAA0B;AACtB,QAAIA,IAAI,YAAY3D,KAAK,CAACwB,UAAtB,IAAoCmC,IAAI,YAAY3D,KAAK,CAAC4B,YAA1D,IAA0E+B,IAAI,YAAY3D,KAAK,CAAC6B,aAApG,EAAmH;AAC/GuT,MAAAA,OAAO,CAACC,GAAR,CAAY1R,IAAI,CAACyN,OAAL,EAAZ;AACH;;AACD,WAAO,IAAP;AACH;;AACD,WAASsE,eAAT,CAAyB7C,IAAzB,EAA+B;AAC3B,QAAIlJ,YAAY,GAAGkJ,IAAI,CAACzI,mBAAL,EAAnB;AACA,WAAOoL,gBAAgB,KAAK7L,YAA5B;AACH;;AACD,WAASgM,QAAT,CAAkBhS,IAAlB,EAAwB;AACpB,QAAIA,IAAI,YAAY3D,KAAK,CAACoS,WAAtB,IAAqCzO,IAAI,KAAK2D,WAAlD,EAA+D;AAC3D,UAAIoO,eAAe,CAAC/R,IAAD,CAAnB,EAA2B;AACvB,YAAIuI,KAAK,GAAGvI,IAAI,CAAC2G,QAAL,EAAZ;;AACA,YAAI4B,KAAJ,EAAW;AACPA,UAAAA,KAAK,CAAC2F,MAAN,CAAa4D,UAAb;AACH;AACJ;AACJ;;AACD,WAAO,IAAP;AACH;;AACDpT,EAAAA,UAAU,CAACwP,MAAX,CAAkB8D,QAAlB;AACA,SAAOP,OAAP;AACH;;AACD,IAAIxG,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,CAA6BwG,OAA7B,EAAsCQ,aAAtC,EAAqD;AACjD,SAAKR,OAAL,GAAeA,OAAf;AACA,SAAKQ,aAAL,GAAqBA,aAArB,CAFiD,CAGjD;AACH;;AACDhH,EAAAA,mBAAmB,CAAC5M,SAApB,CAA8B6T,SAA9B,GAA0C,UAAUlS,IAAV,EAAgB;AACtD,QAAIA,IAAI,YAAY3D,KAAK,CAAC6B,aAAtB,IAAwC8B,IAAI,YAAY3D,KAAK,CAAC2F,QAAtB,IAAkCzF,aAAa,CAAC4V,kBAAd,CAAiCnS,IAAjC,CAA9E,EAAuH;AACnH,UAAI,KAAKiS,aAAL,GAAqBjS,IAAI,CAAChB,MAA1B,IAAoCgB,IAAI,CAAC8E,GAAL,GAAW,KAAKmN,aAAxD,EAAuE;AACnE,aAAKR,OAAL,CAAaC,GAAb,CAAiB1R,IAAI,CAACyN,OAAL,EAAjB;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAPD;;AAQA,SAAOxC,mBAAP;AACH,CAfwC,EAAzC;;AAgBA,SAAS9L,cAAT,CAAwBL,QAAxB,EAAkCE,MAAlC,EAA0C;AACtC,MAAIe,CAAC,GAAGf,MAAM,GAAG,CAAjB;AACA,MAAI4S,IAAI,GAAG9S,QAAQ,CAAC2O,OAAT,EAAX;;AACA,SAAO1N,CAAC,IAAI,CAAL,IAAU,sBAAsB4C,OAAtB,CAA8BiP,IAAI,CAACvD,MAAL,CAAYtO,CAAZ,CAA9B,MAAkD,CAAC,CAApE,EAAuE;AACnEA,IAAAA,CAAC;AACJ;;AACD,SAAO6R,IAAI,CAACQ,SAAL,CAAerS,CAAC,GAAG,CAAnB,EAAsBf,MAAtB,CAAP;AACH;;AACD,SAASwK,aAAT,CAAuB6I,CAAvB,EAA0B;AACtB;AACA,SAAQA,CAAC,CAACC,WAAF,MAAmB/V,aAAa,CAACqO,MAAlC,IAA6C,qCAAqC2H,IAArC,CAA0CF,CAA1C,CAApD;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as nodes from '../parser/cssNodes.js';\nimport { Symbols } from '../parser/cssSymbolScope.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport * as strings from '../utils/strings.js';\nimport { Position, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind, CompletionItemTag } from '../cssLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nimport { isDefined } from '../utils/objects.js';\nvar localize = nls.loadMessageBundle();\nvar SnippetFormat = InsertTextFormat.Snippet;\nvar SortTexts;\n(function (SortTexts) {\n    // char code 32, comes before everything\n    SortTexts[\"Enums\"] = \" \";\n    SortTexts[\"Normal\"] = \"d\";\n    SortTexts[\"VendorPrefixed\"] = \"x\";\n    SortTexts[\"Term\"] = \"y\";\n    SortTexts[\"Variable\"] = \"z\";\n})(SortTexts || (SortTexts = {}));\nvar CSSCompletion = /** @class */ (function () {\n    function CSSCompletion(variablePrefix, clientCapabilities) {\n        if (variablePrefix === void 0) { variablePrefix = null; }\n        this.variablePrefix = variablePrefix;\n        this.clientCapabilities = clientCapabilities;\n        this.completionParticipants = [];\n        this.valueTypes = [\n            nodes.NodeType.Identifier, nodes.NodeType.Value, nodes.NodeType.StringLiteral, nodes.NodeType.URILiteral, nodes.NodeType.NumericValue,\n            nodes.NodeType.HexColorValue, nodes.NodeType.VariableName, nodes.NodeType.Prio\n        ];\n    }\n    CSSCompletion.prototype.configure = function (settings) {\n        this.settings = settings;\n    };\n    CSSCompletion.prototype.getSymbolContext = function () {\n        if (!this.symbolContext) {\n            this.symbolContext = new Symbols(this.styleSheet);\n        }\n        return this.symbolContext;\n    };\n    CSSCompletion.prototype.setCompletionParticipants = function (registeredCompletionParticipants) {\n        this.completionParticipants = registeredCompletionParticipants || [];\n    };\n    CSSCompletion.prototype.doComplete = function (document, position, styleSheet) {\n        this.offset = document.offsetAt(position);\n        this.position = position;\n        this.currentWord = getCurrentWord(document, this.offset);\n        this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n        this.textDocument = document;\n        this.styleSheet = styleSheet;\n        try {\n            var result = { isIncomplete: false, items: [] };\n            this.nodePath = nodes.getNodePath(this.styleSheet, this.offset);\n            for (var i = this.nodePath.length - 1; i >= 0; i--) {\n                var node = this.nodePath[i];\n                if (node instanceof nodes.Property) {\n                    this.getCompletionsForDeclarationProperty(node.getParent(), result);\n                }\n                else if (node instanceof nodes.Expression) {\n                    if (node.parent instanceof nodes.Interpolation) {\n                        this.getVariableProposals(null, result);\n                    }\n                    else {\n                        this.getCompletionsForExpression(node, result);\n                    }\n                }\n                else if (node instanceof nodes.SimpleSelector) {\n                    var parentRef = node.findAParent(nodes.NodeType.ExtendsReference, nodes.NodeType.Ruleset);\n                    if (parentRef) {\n                        if (parentRef.type === nodes.NodeType.ExtendsReference) {\n                            this.getCompletionsForExtendsReference(parentRef, node, result);\n                        }\n                        else {\n                            var parentRuleSet = parentRef;\n                            this.getCompletionsForSelector(parentRuleSet, parentRuleSet && parentRuleSet.isNested(), result);\n                        }\n                    }\n                }\n                else if (node instanceof nodes.FunctionArgument) {\n                    this.getCompletionsForFunctionArgument(node, node.getParent(), result);\n                }\n                else if (node instanceof nodes.Declarations) {\n                    this.getCompletionsForDeclarations(node, result);\n                }\n                else if (node instanceof nodes.VariableDeclaration) {\n                    this.getCompletionsForVariableDeclaration(node, result);\n                }\n                else if (node instanceof nodes.RuleSet) {\n                    this.getCompletionsForRuleSet(node, result);\n                }\n                else if (node instanceof nodes.Interpolation) {\n                    this.getCompletionsForInterpolation(node, result);\n                }\n                else if (node instanceof nodes.FunctionDeclaration) {\n                    this.getCompletionsForFunctionDeclaration(node, result);\n                }\n                else if (node instanceof nodes.MixinReference) {\n                    this.getCompletionsForMixinReference(node, result);\n                }\n                else if (node instanceof nodes.Function) {\n                    this.getCompletionsForFunctionArgument(null, node, result);\n                }\n                else if (node instanceof nodes.Supports) {\n                    this.getCompletionsForSupports(node, result);\n                }\n                else if (node instanceof nodes.SupportsCondition) {\n                    this.getCompletionsForSupportsCondition(node, result);\n                }\n                else if (node instanceof nodes.ExtendsReference) {\n                    this.getCompletionsForExtendsReference(node, null, result);\n                }\n                else if (node.type === nodes.NodeType.URILiteral) {\n                    this.getCompletionForUriLiteralValue(node, result);\n                }\n                else if (node.parent === null) {\n                    this.getCompletionForTopLevel(result);\n                }\n                else if (node.type === nodes.NodeType.StringLiteral && this.isImportPathParent(node.parent.type)) {\n                    this.getCompletionForImportPath(node, result);\n                    // } else if (node instanceof nodes.Variable) {\n                    // this.getCompletionsForVariableDeclaration()\n                }\n                else {\n                    continue;\n                }\n                if (result.items.length > 0 || this.offset > node.offset) {\n                    return this.finalize(result);\n                }\n            }\n            this.getCompletionsForStylesheet(result);\n            if (result.items.length === 0) {\n                if (this.variablePrefix && this.currentWord.indexOf(this.variablePrefix) === 0) {\n                    this.getVariableProposals(null, result);\n                }\n            }\n            return this.finalize(result);\n        }\n        finally {\n            // don't hold on any state, clear symbolContext\n            this.position = null;\n            this.currentWord = null;\n            this.textDocument = null;\n            this.styleSheet = null;\n            this.symbolContext = null;\n            this.defaultReplaceRange = null;\n            this.nodePath = null;\n        }\n    };\n    CSSCompletion.prototype.isImportPathParent = function (type) {\n        return type === nodes.NodeType.Import;\n    };\n    CSSCompletion.prototype.finalize = function (result) {\n        var needsSortText = result.items.some(function (i) { return !!i.sortText || i.label[0] === '-'; });\n        if (needsSortText) {\n            result.items.forEach(function (item, index) {\n                if (!item.sortText) {\n                    if (item.label[0] === '-') {\n                        item.sortText = SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n                    }\n                    else {\n                        item.sortText = SortTexts.Normal + '_' + computeRankNumber(index);\n                    }\n                }\n                else {\n                    if (item.label[0] === '-') {\n                        item.sortText += SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n                    }\n                    else {\n                        item.sortText += SortTexts.Normal + '_' + computeRankNumber(index);\n                    }\n                }\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.findInNodePath = function () {\n        var types = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            types[_i] = arguments[_i];\n        }\n        for (var i = this.nodePath.length - 1; i >= 0; i--) {\n            var node = this.nodePath[i];\n            if (types.indexOf(node.type) !== -1) {\n                return node;\n            }\n        }\n        return null;\n    };\n    CSSCompletion.prototype.getCompletionsForDeclarationProperty = function (declaration, result) {\n        return this.getPropertyProposals(declaration, result);\n    };\n    CSSCompletion.prototype.getPropertyProposals = function (declaration, result) {\n        var _this = this;\n        var triggerPropertyValueCompletion = this.isTriggerPropertyValueCompletionEnabled;\n        var completePropertyWithSemicolon = this.isCompletePropertyWithSemicolonEnabled;\n        var properties = languageFacts.cssDataManager.getProperties();\n        properties.forEach(function (entry) {\n            var range;\n            var insertText;\n            var retrigger = false;\n            if (declaration) {\n                range = _this.getCompletionRange(declaration.getProperty());\n                insertText = entry.name;\n                if (!isDefined(declaration.colonPosition)) {\n                    insertText += ': ';\n                    retrigger = true;\n                }\n            }\n            else {\n                range = _this.getCompletionRange(null);\n                insertText = entry.name + ': ';\n                retrigger = true;\n            }\n            // Empty .selector { | } case\n            if (!declaration && completePropertyWithSemicolon) {\n                insertText += '$0;';\n            }\n            // Cases such as .selector { p; } or .selector { p:; }\n            if (declaration && !declaration.semicolonPosition) {\n                if (completePropertyWithSemicolon && _this.offset >= _this.textDocument.offsetAt(range.end)) {\n                    insertText += '$0;';\n                }\n            }\n            var item = {\n                label: entry.name,\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                textEdit: TextEdit.replace(range, insertText),\n                insertTextFormat: InsertTextFormat.Snippet,\n                kind: CompletionItemKind.Property\n            };\n            if (!entry.restrictions) {\n                retrigger = false;\n            }\n            if (triggerPropertyValueCompletion && retrigger) {\n                item.command = {\n                    title: 'Suggest',\n                    command: 'editor.action.triggerSuggest'\n                };\n            }\n            if (strings.startsWith(entry.name, '-')) {\n                item.sortText = SortTexts.VendorPrefixed;\n            }\n            result.items.push(item);\n        });\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssProperty) {\n                participant.onCssProperty({\n                    propertyName: _this.currentWord,\n                    range: _this.defaultReplaceRange\n                });\n            }\n        });\n        return result;\n    };\n    Object.defineProperty(CSSCompletion.prototype, \"isTriggerPropertyValueCompletionEnabled\", {\n        get: function () {\n            if (!this.settings ||\n                !this.settings.completion ||\n                this.settings.completion.triggerPropertyValueCompletion === undefined) {\n                return true;\n            }\n            return this.settings.completion.triggerPropertyValueCompletion;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CSSCompletion.prototype, \"isCompletePropertyWithSemicolonEnabled\", {\n        get: function () {\n            if (!this.settings ||\n                !this.settings.completion ||\n                this.settings.completion.completePropertyWithSemicolon === undefined) {\n                return true;\n            }\n            return this.settings.completion.completePropertyWithSemicolon;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CSSCompletion.prototype.getCompletionsForDeclarationValue = function (node, result) {\n        var _this = this;\n        var propertyName = node.getFullPropertyName();\n        var entry = languageFacts.cssDataManager.getProperty(propertyName);\n        var existingNode = node.getValue() || null;\n        while (existingNode && existingNode.hasChildren()) {\n            existingNode = existingNode.findChildAtOffset(this.offset, false);\n        }\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssPropertyValue) {\n                participant.onCssPropertyValue({\n                    propertyName: propertyName,\n                    propertyValue: _this.currentWord,\n                    range: _this.getCompletionRange(existingNode)\n                });\n            }\n        });\n        if (entry) {\n            if (entry.restrictions) {\n                for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n                    var restriction = _a[_i];\n                    switch (restriction) {\n                        case 'color':\n                            this.getColorProposals(entry, existingNode, result);\n                            break;\n                        case 'position':\n                            this.getPositionProposals(entry, existingNode, result);\n                            break;\n                        case 'repeat':\n                            this.getRepeatStyleProposals(entry, existingNode, result);\n                            break;\n                        case 'line-style':\n                            this.getLineStyleProposals(entry, existingNode, result);\n                            break;\n                        case 'line-width':\n                            this.getLineWidthProposals(entry, existingNode, result);\n                            break;\n                        case 'geometry-box':\n                            this.getGeometryBoxProposals(entry, existingNode, result);\n                            break;\n                        case 'box':\n                            this.getBoxProposals(entry, existingNode, result);\n                            break;\n                        case 'image':\n                            this.getImageProposals(entry, existingNode, result);\n                            break;\n                        case 'timing-function':\n                            this.getTimingFunctionProposals(entry, existingNode, result);\n                            break;\n                        case 'shape':\n                            this.getBasicShapeProposals(entry, existingNode, result);\n                            break;\n                    }\n                }\n            }\n            this.getValueEnumProposals(entry, existingNode, result);\n            this.getCSSWideKeywordProposals(entry, existingNode, result);\n            this.getUnitProposals(entry, existingNode, result);\n        }\n        else {\n            var existingValues = collectValues(this.styleSheet, node);\n            for (var _b = 0, _c = existingValues.getEntries(); _b < _c.length; _b++) {\n                var existingValue = _c[_b];\n                result.items.push({\n                    label: existingValue,\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), existingValue),\n                    kind: CompletionItemKind.Value\n                });\n            }\n        }\n        this.getVariableProposals(existingNode, result);\n        this.getTermProposals(entry, existingNode, result);\n        return result;\n    };\n    CSSCompletion.prototype.getValueEnumProposals = function (entry, existingNode, result) {\n        if (entry.values) {\n            for (var _i = 0, _a = entry.values; _i < _a.length; _i++) {\n                var value = _a[_i];\n                var insertString = value.name;\n                var insertTextFormat = void 0;\n                if (strings.endsWith(insertString, ')')) {\n                    var from = insertString.lastIndexOf('(');\n                    if (from !== -1) {\n                        insertString = insertString.substr(0, from) + '($1)';\n                        insertTextFormat = SnippetFormat;\n                    }\n                }\n                var item = {\n                    label: value.name,\n                    documentation: languageFacts.getEntryDescription(value, this.doesSupportMarkdown()),\n                    tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertString),\n                    sortText: SortTexts.Enums,\n                    kind: CompletionItemKind.Value,\n                    insertTextFormat: insertTextFormat\n                };\n                result.items.push(item);\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCSSWideKeywordProposals = function (entry, existingNode, result) {\n        for (var keywords in languageFacts.cssWideKeywords) {\n            result.items.push({\n                label: keywords,\n                documentation: languageFacts.cssWideKeywords[keywords],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), keywords),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForInterpolation = function (node, result) {\n        if (this.offset >= node.offset + 2) {\n            this.getVariableProposals(null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getVariableProposals = function (existingNode, result) {\n        var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n        for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n            var symbol = symbols_1[_i];\n            var insertText = strings.startsWith(symbol.name, '--') ? \"var(\" + symbol.name + \")\" : symbol.name;\n            var completionItem = {\n                label: symbol.name,\n                documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Variable,\n                sortText: SortTexts.Variable\n            };\n            if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n                completionItem.kind = CompletionItemKind.Color;\n            }\n            if (symbol.node.type === nodes.NodeType.FunctionParameter) {\n                var mixinNode = (symbol.node.getParent());\n                if (mixinNode.type === nodes.NodeType.MixinDeclaration) {\n                    completionItem.detail = localize('completion.argument', 'argument from \\'{0}\\'', mixinNode.getName());\n                }\n            }\n            result.items.push(completionItem);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getVariableProposalsForCSSVarFunction = function (result) {\n        var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n        symbols = symbols.filter(function (symbol) {\n            return strings.startsWith(symbol.name, '--');\n        });\n        for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {\n            var symbol = symbols_2[_i];\n            var completionItem = {\n                label: symbol.name,\n                documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n                textEdit: TextEdit.replace(this.getCompletionRange(null), symbol.name),\n                kind: CompletionItemKind.Variable\n            };\n            if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n                completionItem.kind = CompletionItemKind.Color;\n            }\n            result.items.push(completionItem);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getUnitProposals = function (entry, existingNode, result) {\n        var currentWord = '0';\n        if (this.currentWord.length > 0) {\n            var numMatch = this.currentWord.match(/^-?\\d[\\.\\d+]*/);\n            if (numMatch) {\n                currentWord = numMatch[0];\n                result.isIncomplete = currentWord.length === this.currentWord.length;\n            }\n        }\n        else if (this.currentWord.length === 0) {\n            result.isIncomplete = true;\n        }\n        if (existingNode && existingNode.parent && existingNode.parent.type === nodes.NodeType.Term) {\n            existingNode = existingNode.getParent(); // include the unary operator\n        }\n        if (entry.restrictions) {\n            for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n                var restriction = _a[_i];\n                var units = languageFacts.units[restriction];\n                if (units) {\n                    for (var _b = 0, units_1 = units; _b < units_1.length; _b++) {\n                        var unit = units_1[_b];\n                        var insertText = currentWord + unit;\n                        result.items.push({\n                            label: insertText,\n                            textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                            kind: CompletionItemKind.Unit\n                        });\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionRange = function (existingNode) {\n        if (existingNode && existingNode.offset <= this.offset && this.offset <= existingNode.end) {\n            var end = existingNode.end !== -1 ? this.textDocument.positionAt(existingNode.end) : this.position;\n            var start = this.textDocument.positionAt(existingNode.offset);\n            if (start.line === end.line) {\n                return Range.create(start, end); // multi line edits are not allowed\n            }\n        }\n        return this.defaultReplaceRange;\n    };\n    CSSCompletion.prototype.getColorProposals = function (entry, existingNode, result) {\n        for (var color in languageFacts.colors) {\n            result.items.push({\n                label: color,\n                documentation: languageFacts.colors[color],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n                kind: CompletionItemKind.Color\n            });\n        }\n        for (var color in languageFacts.colorKeywords) {\n            result.items.push({\n                label: color,\n                documentation: languageFacts.colorKeywords[color],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n                kind: CompletionItemKind.Value\n            });\n        }\n        var colorValues = new Set();\n        this.styleSheet.acceptVisitor(new ColorValueCollector(colorValues, this.offset));\n        for (var _i = 0, _a = colorValues.getEntries(); _i < _a.length; _i++) {\n            var color = _a[_i];\n            result.items.push({\n                label: color,\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n                kind: CompletionItemKind.Color\n            });\n        }\n        var _loop_1 = function (p) {\n            var tabStop = 1;\n            var replaceFunction = function (_match, p1) { return '${' + tabStop++ + ':' + p1 + '}'; };\n            var insertText = p.func.replace(/\\[?\\$(\\w+)\\]?/g, replaceFunction);\n            result.items.push({\n                label: p.func.substr(0, p.func.indexOf('(')),\n                detail: p.func,\n                documentation: p.desc,\n                textEdit: TextEdit.replace(this_1.getCompletionRange(existingNode), insertText),\n                insertTextFormat: SnippetFormat,\n                kind: CompletionItemKind.Function\n            });\n        };\n        var this_1 = this;\n        for (var _b = 0, _c = languageFacts.colorFunctions; _b < _c.length; _b++) {\n            var p = _c[_b];\n            _loop_1(p);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getPositionProposals = function (entry, existingNode, result) {\n        for (var position in languageFacts.positionKeywords) {\n            result.items.push({\n                label: position,\n                documentation: languageFacts.positionKeywords[position],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), position),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getRepeatStyleProposals = function (entry, existingNode, result) {\n        for (var repeat in languageFacts.repeatStyleKeywords) {\n            result.items.push({\n                label: repeat,\n                documentation: languageFacts.repeatStyleKeywords[repeat],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), repeat),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getLineStyleProposals = function (entry, existingNode, result) {\n        for (var lineStyle in languageFacts.lineStyleKeywords) {\n            result.items.push({\n                label: lineStyle,\n                documentation: languageFacts.lineStyleKeywords[lineStyle],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineStyle),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getLineWidthProposals = function (entry, existingNode, result) {\n        for (var _i = 0, _a = languageFacts.lineWidthKeywords; _i < _a.length; _i++) {\n            var lineWidth = _a[_i];\n            result.items.push({\n                label: lineWidth,\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineWidth),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getGeometryBoxProposals = function (entry, existingNode, result) {\n        for (var box in languageFacts.geometryBoxKeywords) {\n            result.items.push({\n                label: box,\n                documentation: languageFacts.geometryBoxKeywords[box],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getBoxProposals = function (entry, existingNode, result) {\n        for (var box in languageFacts.boxKeywords) {\n            result.items.push({\n                label: box,\n                documentation: languageFacts.boxKeywords[box],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getImageProposals = function (entry, existingNode, result) {\n        for (var image in languageFacts.imageFunctions) {\n            var insertText = moveCursorInsideParenthesis(image);\n            result.items.push({\n                label: image,\n                documentation: languageFacts.imageFunctions[image],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Function,\n                insertTextFormat: image !== insertText ? SnippetFormat : void 0\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getTimingFunctionProposals = function (entry, existingNode, result) {\n        for (var timing in languageFacts.transitionTimingFunctions) {\n            var insertText = moveCursorInsideParenthesis(timing);\n            result.items.push({\n                label: timing,\n                documentation: languageFacts.transitionTimingFunctions[timing],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Function,\n                insertTextFormat: timing !== insertText ? SnippetFormat : void 0\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getBasicShapeProposals = function (entry, existingNode, result) {\n        for (var shape in languageFacts.basicShapeFunctions) {\n            var insertText = moveCursorInsideParenthesis(shape);\n            result.items.push({\n                label: shape,\n                documentation: languageFacts.basicShapeFunctions[shape],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Function,\n                insertTextFormat: shape !== insertText ? SnippetFormat : void 0\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForStylesheet = function (result) {\n        var node = this.styleSheet.findFirstChildBeforeOffset(this.offset);\n        if (!node) {\n            return this.getCompletionForTopLevel(result);\n        }\n        if (node instanceof nodes.RuleSet) {\n            return this.getCompletionsForRuleSet(node, result);\n        }\n        if (node instanceof nodes.Supports) {\n            return this.getCompletionsForSupports(node, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionForTopLevel = function (result) {\n        var _this = this;\n        languageFacts.cssDataManager.getAtDirectives().forEach(function (entry) {\n            result.items.push({\n                label: entry.name,\n                textEdit: TextEdit.replace(_this.getCompletionRange(null), entry.name),\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                kind: CompletionItemKind.Keyword\n            });\n        });\n        this.getCompletionsForSelector(null, false, result);\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForRuleSet = function (ruleSet, result) {\n        var declarations = ruleSet.getDeclarations();\n        var isAfter = declarations && declarations.endsWith('}') && this.offset >= declarations.end;\n        if (isAfter) {\n            return this.getCompletionForTopLevel(result);\n        }\n        var isInSelectors = !declarations || this.offset <= declarations.offset;\n        if (isInSelectors) {\n            return this.getCompletionsForSelector(ruleSet, ruleSet.isNested(), result);\n        }\n        return this.getCompletionsForDeclarations(ruleSet.getDeclarations(), result);\n    };\n    CSSCompletion.prototype.getCompletionsForSelector = function (ruleSet, isNested, result) {\n        var _this = this;\n        var existingNode = this.findInNodePath(nodes.NodeType.PseudoSelector, nodes.NodeType.IdentifierSelector, nodes.NodeType.ClassSelector, nodes.NodeType.ElementNameSelector);\n        if (!existingNode && this.offset - this.currentWord.length > 0 && this.textDocument.getText()[this.offset - this.currentWord.length - 1] === ':') {\n            // after the ':' of a pseudo selector, no node generated for just ':'\n            this.currentWord = ':' + this.currentWord;\n            this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n        }\n        var pseudoClasses = languageFacts.cssDataManager.getPseudoClasses();\n        pseudoClasses.forEach(function (entry) {\n            var insertText = moveCursorInsideParenthesis(entry.name);\n            var item = {\n                label: entry.name,\n                textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                kind: CompletionItemKind.Function,\n                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n            };\n            if (strings.startsWith(entry.name, ':-')) {\n                item.sortText = SortTexts.VendorPrefixed;\n            }\n            result.items.push(item);\n        });\n        var pseudoElements = languageFacts.cssDataManager.getPseudoElements();\n        pseudoElements.forEach(function (entry) {\n            var insertText = moveCursorInsideParenthesis(entry.name);\n            var item = {\n                label: entry.name,\n                textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                kind: CompletionItemKind.Function,\n                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n            };\n            if (strings.startsWith(entry.name, '::-')) {\n                item.sortText = SortTexts.VendorPrefixed;\n            }\n            result.items.push(item);\n        });\n        if (!isNested) { // show html tags only for top level\n            for (var _i = 0, _a = languageFacts.html5Tags; _i < _a.length; _i++) {\n                var entry = _a[_i];\n                result.items.push({\n                    label: entry,\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n                    kind: CompletionItemKind.Keyword\n                });\n            }\n            for (var _b = 0, _c = languageFacts.svgElements; _b < _c.length; _b++) {\n                var entry = _c[_b];\n                result.items.push({\n                    label: entry,\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n                    kind: CompletionItemKind.Keyword\n                });\n            }\n        }\n        var visited = {};\n        visited[this.currentWord] = true;\n        var docText = this.textDocument.getText();\n        this.styleSheet.accept(function (n) {\n            if (n.type === nodes.NodeType.SimpleSelector && n.length > 0) {\n                var selector = docText.substr(n.offset, n.length);\n                if (selector.charAt(0) === '.' && !visited[selector]) {\n                    visited[selector] = true;\n                    result.items.push({\n                        label: selector,\n                        textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), selector),\n                        kind: CompletionItemKind.Keyword\n                    });\n                }\n                return false;\n            }\n            return true;\n        });\n        if (ruleSet && ruleSet.isNested()) {\n            var selector = ruleSet.getSelectors().findFirstChildBeforeOffset(this.offset);\n            if (selector && ruleSet.getSelectors().getChildren().indexOf(selector) === 0) {\n                this.getPropertyProposals(null, result);\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForDeclarations = function (declarations, result) {\n        if (!declarations || this.offset === declarations.offset) { // incomplete nodes\n            return result;\n        }\n        var node = declarations.findFirstChildBeforeOffset(this.offset);\n        if (!node) {\n            return this.getCompletionsForDeclarationProperty(null, result);\n        }\n        if (node instanceof nodes.AbstractDeclaration) {\n            var declaration = node;\n            if (!isDefined(declaration.colonPosition) || this.offset <= declaration.colonPosition) {\n                // complete property\n                return this.getCompletionsForDeclarationProperty(declaration, result);\n            }\n            else if ((isDefined(declaration.semicolonPosition) && declaration.semicolonPosition < this.offset)) {\n                if (this.offset === declaration.semicolonPosition + 1) {\n                    return result; // don't show new properties right after semicolon (see Bug 15421:[intellisense] [css] Be less aggressive when manually typing CSS)\n                }\n                // complete next property\n                return this.getCompletionsForDeclarationProperty(null, result);\n            }\n            if (declaration instanceof nodes.Declaration) {\n                // complete value\n                return this.getCompletionsForDeclarationValue(declaration, result);\n            }\n        }\n        else if (node instanceof nodes.ExtendsReference) {\n            this.getCompletionsForExtendsReference(node, null, result);\n        }\n        else if (this.currentWord && this.currentWord[0] === '@') {\n            this.getCompletionsForDeclarationProperty(null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForVariableDeclaration = function (declaration, result) {\n        if (this.offset && isDefined(declaration.colonPosition) && this.offset > declaration.colonPosition) {\n            this.getVariableProposals(declaration.getValue(), result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForExpression = function (expression, result) {\n        var parent = expression.getParent();\n        if (parent instanceof nodes.FunctionArgument) {\n            this.getCompletionsForFunctionArgument(parent, parent.getParent(), result);\n            return result;\n        }\n        var declaration = expression.findParent(nodes.NodeType.Declaration);\n        if (!declaration) {\n            this.getTermProposals(null, null, result);\n            return result;\n        }\n        var node = expression.findChildAtOffset(this.offset, true);\n        if (!node) {\n            return this.getCompletionsForDeclarationValue(declaration, result);\n        }\n        if (node instanceof nodes.NumericValue || node instanceof nodes.Identifier) {\n            return this.getCompletionsForDeclarationValue(declaration, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForFunctionArgument = function (arg, func, result) {\n        var identifier = func.getIdentifier();\n        if (identifier && identifier.matches('var')) {\n            if (!func.getArguments().hasChildren() || func.getArguments().getChild(0) === arg) {\n                this.getVariableProposalsForCSSVarFunction(result);\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForFunctionDeclaration = function (decl, result) {\n        var declarations = decl.getDeclarations();\n        if (declarations && this.offset > declarations.offset && this.offset < declarations.end) {\n            this.getTermProposals(null, null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForMixinReference = function (ref, result) {\n        var allMixins = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Mixin);\n        for (var _i = 0, allMixins_1 = allMixins; _i < allMixins_1.length; _i++) {\n            var mixinSymbol = allMixins_1[_i];\n            if (mixinSymbol.node instanceof nodes.MixinDeclaration) {\n                result.items.push(this.makeTermProposal(mixinSymbol, mixinSymbol.node.getParameters(), null));\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getTermProposals = function (entry, existingNode, result) {\n        var allFunctions = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Function);\n        for (var _i = 0, allFunctions_1 = allFunctions; _i < allFunctions_1.length; _i++) {\n            var functionSymbol = allFunctions_1[_i];\n            if (functionSymbol.node instanceof nodes.FunctionDeclaration) {\n                result.items.push(this.makeTermProposal(functionSymbol, functionSymbol.node.getParameters(), existingNode));\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.makeTermProposal = function (symbol, parameters, existingNode) {\n        var decl = symbol.node;\n        var params = parameters.getChildren().map(function (c) {\n            return (c instanceof nodes.FunctionParameter) ? c.getName() : c.getText();\n        });\n        var insertText = symbol.name + '(' + params.map(function (p, index) { return '${' + (index + 1) + ':' + p + '}'; }).join(', ') + ')';\n        return {\n            label: symbol.name,\n            detail: symbol.name + '(' + params.join(', ') + ')',\n            textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n            insertTextFormat: SnippetFormat,\n            kind: CompletionItemKind.Function,\n            sortText: SortTexts.Term\n        };\n    };\n    CSSCompletion.prototype.getCompletionsForSupportsCondition = function (supportsCondition, result) {\n        var child = supportsCondition.findFirstChildBeforeOffset(this.offset);\n        if (child) {\n            if (child instanceof nodes.Declaration) {\n                if (!isDefined(child.colonPosition) || this.offset <= child.colonPosition) {\n                    return this.getCompletionsForDeclarationProperty(child, result);\n                }\n                else {\n                    return this.getCompletionsForDeclarationValue(child, result);\n                }\n            }\n            else if (child instanceof nodes.SupportsCondition) {\n                return this.getCompletionsForSupportsCondition(child, result);\n            }\n        }\n        if (isDefined(supportsCondition.lParent) && this.offset > supportsCondition.lParent && (!isDefined(supportsCondition.rParent) || this.offset <= supportsCondition.rParent)) {\n            return this.getCompletionsForDeclarationProperty(null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForSupports = function (supports, result) {\n        var declarations = supports.getDeclarations();\n        var inInCondition = !declarations || this.offset <= declarations.offset;\n        if (inInCondition) {\n            var child = supports.findFirstChildBeforeOffset(this.offset);\n            if (child instanceof nodes.SupportsCondition) {\n                return this.getCompletionsForSupportsCondition(child, result);\n            }\n            return result;\n        }\n        return this.getCompletionForTopLevel(result);\n    };\n    CSSCompletion.prototype.getCompletionsForExtendsReference = function (extendsRef, existingNode, result) {\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionForUriLiteralValue = function (uriLiteralNode, result) {\n        var uriValue;\n        var position;\n        var range;\n        // No children, empty value\n        if (!uriLiteralNode.hasChildren()) {\n            uriValue = '';\n            position = this.position;\n            var emptyURIValuePosition = this.textDocument.positionAt(uriLiteralNode.offset + 'url('.length);\n            range = Range.create(emptyURIValuePosition, emptyURIValuePosition);\n        }\n        else {\n            var uriValueNode = uriLiteralNode.getChild(0);\n            uriValue = uriValueNode.getText();\n            position = this.position;\n            range = this.getCompletionRange(uriValueNode);\n        }\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssURILiteralValue) {\n                participant.onCssURILiteralValue({\n                    uriValue: uriValue,\n                    position: position,\n                    range: range\n                });\n            }\n        });\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionForImportPath = function (importPathNode, result) {\n        var _this = this;\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssImportPath) {\n                participant.onCssImportPath({\n                    pathValue: importPathNode.getText(),\n                    position: _this.position,\n                    range: _this.getCompletionRange(importPathNode)\n                });\n            }\n        });\n        return result;\n    };\n    CSSCompletion.prototype.doesSupportMarkdown = function () {\n        if (!isDefined(this.supportsMarkdown)) {\n            if (!isDefined(this.clientCapabilities)) {\n                this.supportsMarkdown = true;\n                return this.supportsMarkdown;\n            }\n            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    return CSSCompletion;\n}());\nexport { CSSCompletion };\nfunction isDeprecated(entry) {\n    if (entry.status && (entry.status === 'nonstandard' || entry.status === 'obsolete')) {\n        return true;\n    }\n    return false;\n}\n/**\n * Rank number should all be same length strings\n */\nfunction computeRankNumber(n) {\n    var nstr = n.toString();\n    switch (nstr.length) {\n        case 4:\n            return nstr;\n        case 3:\n            return '0' + nstr;\n        case 2:\n            return '00' + nstr;\n        case 1:\n            return '000' + nstr;\n        default:\n            return '0000';\n    }\n}\nvar Set = /** @class */ (function () {\n    function Set() {\n        this.entries = {};\n    }\n    Set.prototype.add = function (entry) {\n        this.entries[entry] = true;\n    };\n    Set.prototype.getEntries = function () {\n        return Object.keys(this.entries);\n    };\n    return Set;\n}());\nfunction moveCursorInsideParenthesis(text) {\n    return text.replace(/\\(\\)$/, \"($1)\");\n}\nfunction collectValues(styleSheet, declaration) {\n    var fullPropertyName = declaration.getFullPropertyName();\n    var entries = new Set();\n    function visitValue(node) {\n        if (node instanceof nodes.Identifier || node instanceof nodes.NumericValue || node instanceof nodes.HexColorValue) {\n            entries.add(node.getText());\n        }\n        return true;\n    }\n    function matchesProperty(decl) {\n        var propertyName = decl.getFullPropertyName();\n        return fullPropertyName === propertyName;\n    }\n    function vistNode(node) {\n        if (node instanceof nodes.Declaration && node !== declaration) {\n            if (matchesProperty(node)) {\n                var value = node.getValue();\n                if (value) {\n                    value.accept(visitValue);\n                }\n            }\n        }\n        return true;\n    }\n    styleSheet.accept(vistNode);\n    return entries;\n}\nvar ColorValueCollector = /** @class */ (function () {\n    function ColorValueCollector(entries, currentOffset) {\n        this.entries = entries;\n        this.currentOffset = currentOffset;\n        // nothing to do\n    }\n    ColorValueCollector.prototype.visitNode = function (node) {\n        if (node instanceof nodes.HexColorValue || (node instanceof nodes.Function && languageFacts.isColorConstructor(node))) {\n            if (this.currentOffset < node.offset || node.end < this.currentOffset) {\n                this.entries.add(node.getText());\n            }\n        }\n        return true;\n    };\n    return ColorValueCollector;\n}());\nfunction getCurrentWord(document, offset) {\n    var i = offset - 1;\n    var text = document.getText();\n    while (i >= 0 && ' \\t\\n\\r\":{[()]},*>+'.indexOf(text.charAt(i)) === -1) {\n        i--;\n    }\n    return text.substring(i + 1, offset);\n}\nfunction isColorString(s) {\n    // From https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444\n    return (s.toLowerCase() in languageFacts.colors) || /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(s);\n}\n"]},"metadata":{},"sourceType":"module"}