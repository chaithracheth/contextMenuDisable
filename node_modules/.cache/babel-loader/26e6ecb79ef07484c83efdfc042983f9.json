{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: 'REM'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|REM\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|REM\\\\s+)#endregion\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  ignoreCase: true,\n  tokenPostfix: '.bat',\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  keywords: /call|defined|echo|errorlevel|exist|for|goto|if|pause|set|shift|start|title|not|pushd|popd/,\n  // we include these common regular expressions\n  symbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/^(\\s*)(rem(?:\\s.*|))$/, ['', 'comment']], [/(\\@?)(@keywords)(?!\\w)/, [{\n      token: 'keyword'\n    }, {\n      token: 'keyword.$2'\n    }]], // whitespace\n    [/[ \\t\\r\\n]+/, ''], // blocks\n    [/setlocal(?!\\w)/, 'keyword.tag-setlocal'], [/endlocal(?!\\w)/, 'keyword.tag-setlocal'], // words\n    [/[a-zA-Z_]\\w*/, ''], // labels\n    [/:\\w*/, 'metatag'], // variables\n    [/%[^%]+%/, 'variable'], [/%%[\\w]+(?!\\w)/, 'variable'], // punctuations\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, 'delimiter'], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'], [/\\d+/, 'number'], // punctuation: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings:\n    [/\"/, 'string', '@string.\"'], [/'/, 'string', '@string.\\'']],\n    string: [[/[^\\\\\"'%]+/, {\n      cases: {\n        '@eos': {\n          token: 'string',\n          next: '@popall'\n        },\n        '@default': 'string'\n      }\n    }], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/%[\\w ]+%/, 'variable'], [/%%[\\w]+(?!\\w)/, 'variable'], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/$/, 'string', '@popall']]\n  }\n};","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/basic-languages/bat/bat.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","token","keywords","symbols","escapes","tokenizer","root","string","cases","next"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: 'REM'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*(::\\\\s*|REM\\\\s+)#region\"),\r\n            end: new RegExp(\"^\\\\s*(::\\\\s*|REM\\\\s+)#endregion\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    ignoreCase: true,\r\n    tokenPostfix: '.bat',\r\n    brackets: [\r\n        { token: 'delimiter.bracket', open: '{', close: '}' },\r\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\r\n        { token: 'delimiter.square', open: '[', close: ']' }\r\n    ],\r\n    keywords: /call|defined|echo|errorlevel|exist|for|goto|if|pause|set|shift|start|title|not|pushd|popd/,\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/^(\\s*)(rem(?:\\s.*|))$/, ['', 'comment']],\r\n            [/(\\@?)(@keywords)(?!\\w)/, [{ token: 'keyword' }, { token: 'keyword.$2' }]],\r\n            // whitespace\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            // blocks\r\n            [/setlocal(?!\\w)/, 'keyword.tag-setlocal'],\r\n            [/endlocal(?!\\w)/, 'keyword.tag-setlocal'],\r\n            // words\r\n            [/[a-zA-Z_]\\w*/, ''],\r\n            // labels\r\n            [/:\\w*/, 'metatag'],\r\n            // variables\r\n            [/%[^%]+%/, 'variable'],\r\n            [/%%[\\w]+(?!\\w)/, 'variable'],\r\n            // punctuations\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // punctuation: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings:\r\n            [/\"/, 'string', '@string.\"'],\r\n            [/'/, 'string', '@string.\\''],\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"'%]+/, {\r\n                    cases: {\r\n                        '@eos': { token: 'string', next: '@popall' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/%[\\w ]+%/, 'variable'],\r\n            [/%%[\\w]+(?!\\w)/, 'variable'],\r\n            [/[\"']/, {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/$/, 'string', '@popall']\r\n        ],\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}