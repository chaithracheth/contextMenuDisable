{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as languageFacts from '../languageFacts/facts.js';\nimport { Rules, Settings } from './lintRules.js';\nimport * as nodes from '../parser/cssNodes.js';\nimport calculateBoxModel, { Element } from './lintUtil.js';\nimport { union } from '../utils/arrays.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\n\nvar NodesByRootMap =\n/** @class */\nfunction () {\n  function NodesByRootMap() {\n    this.data = {};\n  }\n\n  NodesByRootMap.prototype.add = function (root, name, node) {\n    var entry = this.data[root];\n\n    if (!entry) {\n      entry = {\n        nodes: [],\n        names: []\n      };\n      this.data[root] = entry;\n    }\n\n    entry.names.push(name);\n\n    if (node) {\n      entry.nodes.push(node);\n    }\n  };\n\n  return NodesByRootMap;\n}();\n\nvar LintVisitor =\n/** @class */\nfunction () {\n  function LintVisitor(document, settings) {\n    var _this = this;\n\n    this.warnings = [];\n    this.settings = settings;\n    this.documentText = document.getText();\n    this.keyframes = new NodesByRootMap();\n    this.validProperties = {};\n    var properties = settings.getSetting(Settings.ValidProperties);\n\n    if (Array.isArray(properties)) {\n      properties.forEach(function (p) {\n        if (typeof p === 'string') {\n          var name = p.trim().toLowerCase();\n\n          if (name.length) {\n            _this.validProperties[name] = true;\n          }\n        }\n      });\n    }\n  }\n\n  LintVisitor.entries = function (node, document, settings, entryFilter) {\n    var visitor = new LintVisitor(document, settings);\n    node.acceptVisitor(visitor);\n    visitor.completeValidations();\n    return visitor.getEntries(entryFilter);\n  };\n\n  LintVisitor.prototype.isValidPropertyDeclaration = function (element) {\n    var propertyName = element.fullPropertyName;\n    return this.validProperties[propertyName];\n  };\n\n  LintVisitor.prototype.fetch = function (input, s) {\n    var elements = [];\n\n    for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {\n      var curr = input_1[_i];\n\n      if (curr.fullPropertyName === s) {\n        elements.push(curr);\n      }\n    }\n\n    return elements;\n  };\n\n  LintVisitor.prototype.fetchWithValue = function (input, s, v) {\n    var elements = [];\n\n    for (var _i = 0, input_2 = input; _i < input_2.length; _i++) {\n      var inputElement = input_2[_i];\n\n      if (inputElement.fullPropertyName === s) {\n        var expression = inputElement.node.getValue();\n\n        if (expression && this.findValueInExpression(expression, v)) {\n          elements.push(inputElement);\n        }\n      }\n    }\n\n    return elements;\n  };\n\n  LintVisitor.prototype.findValueInExpression = function (expression, v) {\n    var found = false;\n    expression.accept(function (node) {\n      if (node.type === nodes.NodeType.Identifier && node.matches(v)) {\n        found = true;\n      }\n\n      return !found;\n    });\n    return found;\n  };\n\n  LintVisitor.prototype.getEntries = function (filter) {\n    if (filter === void 0) {\n      filter = nodes.Level.Warning | nodes.Level.Error;\n    }\n\n    return this.warnings.filter(function (entry) {\n      return (entry.getLevel() & filter) !== 0;\n    });\n  };\n\n  LintVisitor.prototype.addEntry = function (node, rule, details) {\n    var entry = new nodes.Marker(node, rule, this.settings.getRule(rule), details);\n    this.warnings.push(entry);\n  };\n\n  LintVisitor.prototype.getMissingNames = function (expected, actual) {\n    var expectedClone = expected.slice(0); // clone\n\n    for (var i = 0; i < actual.length; i++) {\n      var k = expectedClone.indexOf(actual[i]);\n\n      if (k !== -1) {\n        expectedClone[k] = null;\n      }\n    }\n\n    var result = null;\n\n    for (var i = 0; i < expectedClone.length; i++) {\n      var curr = expectedClone[i];\n\n      if (curr) {\n        if (result === null) {\n          result = localize('namelist.single', \"'{0}'\", curr);\n        } else {\n          result = localize('namelist.concatenated', \"{0}, '{1}'\", result, curr);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  LintVisitor.prototype.visitNode = function (node) {\n    switch (node.type) {\n      case nodes.NodeType.UnknownAtRule:\n        return this.visitUnknownAtRule(node);\n\n      case nodes.NodeType.Keyframe:\n        return this.visitKeyframe(node);\n\n      case nodes.NodeType.FontFace:\n        return this.visitFontFace(node);\n\n      case nodes.NodeType.Ruleset:\n        return this.visitRuleSet(node);\n\n      case nodes.NodeType.SimpleSelector:\n        return this.visitSimpleSelector(node);\n\n      case nodes.NodeType.Function:\n        return this.visitFunction(node);\n\n      case nodes.NodeType.NumericValue:\n        return this.visitNumericValue(node);\n\n      case nodes.NodeType.Import:\n        return this.visitImport(node);\n\n      case nodes.NodeType.HexColorValue:\n        return this.visitHexColorValue(node);\n\n      case nodes.NodeType.Prio:\n        return this.visitPrio(node);\n    }\n\n    return true;\n  };\n\n  LintVisitor.prototype.completeValidations = function () {\n    this.validateKeyframes();\n  };\n\n  LintVisitor.prototype.visitUnknownAtRule = function (node) {\n    var atRuleName = node.getChild(0);\n\n    if (!atRuleName) {\n      return false;\n    }\n\n    var atDirective = languageFacts.cssDataManager.getAtDirective(atRuleName.getText());\n\n    if (atDirective) {\n      return false;\n    }\n\n    this.addEntry(atRuleName, Rules.UnknownAtRules, \"Unknown at rule \" + atRuleName.getText());\n    return true;\n  };\n\n  LintVisitor.prototype.visitKeyframe = function (node) {\n    var keyword = node.getKeyword();\n\n    if (!keyword) {\n      return false;\n    }\n\n    var text = keyword.getText();\n    this.keyframes.add(node.getName(), text, text !== '@keyframes' ? keyword : null);\n    return true;\n  };\n\n  LintVisitor.prototype.validateKeyframes = function () {\n    // @keyframe and it's vendor specific alternatives\n    // @keyframe should be included\n    var expected = ['@-webkit-keyframes', '@-moz-keyframes', '@-o-keyframes'];\n\n    for (var name in this.keyframes.data) {\n      var actual = this.keyframes.data[name].names;\n      var needsStandard = actual.indexOf('@keyframes') === -1;\n\n      if (!needsStandard && actual.length === 1) {\n        continue; // only the non-vendor specific keyword is used, that's fine, no warning\n      }\n\n      var missingVendorSpecific = this.getMissingNames(expected, actual);\n\n      if (missingVendorSpecific || needsStandard) {\n        for (var _i = 0, _a = this.keyframes.data[name].nodes; _i < _a.length; _i++) {\n          var node = _a[_i];\n\n          if (needsStandard) {\n            var message = localize('keyframes.standardrule.missing', \"Always define standard rule '@keyframes' when defining keyframes.\");\n            this.addEntry(node, Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);\n          }\n\n          if (missingVendorSpecific) {\n            var message = localize('keyframes.vendorspecific.missing', \"Always include all vendor specific rules: Missing: {0}\", missingVendorSpecific);\n            this.addEntry(node, Rules.AllVendorPrefixes, message);\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  LintVisitor.prototype.visitSimpleSelector = function (node) {\n    var firstChar = this.documentText.charAt(node.offset); /////////////////////////////////////////////////////////////\n    //\tLint - The universal selector (*) is known to be slow.\n    /////////////////////////////////////////////////////////////\n\n    if (node.length === 1 && firstChar === '*') {\n      this.addEntry(node, Rules.UniversalSelector);\n    } /////////////////////////////////////////////////////////////\n    //\tLint - Avoid id selectors\n    /////////////////////////////////////////////////////////////\n\n\n    if (firstChar === '#') {\n      this.addEntry(node, Rules.AvoidIdSelector);\n    }\n\n    return true;\n  };\n\n  LintVisitor.prototype.visitImport = function (node) {\n    /////////////////////////////////////////////////////////////\n    //\tLint - Import statements shouldn't be used, because they aren't offering parallel downloads.\n    /////////////////////////////////////////////////////////////\n    this.addEntry(node, Rules.ImportStatemement);\n    return true;\n  };\n\n  LintVisitor.prototype.visitRuleSet = function (node) {\n    /////////////////////////////////////////////////////////////\n    //\tLint - Don't use empty rulesets.\n    /////////////////////////////////////////////////////////////\n    var declarations = node.getDeclarations();\n\n    if (!declarations) {\n      // syntax error\n      return false;\n    }\n\n    if (!declarations.hasChildren()) {\n      this.addEntry(node.getSelectors(), Rules.EmptyRuleSet);\n    }\n\n    var propertyTable = [];\n\n    for (var _i = 0, _a = declarations.getChildren(); _i < _a.length; _i++) {\n      var element = _a[_i];\n\n      if (element instanceof nodes.Declaration) {\n        propertyTable.push(new Element(element));\n      }\n    } /////////////////////////////////////////////////////////////\n    // the rule warns when it finds:\n    // width being used with border, border-left, border-right, padding, padding-left, or padding-right\n    // height being used with border, border-top, border-bottom, padding, padding-top, or padding-bottom\n    // No error when box-sizing property is specified, as it assumes the user knows what he's doing.\n    // see https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size\n    /////////////////////////////////////////////////////////////\n\n\n    var boxModel = calculateBoxModel(propertyTable);\n\n    if (boxModel.width) {\n      var properties = [];\n\n      if (boxModel.right.value) {\n        properties = union(properties, boxModel.right.properties);\n      }\n\n      if (boxModel.left.value) {\n        properties = union(properties, boxModel.left.properties);\n      }\n\n      if (properties.length !== 0) {\n        for (var _b = 0, properties_1 = properties; _b < properties_1.length; _b++) {\n          var item = properties_1[_b];\n          this.addEntry(item.node, Rules.BewareOfBoxModelSize);\n        }\n\n        this.addEntry(boxModel.width.node, Rules.BewareOfBoxModelSize);\n      }\n    }\n\n    if (boxModel.height) {\n      var properties = [];\n\n      if (boxModel.top.value) {\n        properties = union(properties, boxModel.top.properties);\n      }\n\n      if (boxModel.bottom.value) {\n        properties = union(properties, boxModel.bottom.properties);\n      }\n\n      if (properties.length !== 0) {\n        for (var _c = 0, properties_2 = properties; _c < properties_2.length; _c++) {\n          var item = properties_2[_c];\n          this.addEntry(item.node, Rules.BewareOfBoxModelSize);\n        }\n\n        this.addEntry(boxModel.height.node, Rules.BewareOfBoxModelSize);\n      }\n    } /////////////////////////////////////////////////////////////\n    //\tProperties ignored due to display\n    /////////////////////////////////////////////////////////////\n    // With 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect\n\n\n    var displayElems = this.fetchWithValue(propertyTable, 'display', 'inline');\n\n    if (displayElems.length > 0) {\n      for (var _d = 0, _e = ['width', 'height', 'margin-top', 'margin-bottom', 'float']; _d < _e.length; _d++) {\n        var prop = _e[_d];\n        var elem = this.fetch(propertyTable, prop);\n\n        for (var index = 0; index < elem.length; index++) {\n          var node_1 = elem[index].node;\n          var value = node_1.getValue();\n\n          if (prop === 'float' && (!value || value.matches('none'))) {\n            continue;\n          }\n\n          this.addEntry(node_1, Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayInline', \"Property is ignored due to the display. With 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect.\"));\n        }\n      }\n    } // With 'display: inline-block', 'float' has no effect\n\n\n    displayElems = this.fetchWithValue(propertyTable, 'display', 'inline-block');\n\n    if (displayElems.length > 0) {\n      var elem = this.fetch(propertyTable, 'float');\n\n      for (var index = 0; index < elem.length; index++) {\n        var node_2 = elem[index].node;\n        var value = node_2.getValue();\n\n        if (value && !value.matches('none')) {\n          this.addEntry(node_2, Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayInlineBlock', \"inline-block is ignored due to the float. If 'float' has a value other than 'none', the box is floated and 'display' is treated as 'block'\"));\n        }\n      }\n    } // With 'display: block', 'vertical-align' has no effect\n\n\n    displayElems = this.fetchWithValue(propertyTable, 'display', 'block');\n\n    if (displayElems.length > 0) {\n      var elem = this.fetch(propertyTable, 'vertical-align');\n\n      for (var index = 0; index < elem.length; index++) {\n        this.addEntry(elem[index].node, Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayBlock', \"Property is ignored due to the display. With 'display: block', vertical-align should not be used.\"));\n      }\n    } /////////////////////////////////////////////////////////////\n    //\tAvoid 'float'\n    /////////////////////////////////////////////////////////////\n\n\n    var elements = this.fetch(propertyTable, 'float');\n\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n\n      if (!this.isValidPropertyDeclaration(element)) {\n        this.addEntry(element.node, Rules.AvoidFloat);\n      }\n    } /////////////////////////////////////////////////////////////\n    //\tDon't use duplicate declarations.\n    /////////////////////////////////////////////////////////////\n\n\n    for (var i = 0; i < propertyTable.length; i++) {\n      var element = propertyTable[i];\n\n      if (element.fullPropertyName !== 'background' && !this.validProperties[element.fullPropertyName]) {\n        var value = element.node.getValue();\n\n        if (value && this.documentText.charAt(value.offset) !== '-') {\n          var elements_1 = this.fetch(propertyTable, element.fullPropertyName);\n\n          if (elements_1.length > 1) {\n            for (var k = 0; k < elements_1.length; k++) {\n              var value_1 = elements_1[k].node.getValue();\n\n              if (value_1 && this.documentText.charAt(value_1.offset) !== '-' && elements_1[k] !== element) {\n                this.addEntry(element.node, Rules.DuplicateDeclarations);\n              }\n            }\n          }\n        }\n      }\n    } /////////////////////////////////////////////////////////////\n    //\tUnknown propery & When using a vendor-prefixed gradient, make sure to use them all.\n    /////////////////////////////////////////////////////////////\n\n\n    var isExportBlock = node.getSelectors().matches(\":export\");\n\n    if (!isExportBlock) {\n      var propertiesBySuffix = new NodesByRootMap();\n      var containsUnknowns = false;\n\n      for (var _f = 0, propertyTable_1 = propertyTable; _f < propertyTable_1.length; _f++) {\n        var element = propertyTable_1[_f];\n        var decl = element.node;\n\n        if (this.isCSSDeclaration(decl)) {\n          var name = element.fullPropertyName;\n          var firstChar = name.charAt(0);\n\n          if (firstChar === '-') {\n            if (name.charAt(1) !== '-') {\n              // avoid css variables\n              if (!languageFacts.cssDataManager.isKnownProperty(name) && !this.validProperties[name]) {\n                this.addEntry(decl.getProperty(), Rules.UnknownVendorSpecificProperty);\n              }\n\n              var nonPrefixedName = decl.getNonPrefixedPropertyName();\n              propertiesBySuffix.add(nonPrefixedName, name, decl.getProperty());\n            }\n          } else {\n            var fullName = name;\n\n            if (firstChar === '*' || firstChar === '_') {\n              this.addEntry(decl.getProperty(), Rules.IEStarHack);\n              name = name.substr(1);\n            } // _property and *property might be contributed via custom data\n\n\n            if (!languageFacts.cssDataManager.isKnownProperty(fullName) && !languageFacts.cssDataManager.isKnownProperty(name)) {\n              if (!this.validProperties[name]) {\n                this.addEntry(decl.getProperty(), Rules.UnknownProperty, localize('property.unknownproperty.detailed', \"Unknown property: '{0}'\", name));\n              }\n            }\n\n            propertiesBySuffix.add(name, name, null); // don't pass the node as we don't show errors on the standard\n          }\n        } else {\n          containsUnknowns = true;\n        }\n      }\n\n      if (!containsUnknowns) {\n        // don't perform this test if there are\n        for (var suffix in propertiesBySuffix.data) {\n          var entry = propertiesBySuffix.data[suffix];\n          var actual = entry.names;\n          var needsStandard = languageFacts.cssDataManager.isStandardProperty(suffix) && actual.indexOf(suffix) === -1;\n\n          if (!needsStandard && actual.length === 1) {\n            continue; // only the non-vendor specific rule is used, that's fine, no warning\n          }\n\n          var expected = [];\n\n          for (var i = 0, len = LintVisitor.prefixes.length; i < len; i++) {\n            var prefix = LintVisitor.prefixes[i];\n\n            if (languageFacts.cssDataManager.isStandardProperty(prefix + suffix)) {\n              expected.push(prefix + suffix);\n            }\n          }\n\n          var missingVendorSpecific = this.getMissingNames(expected, actual);\n\n          if (missingVendorSpecific || needsStandard) {\n            for (var _g = 0, _h = entry.nodes; _g < _h.length; _g++) {\n              var node_3 = _h[_g];\n\n              if (needsStandard) {\n                var message = localize('property.standard.missing', \"Also define the standard property '{0}' for compatibility\", suffix);\n                this.addEntry(node_3, Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);\n              }\n\n              if (missingVendorSpecific) {\n                var message = localize('property.vendorspecific.missing', \"Always include all vendor specific properties: Missing: {0}\", missingVendorSpecific);\n                this.addEntry(node_3, Rules.AllVendorPrefixes, message);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  LintVisitor.prototype.visitPrio = function (node) {\n    /////////////////////////////////////////////////////////////\n    //\tDon't use !important\n    /////////////////////////////////////////////////////////////\n    this.addEntry(node, Rules.AvoidImportant);\n    return true;\n  };\n\n  LintVisitor.prototype.visitNumericValue = function (node) {\n    /////////////////////////////////////////////////////////////\n    //\t0 has no following unit\n    /////////////////////////////////////////////////////////////\n    var funcDecl = node.findParent(nodes.NodeType.Function);\n\n    if (funcDecl && funcDecl.getName() === 'calc') {\n      return true;\n    }\n\n    var decl = node.findParent(nodes.NodeType.Declaration);\n\n    if (decl) {\n      var declValue = decl.getValue();\n\n      if (declValue) {\n        var value = node.getValue();\n\n        if (!value.unit || languageFacts.units.length.indexOf(value.unit.toLowerCase()) === -1) {\n          return true;\n        }\n\n        if (parseFloat(value.value) === 0.0 && !!value.unit && !this.validProperties[decl.getFullPropertyName()]) {\n          this.addEntry(node, Rules.ZeroWithUnit);\n        }\n      }\n    }\n\n    return true;\n  };\n\n  LintVisitor.prototype.visitFontFace = function (node) {\n    var declarations = node.getDeclarations();\n\n    if (!declarations) {\n      // syntax error\n      return false;\n    }\n\n    var definesSrc = false,\n        definesFontFamily = false;\n    var containsUnknowns = false;\n\n    for (var _i = 0, _a = declarations.getChildren(); _i < _a.length; _i++) {\n      var node_4 = _a[_i];\n\n      if (this.isCSSDeclaration(node_4)) {\n        var name = node_4.getProperty().getName().toLowerCase();\n\n        if (name === 'src') {\n          definesSrc = true;\n        }\n\n        if (name === 'font-family') {\n          definesFontFamily = true;\n        }\n      } else {\n        containsUnknowns = true;\n      }\n    }\n\n    if (!containsUnknowns && (!definesSrc || !definesFontFamily)) {\n      this.addEntry(node, Rules.RequiredPropertiesForFontFace);\n    }\n\n    return true;\n  };\n\n  LintVisitor.prototype.isCSSDeclaration = function (node) {\n    if (node instanceof nodes.Declaration) {\n      if (!node.getValue()) {\n        return false;\n      }\n\n      var property = node.getProperty();\n\n      if (!property) {\n        return false;\n      }\n\n      var identifier = property.getIdentifier();\n\n      if (!identifier || identifier.containsInterpolation()) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  LintVisitor.prototype.visitHexColorValue = function (node) {\n    // Rule: #eeff0011 or #eeff00 or #ef01 or #ef0\n    var length = node.length;\n\n    if (length !== 9 && length !== 7 && length !== 5 && length !== 4) {\n      this.addEntry(node, Rules.HexColorLength);\n    }\n\n    return false;\n  };\n\n  LintVisitor.prototype.visitFunction = function (node) {\n    var fnName = node.getName().toLowerCase();\n    var expectedAttrCount = -1;\n    var actualAttrCount = 0;\n\n    switch (fnName) {\n      case 'rgb(':\n      case 'hsl(':\n        expectedAttrCount = 3;\n        break;\n\n      case 'rgba(':\n      case 'hsla(':\n        expectedAttrCount = 4;\n        break;\n    }\n\n    if (expectedAttrCount !== -1) {\n      node.getArguments().accept(function (n) {\n        if (n instanceof nodes.BinaryExpression) {\n          actualAttrCount += 1;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (actualAttrCount !== expectedAttrCount) {\n        this.addEntry(node, Rules.ArgsInColorFunction);\n      }\n    }\n\n    return true;\n  };\n\n  LintVisitor.prefixes = ['-ms-', '-moz-', '-o-', '-webkit-'];\n  return LintVisitor;\n}();\n\nexport { LintVisitor };","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lint.js"],"names":["languageFacts","Rules","Settings","nodes","calculateBoxModel","Element","union","nls","localize","loadMessageBundle","NodesByRootMap","data","prototype","add","root","name","node","entry","names","push","LintVisitor","document","settings","_this","warnings","documentText","getText","keyframes","validProperties","properties","getSetting","ValidProperties","Array","isArray","forEach","p","trim","toLowerCase","length","entries","entryFilter","visitor","acceptVisitor","completeValidations","getEntries","isValidPropertyDeclaration","element","propertyName","fullPropertyName","fetch","input","s","elements","_i","input_1","curr","fetchWithValue","v","input_2","inputElement","expression","getValue","findValueInExpression","found","accept","type","NodeType","Identifier","matches","filter","Level","Warning","Error","getLevel","addEntry","rule","details","Marker","getRule","getMissingNames","expected","actual","expectedClone","slice","i","k","indexOf","result","visitNode","UnknownAtRule","visitUnknownAtRule","Keyframe","visitKeyframe","FontFace","visitFontFace","Ruleset","visitRuleSet","SimpleSelector","visitSimpleSelector","Function","visitFunction","NumericValue","visitNumericValue","Import","visitImport","HexColorValue","visitHexColorValue","Prio","visitPrio","validateKeyframes","atRuleName","getChild","atDirective","cssDataManager","getAtDirective","UnknownAtRules","keyword","getKeyword","text","getName","needsStandard","missingVendorSpecific","_a","message","IncludeStandardPropertyWhenUsingVendorPrefix","AllVendorPrefixes","firstChar","charAt","offset","UniversalSelector","AvoidIdSelector","ImportStatemement","declarations","getDeclarations","hasChildren","getSelectors","EmptyRuleSet","propertyTable","getChildren","Declaration","boxModel","width","right","value","left","_b","properties_1","item","BewareOfBoxModelSize","height","top","bottom","_c","properties_2","displayElems","_d","_e","prop","elem","index","node_1","PropertyIgnoredDueToDisplay","node_2","AvoidFloat","elements_1","value_1","DuplicateDeclarations","isExportBlock","propertiesBySuffix","containsUnknowns","_f","propertyTable_1","decl","isCSSDeclaration","isKnownProperty","getProperty","UnknownVendorSpecificProperty","nonPrefixedName","getNonPrefixedPropertyName","fullName","IEStarHack","substr","UnknownProperty","suffix","isStandardProperty","len","prefixes","prefix","_g","_h","node_3","AvoidImportant","funcDecl","findParent","declValue","unit","units","parseFloat","getFullPropertyName","ZeroWithUnit","definesSrc","definesFontFamily","node_4","RequiredPropertiesForFontFace","property","identifier","getIdentifier","containsInterpolation","HexColorLength","fnName","expectedAttrCount","actualAttrCount","getArguments","n","BinaryExpression","ArgsInColorFunction"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport { Rules, Settings } from './lintRules.js';\nimport * as nodes from '../parser/cssNodes.js';\nimport calculateBoxModel, { Element } from './lintUtil.js';\nimport { union } from '../utils/arrays.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar NodesByRootMap = /** @class */ (function () {\n    function NodesByRootMap() {\n        this.data = {};\n    }\n    NodesByRootMap.prototype.add = function (root, name, node) {\n        var entry = this.data[root];\n        if (!entry) {\n            entry = { nodes: [], names: [] };\n            this.data[root] = entry;\n        }\n        entry.names.push(name);\n        if (node) {\n            entry.nodes.push(node);\n        }\n    };\n    return NodesByRootMap;\n}());\nvar LintVisitor = /** @class */ (function () {\n    function LintVisitor(document, settings) {\n        var _this = this;\n        this.warnings = [];\n        this.settings = settings;\n        this.documentText = document.getText();\n        this.keyframes = new NodesByRootMap();\n        this.validProperties = {};\n        var properties = settings.getSetting(Settings.ValidProperties);\n        if (Array.isArray(properties)) {\n            properties.forEach(function (p) {\n                if (typeof p === 'string') {\n                    var name = p.trim().toLowerCase();\n                    if (name.length) {\n                        _this.validProperties[name] = true;\n                    }\n                }\n            });\n        }\n    }\n    LintVisitor.entries = function (node, document, settings, entryFilter) {\n        var visitor = new LintVisitor(document, settings);\n        node.acceptVisitor(visitor);\n        visitor.completeValidations();\n        return visitor.getEntries(entryFilter);\n    };\n    LintVisitor.prototype.isValidPropertyDeclaration = function (element) {\n        var propertyName = element.fullPropertyName;\n        return this.validProperties[propertyName];\n    };\n    LintVisitor.prototype.fetch = function (input, s) {\n        var elements = [];\n        for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {\n            var curr = input_1[_i];\n            if (curr.fullPropertyName === s) {\n                elements.push(curr);\n            }\n        }\n        return elements;\n    };\n    LintVisitor.prototype.fetchWithValue = function (input, s, v) {\n        var elements = [];\n        for (var _i = 0, input_2 = input; _i < input_2.length; _i++) {\n            var inputElement = input_2[_i];\n            if (inputElement.fullPropertyName === s) {\n                var expression = inputElement.node.getValue();\n                if (expression && this.findValueInExpression(expression, v)) {\n                    elements.push(inputElement);\n                }\n            }\n        }\n        return elements;\n    };\n    LintVisitor.prototype.findValueInExpression = function (expression, v) {\n        var found = false;\n        expression.accept(function (node) {\n            if (node.type === nodes.NodeType.Identifier && node.matches(v)) {\n                found = true;\n            }\n            return !found;\n        });\n        return found;\n    };\n    LintVisitor.prototype.getEntries = function (filter) {\n        if (filter === void 0) { filter = (nodes.Level.Warning | nodes.Level.Error); }\n        return this.warnings.filter(function (entry) {\n            return (entry.getLevel() & filter) !== 0;\n        });\n    };\n    LintVisitor.prototype.addEntry = function (node, rule, details) {\n        var entry = new nodes.Marker(node, rule, this.settings.getRule(rule), details);\n        this.warnings.push(entry);\n    };\n    LintVisitor.prototype.getMissingNames = function (expected, actual) {\n        var expectedClone = expected.slice(0); // clone\n        for (var i = 0; i < actual.length; i++) {\n            var k = expectedClone.indexOf(actual[i]);\n            if (k !== -1) {\n                expectedClone[k] = null;\n            }\n        }\n        var result = null;\n        for (var i = 0; i < expectedClone.length; i++) {\n            var curr = expectedClone[i];\n            if (curr) {\n                if (result === null) {\n                    result = localize('namelist.single', \"'{0}'\", curr);\n                }\n                else {\n                    result = localize('namelist.concatenated', \"{0}, '{1}'\", result, curr);\n                }\n            }\n        }\n        return result;\n    };\n    LintVisitor.prototype.visitNode = function (node) {\n        switch (node.type) {\n            case nodes.NodeType.UnknownAtRule:\n                return this.visitUnknownAtRule(node);\n            case nodes.NodeType.Keyframe:\n                return this.visitKeyframe(node);\n            case nodes.NodeType.FontFace:\n                return this.visitFontFace(node);\n            case nodes.NodeType.Ruleset:\n                return this.visitRuleSet(node);\n            case nodes.NodeType.SimpleSelector:\n                return this.visitSimpleSelector(node);\n            case nodes.NodeType.Function:\n                return this.visitFunction(node);\n            case nodes.NodeType.NumericValue:\n                return this.visitNumericValue(node);\n            case nodes.NodeType.Import:\n                return this.visitImport(node);\n            case nodes.NodeType.HexColorValue:\n                return this.visitHexColorValue(node);\n            case nodes.NodeType.Prio:\n                return this.visitPrio(node);\n        }\n        return true;\n    };\n    LintVisitor.prototype.completeValidations = function () {\n        this.validateKeyframes();\n    };\n    LintVisitor.prototype.visitUnknownAtRule = function (node) {\n        var atRuleName = node.getChild(0);\n        if (!atRuleName) {\n            return false;\n        }\n        var atDirective = languageFacts.cssDataManager.getAtDirective(atRuleName.getText());\n        if (atDirective) {\n            return false;\n        }\n        this.addEntry(atRuleName, Rules.UnknownAtRules, \"Unknown at rule \" + atRuleName.getText());\n        return true;\n    };\n    LintVisitor.prototype.visitKeyframe = function (node) {\n        var keyword = node.getKeyword();\n        if (!keyword) {\n            return false;\n        }\n        var text = keyword.getText();\n        this.keyframes.add(node.getName(), text, (text !== '@keyframes') ? keyword : null);\n        return true;\n    };\n    LintVisitor.prototype.validateKeyframes = function () {\n        // @keyframe and it's vendor specific alternatives\n        // @keyframe should be included\n        var expected = ['@-webkit-keyframes', '@-moz-keyframes', '@-o-keyframes'];\n        for (var name in this.keyframes.data) {\n            var actual = this.keyframes.data[name].names;\n            var needsStandard = (actual.indexOf('@keyframes') === -1);\n            if (!needsStandard && actual.length === 1) {\n                continue; // only the non-vendor specific keyword is used, that's fine, no warning\n            }\n            var missingVendorSpecific = this.getMissingNames(expected, actual);\n            if (missingVendorSpecific || needsStandard) {\n                for (var _i = 0, _a = this.keyframes.data[name].nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    if (needsStandard) {\n                        var message = localize('keyframes.standardrule.missing', \"Always define standard rule '@keyframes' when defining keyframes.\");\n                        this.addEntry(node, Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);\n                    }\n                    if (missingVendorSpecific) {\n                        var message = localize('keyframes.vendorspecific.missing', \"Always include all vendor specific rules: Missing: {0}\", missingVendorSpecific);\n                        this.addEntry(node, Rules.AllVendorPrefixes, message);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    LintVisitor.prototype.visitSimpleSelector = function (node) {\n        var firstChar = this.documentText.charAt(node.offset);\n        /////////////////////////////////////////////////////////////\n        //\tLint - The universal selector (*) is known to be slow.\n        /////////////////////////////////////////////////////////////\n        if (node.length === 1 && firstChar === '*') {\n            this.addEntry(node, Rules.UniversalSelector);\n        }\n        /////////////////////////////////////////////////////////////\n        //\tLint - Avoid id selectors\n        /////////////////////////////////////////////////////////////\n        if (firstChar === '#') {\n            this.addEntry(node, Rules.AvoidIdSelector);\n        }\n        return true;\n    };\n    LintVisitor.prototype.visitImport = function (node) {\n        /////////////////////////////////////////////////////////////\n        //\tLint - Import statements shouldn't be used, because they aren't offering parallel downloads.\n        /////////////////////////////////////////////////////////////\n        this.addEntry(node, Rules.ImportStatemement);\n        return true;\n    };\n    LintVisitor.prototype.visitRuleSet = function (node) {\n        /////////////////////////////////////////////////////////////\n        //\tLint - Don't use empty rulesets.\n        /////////////////////////////////////////////////////////////\n        var declarations = node.getDeclarations();\n        if (!declarations) {\n            // syntax error\n            return false;\n        }\n        if (!declarations.hasChildren()) {\n            this.addEntry(node.getSelectors(), Rules.EmptyRuleSet);\n        }\n        var propertyTable = [];\n        for (var _i = 0, _a = declarations.getChildren(); _i < _a.length; _i++) {\n            var element = _a[_i];\n            if (element instanceof nodes.Declaration) {\n                propertyTable.push(new Element(element));\n            }\n        }\n        /////////////////////////////////////////////////////////////\n        // the rule warns when it finds:\n        // width being used with border, border-left, border-right, padding, padding-left, or padding-right\n        // height being used with border, border-top, border-bottom, padding, padding-top, or padding-bottom\n        // No error when box-sizing property is specified, as it assumes the user knows what he's doing.\n        // see https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size\n        /////////////////////////////////////////////////////////////\n        var boxModel = calculateBoxModel(propertyTable);\n        if (boxModel.width) {\n            var properties = [];\n            if (boxModel.right.value) {\n                properties = union(properties, boxModel.right.properties);\n            }\n            if (boxModel.left.value) {\n                properties = union(properties, boxModel.left.properties);\n            }\n            if (properties.length !== 0) {\n                for (var _b = 0, properties_1 = properties; _b < properties_1.length; _b++) {\n                    var item = properties_1[_b];\n                    this.addEntry(item.node, Rules.BewareOfBoxModelSize);\n                }\n                this.addEntry(boxModel.width.node, Rules.BewareOfBoxModelSize);\n            }\n        }\n        if (boxModel.height) {\n            var properties = [];\n            if (boxModel.top.value) {\n                properties = union(properties, boxModel.top.properties);\n            }\n            if (boxModel.bottom.value) {\n                properties = union(properties, boxModel.bottom.properties);\n            }\n            if (properties.length !== 0) {\n                for (var _c = 0, properties_2 = properties; _c < properties_2.length; _c++) {\n                    var item = properties_2[_c];\n                    this.addEntry(item.node, Rules.BewareOfBoxModelSize);\n                }\n                this.addEntry(boxModel.height.node, Rules.BewareOfBoxModelSize);\n            }\n        }\n        /////////////////////////////////////////////////////////////\n        //\tProperties ignored due to display\n        /////////////////////////////////////////////////////////////\n        // With 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect\n        var displayElems = this.fetchWithValue(propertyTable, 'display', 'inline');\n        if (displayElems.length > 0) {\n            for (var _d = 0, _e = ['width', 'height', 'margin-top', 'margin-bottom', 'float']; _d < _e.length; _d++) {\n                var prop = _e[_d];\n                var elem = this.fetch(propertyTable, prop);\n                for (var index = 0; index < elem.length; index++) {\n                    var node_1 = elem[index].node;\n                    var value = node_1.getValue();\n                    if (prop === 'float' && (!value || value.matches('none'))) {\n                        continue;\n                    }\n                    this.addEntry(node_1, Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayInline', \"Property is ignored due to the display. With 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect.\"));\n                }\n            }\n        }\n        // With 'display: inline-block', 'float' has no effect\n        displayElems = this.fetchWithValue(propertyTable, 'display', 'inline-block');\n        if (displayElems.length > 0) {\n            var elem = this.fetch(propertyTable, 'float');\n            for (var index = 0; index < elem.length; index++) {\n                var node_2 = elem[index].node;\n                var value = node_2.getValue();\n                if (value && !value.matches('none')) {\n                    this.addEntry(node_2, Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayInlineBlock', \"inline-block is ignored due to the float. If 'float' has a value other than 'none', the box is floated and 'display' is treated as 'block'\"));\n                }\n            }\n        }\n        // With 'display: block', 'vertical-align' has no effect\n        displayElems = this.fetchWithValue(propertyTable, 'display', 'block');\n        if (displayElems.length > 0) {\n            var elem = this.fetch(propertyTable, 'vertical-align');\n            for (var index = 0; index < elem.length; index++) {\n                this.addEntry(elem[index].node, Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayBlock', \"Property is ignored due to the display. With 'display: block', vertical-align should not be used.\"));\n            }\n        }\n        /////////////////////////////////////////////////////////////\n        //\tAvoid 'float'\n        /////////////////////////////////////////////////////////////\n        var elements = this.fetch(propertyTable, 'float');\n        for (var index = 0; index < elements.length; index++) {\n            var element = elements[index];\n            if (!this.isValidPropertyDeclaration(element)) {\n                this.addEntry(element.node, Rules.AvoidFloat);\n            }\n        }\n        /////////////////////////////////////////////////////////////\n        //\tDon't use duplicate declarations.\n        /////////////////////////////////////////////////////////////\n        for (var i = 0; i < propertyTable.length; i++) {\n            var element = propertyTable[i];\n            if (element.fullPropertyName !== 'background' && !this.validProperties[element.fullPropertyName]) {\n                var value = element.node.getValue();\n                if (value && this.documentText.charAt(value.offset) !== '-') {\n                    var elements_1 = this.fetch(propertyTable, element.fullPropertyName);\n                    if (elements_1.length > 1) {\n                        for (var k = 0; k < elements_1.length; k++) {\n                            var value_1 = elements_1[k].node.getValue();\n                            if (value_1 && this.documentText.charAt(value_1.offset) !== '-' && elements_1[k] !== element) {\n                                this.addEntry(element.node, Rules.DuplicateDeclarations);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /////////////////////////////////////////////////////////////\n        //\tUnknown propery & When using a vendor-prefixed gradient, make sure to use them all.\n        /////////////////////////////////////////////////////////////\n        var isExportBlock = node.getSelectors().matches(\":export\");\n        if (!isExportBlock) {\n            var propertiesBySuffix = new NodesByRootMap();\n            var containsUnknowns = false;\n            for (var _f = 0, propertyTable_1 = propertyTable; _f < propertyTable_1.length; _f++) {\n                var element = propertyTable_1[_f];\n                var decl = element.node;\n                if (this.isCSSDeclaration(decl)) {\n                    var name = element.fullPropertyName;\n                    var firstChar = name.charAt(0);\n                    if (firstChar === '-') {\n                        if (name.charAt(1) !== '-') { // avoid css variables\n                            if (!languageFacts.cssDataManager.isKnownProperty(name) && !this.validProperties[name]) {\n                                this.addEntry(decl.getProperty(), Rules.UnknownVendorSpecificProperty);\n                            }\n                            var nonPrefixedName = decl.getNonPrefixedPropertyName();\n                            propertiesBySuffix.add(nonPrefixedName, name, decl.getProperty());\n                        }\n                    }\n                    else {\n                        var fullName = name;\n                        if (firstChar === '*' || firstChar === '_') {\n                            this.addEntry(decl.getProperty(), Rules.IEStarHack);\n                            name = name.substr(1);\n                        }\n                        // _property and *property might be contributed via custom data\n                        if (!languageFacts.cssDataManager.isKnownProperty(fullName) && !languageFacts.cssDataManager.isKnownProperty(name)) {\n                            if (!this.validProperties[name]) {\n                                this.addEntry(decl.getProperty(), Rules.UnknownProperty, localize('property.unknownproperty.detailed', \"Unknown property: '{0}'\", name));\n                            }\n                        }\n                        propertiesBySuffix.add(name, name, null); // don't pass the node as we don't show errors on the standard\n                    }\n                }\n                else {\n                    containsUnknowns = true;\n                }\n            }\n            if (!containsUnknowns) { // don't perform this test if there are\n                for (var suffix in propertiesBySuffix.data) {\n                    var entry = propertiesBySuffix.data[suffix];\n                    var actual = entry.names;\n                    var needsStandard = languageFacts.cssDataManager.isStandardProperty(suffix) && (actual.indexOf(suffix) === -1);\n                    if (!needsStandard && actual.length === 1) {\n                        continue; // only the non-vendor specific rule is used, that's fine, no warning\n                    }\n                    var expected = [];\n                    for (var i = 0, len = LintVisitor.prefixes.length; i < len; i++) {\n                        var prefix = LintVisitor.prefixes[i];\n                        if (languageFacts.cssDataManager.isStandardProperty(prefix + suffix)) {\n                            expected.push(prefix + suffix);\n                        }\n                    }\n                    var missingVendorSpecific = this.getMissingNames(expected, actual);\n                    if (missingVendorSpecific || needsStandard) {\n                        for (var _g = 0, _h = entry.nodes; _g < _h.length; _g++) {\n                            var node_3 = _h[_g];\n                            if (needsStandard) {\n                                var message = localize('property.standard.missing', \"Also define the standard property '{0}' for compatibility\", suffix);\n                                this.addEntry(node_3, Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);\n                            }\n                            if (missingVendorSpecific) {\n                                var message = localize('property.vendorspecific.missing', \"Always include all vendor specific properties: Missing: {0}\", missingVendorSpecific);\n                                this.addEntry(node_3, Rules.AllVendorPrefixes, message);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    LintVisitor.prototype.visitPrio = function (node) {\n        /////////////////////////////////////////////////////////////\n        //\tDon't use !important\n        /////////////////////////////////////////////////////////////\n        this.addEntry(node, Rules.AvoidImportant);\n        return true;\n    };\n    LintVisitor.prototype.visitNumericValue = function (node) {\n        /////////////////////////////////////////////////////////////\n        //\t0 has no following unit\n        /////////////////////////////////////////////////////////////\n        var funcDecl = node.findParent(nodes.NodeType.Function);\n        if (funcDecl && funcDecl.getName() === 'calc') {\n            return true;\n        }\n        var decl = node.findParent(nodes.NodeType.Declaration);\n        if (decl) {\n            var declValue = decl.getValue();\n            if (declValue) {\n                var value = node.getValue();\n                if (!value.unit || languageFacts.units.length.indexOf(value.unit.toLowerCase()) === -1) {\n                    return true;\n                }\n                if (parseFloat(value.value) === 0.0 && !!value.unit && !this.validProperties[decl.getFullPropertyName()]) {\n                    this.addEntry(node, Rules.ZeroWithUnit);\n                }\n            }\n        }\n        return true;\n    };\n    LintVisitor.prototype.visitFontFace = function (node) {\n        var declarations = node.getDeclarations();\n        if (!declarations) {\n            // syntax error\n            return false;\n        }\n        var definesSrc = false, definesFontFamily = false;\n        var containsUnknowns = false;\n        for (var _i = 0, _a = declarations.getChildren(); _i < _a.length; _i++) {\n            var node_4 = _a[_i];\n            if (this.isCSSDeclaration(node_4)) {\n                var name = node_4.getProperty().getName().toLowerCase();\n                if (name === 'src') {\n                    definesSrc = true;\n                }\n                if (name === 'font-family') {\n                    definesFontFamily = true;\n                }\n            }\n            else {\n                containsUnknowns = true;\n            }\n        }\n        if (!containsUnknowns && (!definesSrc || !definesFontFamily)) {\n            this.addEntry(node, Rules.RequiredPropertiesForFontFace);\n        }\n        return true;\n    };\n    LintVisitor.prototype.isCSSDeclaration = function (node) {\n        if (node instanceof nodes.Declaration) {\n            if (!node.getValue()) {\n                return false;\n            }\n            var property = node.getProperty();\n            if (!property) {\n                return false;\n            }\n            var identifier = property.getIdentifier();\n            if (!identifier || identifier.containsInterpolation()) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    };\n    LintVisitor.prototype.visitHexColorValue = function (node) {\n        // Rule: #eeff0011 or #eeff00 or #ef01 or #ef0\n        var length = node.length;\n        if (length !== 9 && length !== 7 && length !== 5 && length !== 4) {\n            this.addEntry(node, Rules.HexColorLength);\n        }\n        return false;\n    };\n    LintVisitor.prototype.visitFunction = function (node) {\n        var fnName = node.getName().toLowerCase();\n        var expectedAttrCount = -1;\n        var actualAttrCount = 0;\n        switch (fnName) {\n            case 'rgb(':\n            case 'hsl(':\n                expectedAttrCount = 3;\n                break;\n            case 'rgba(':\n            case 'hsla(':\n                expectedAttrCount = 4;\n                break;\n        }\n        if (expectedAttrCount !== -1) {\n            node.getArguments().accept(function (n) {\n                if (n instanceof nodes.BinaryExpression) {\n                    actualAttrCount += 1;\n                    return false;\n                }\n                return true;\n            });\n            if (actualAttrCount !== expectedAttrCount) {\n                this.addEntry(node, Rules.ArgsInColorFunction);\n            }\n        }\n        return true;\n    };\n    LintVisitor.prefixes = [\n        '-ms-', '-moz-', '-o-', '-webkit-',\n    ];\n    return LintVisitor;\n}());\nexport { LintVisitor };\n"]},"metadata":{},"sourceType":"module"}