{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nodes from './cssNodes.js';\nimport { findFirst } from '../utils/arrays.js';\n\nvar Scope =\n/** @class */\nfunction () {\n  function Scope(offset, length) {\n    this.offset = offset;\n    this.length = length;\n    this.symbols = [];\n    this.parent = null;\n    this.children = [];\n  }\n\n  Scope.prototype.addChild = function (scope) {\n    this.children.push(scope);\n    scope.setParent(this);\n  };\n\n  Scope.prototype.setParent = function (scope) {\n    this.parent = scope;\n  };\n\n  Scope.prototype.findScope = function (offset, length) {\n    if (length === void 0) {\n      length = 0;\n    }\n\n    if (this.offset <= offset && this.offset + this.length > offset + length || this.offset === offset && this.length === length) {\n      return this.findInScope(offset, length);\n    }\n\n    return null;\n  };\n\n  Scope.prototype.findInScope = function (offset, length) {\n    if (length === void 0) {\n      length = 0;\n    } // find the first scope child that has an offset larger than offset + length\n\n\n    var end = offset + length;\n    var idx = findFirst(this.children, function (s) {\n      return s.offset > end;\n    });\n\n    if (idx === 0) {\n      // all scopes have offsets larger than our end\n      return this;\n    }\n\n    var res = this.children[idx - 1];\n\n    if (res.offset <= offset && res.offset + res.length >= offset + length) {\n      return res.findInScope(offset, length);\n    }\n\n    return this;\n  };\n\n  Scope.prototype.addSymbol = function (symbol) {\n    this.symbols.push(symbol);\n  };\n\n  Scope.prototype.getSymbol = function (name, type) {\n    for (var index = 0; index < this.symbols.length; index++) {\n      var symbol = this.symbols[index];\n\n      if (symbol.name === name && symbol.type === type) {\n        return symbol;\n      }\n    }\n\n    return null;\n  };\n\n  Scope.prototype.getSymbols = function () {\n    return this.symbols;\n  };\n\n  return Scope;\n}();\n\nexport { Scope };\n\nvar GlobalScope =\n/** @class */\nfunction (_super) {\n  __extends(GlobalScope, _super);\n\n  function GlobalScope() {\n    return _super.call(this, 0, Number.MAX_VALUE) || this;\n  }\n\n  return GlobalScope;\n}(Scope);\n\nexport { GlobalScope };\n\nvar Symbol =\n/** @class */\nfunction () {\n  function Symbol(name, value, node, type) {\n    this.name = name;\n    this.value = value;\n    this.node = node;\n    this.type = type;\n  }\n\n  return Symbol;\n}();\n\nexport { Symbol };\n\nvar ScopeBuilder =\n/** @class */\nfunction () {\n  function ScopeBuilder(scope) {\n    this.scope = scope;\n  }\n\n  ScopeBuilder.prototype.addSymbol = function (node, name, value, type) {\n    if (node.offset !== -1) {\n      var current = this.scope.findScope(node.offset, node.length);\n\n      if (current) {\n        current.addSymbol(new Symbol(name, value, node, type));\n      }\n    }\n  };\n\n  ScopeBuilder.prototype.addScope = function (node) {\n    if (node.offset !== -1) {\n      var current = this.scope.findScope(node.offset, node.length);\n\n      if (current && (current.offset !== node.offset || current.length !== node.length)) {\n        // scope already known?\n        var newScope = new Scope(node.offset, node.length);\n        current.addChild(newScope);\n        return newScope;\n      }\n\n      return current;\n    }\n\n    return null;\n  };\n\n  ScopeBuilder.prototype.addSymbolToChildScope = function (scopeNode, node, name, value, type) {\n    if (scopeNode && scopeNode.offset !== -1) {\n      var current = this.addScope(scopeNode); // create the scope or gets the existing one\n\n      if (current) {\n        current.addSymbol(new Symbol(name, value, node, type));\n      }\n    }\n  };\n\n  ScopeBuilder.prototype.visitNode = function (node) {\n    switch (node.type) {\n      case nodes.NodeType.Keyframe:\n        this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Keyframe);\n        return true;\n\n      case nodes.NodeType.CustomPropertyDeclaration:\n        return this.visitCustomPropertyDeclarationNode(node);\n\n      case nodes.NodeType.VariableDeclaration:\n        return this.visitVariableDeclarationNode(node);\n\n      case nodes.NodeType.Ruleset:\n        return this.visitRuleSet(node);\n\n      case nodes.NodeType.MixinDeclaration:\n        this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Mixin);\n        return true;\n\n      case nodes.NodeType.FunctionDeclaration:\n        this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Function);\n        return true;\n\n      case nodes.NodeType.FunctionParameter:\n        {\n          return this.visitFunctionParameterNode(node);\n        }\n\n      case nodes.NodeType.Declarations:\n        this.addScope(node);\n        return true;\n\n      case nodes.NodeType.For:\n        var forNode = node;\n        var scopeNode = forNode.getDeclarations();\n\n        if (scopeNode && forNode.variable) {\n          this.addSymbolToChildScope(scopeNode, forNode.variable, forNode.variable.getName(), void 0, nodes.ReferenceType.Variable);\n        }\n\n        return true;\n\n      case nodes.NodeType.Each:\n        {\n          var eachNode = node;\n          var scopeNode_1 = eachNode.getDeclarations();\n\n          if (scopeNode_1) {\n            var variables = eachNode.getVariables().getChildren();\n\n            for (var _i = 0, variables_1 = variables; _i < variables_1.length; _i++) {\n              var variable = variables_1[_i];\n              this.addSymbolToChildScope(scopeNode_1, variable, variable.getName(), void 0, nodes.ReferenceType.Variable);\n            }\n          }\n\n          return true;\n        }\n    }\n\n    return true;\n  };\n\n  ScopeBuilder.prototype.visitRuleSet = function (node) {\n    var current = this.scope.findScope(node.offset, node.length);\n\n    if (current) {\n      for (var _i = 0, _a = node.getSelectors().getChildren(); _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if (child instanceof nodes.Selector) {\n          if (child.getChildren().length === 1) {\n            // only selectors with a single element can be extended\n            current.addSymbol(new Symbol(child.getChild(0).getText(), void 0, child, nodes.ReferenceType.Rule));\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  ScopeBuilder.prototype.visitVariableDeclarationNode = function (node) {\n    var value = node.getValue() ? node.getValue().getText() : void 0;\n    this.addSymbol(node, node.getName(), value, nodes.ReferenceType.Variable);\n    return true;\n  };\n\n  ScopeBuilder.prototype.visitFunctionParameterNode = function (node) {\n    // parameters are part of the body scope\n    var scopeNode = node.getParent().getDeclarations();\n\n    if (scopeNode) {\n      var valueNode = node.getDefaultValue();\n      var value = valueNode ? valueNode.getText() : void 0;\n      this.addSymbolToChildScope(scopeNode, node, node.getName(), value, nodes.ReferenceType.Variable);\n    }\n\n    return true;\n  };\n\n  ScopeBuilder.prototype.visitCustomPropertyDeclarationNode = function (node) {\n    var value = node.getValue() ? node.getValue().getText() : '';\n    this.addCSSVariable(node.getProperty(), node.getProperty().getName(), value, nodes.ReferenceType.Variable);\n    return true;\n  };\n\n  ScopeBuilder.prototype.addCSSVariable = function (node, name, value, type) {\n    if (node.offset !== -1) {\n      this.scope.addSymbol(new Symbol(name, value, node, type));\n    }\n  };\n\n  return ScopeBuilder;\n}();\n\nexport { ScopeBuilder };\n\nvar Symbols =\n/** @class */\nfunction () {\n  function Symbols(node) {\n    this.global = new GlobalScope();\n    node.acceptVisitor(new ScopeBuilder(this.global));\n  }\n\n  Symbols.prototype.findSymbolsAtOffset = function (offset, referenceType) {\n    var scope = this.global.findScope(offset, 0);\n    var result = [];\n    var names = {};\n\n    while (scope) {\n      var symbols = scope.getSymbols();\n\n      for (var i = 0; i < symbols.length; i++) {\n        var symbol = symbols[i];\n\n        if (symbol.type === referenceType && !names[symbol.name]) {\n          result.push(symbol);\n          names[symbol.name] = true;\n        }\n      }\n\n      scope = scope.parent;\n    }\n\n    return result;\n  };\n\n  Symbols.prototype.internalFindSymbol = function (node, referenceTypes) {\n    var scopeNode = node;\n\n    if (node.parent instanceof nodes.FunctionParameter && node.parent.getParent() instanceof nodes.BodyDeclaration) {\n      scopeNode = node.parent.getParent().getDeclarations();\n    }\n\n    if (node.parent instanceof nodes.FunctionArgument && node.parent.getParent() instanceof nodes.Function) {\n      var funcId = node.parent.getParent().getIdentifier();\n\n      if (funcId) {\n        var functionSymbol = this.internalFindSymbol(funcId, [nodes.ReferenceType.Function]);\n\n        if (functionSymbol) {\n          scopeNode = functionSymbol.node.getDeclarations();\n        }\n      }\n    }\n\n    if (!scopeNode) {\n      return null;\n    }\n\n    var name = node.getText();\n    var scope = this.global.findScope(scopeNode.offset, scopeNode.length);\n\n    while (scope) {\n      for (var index = 0; index < referenceTypes.length; index++) {\n        var type = referenceTypes[index];\n        var symbol = scope.getSymbol(name, type);\n\n        if (symbol) {\n          return symbol;\n        }\n      }\n\n      scope = scope.parent;\n    }\n\n    return null;\n  };\n\n  Symbols.prototype.evaluateReferenceTypes = function (node) {\n    if (node instanceof nodes.Identifier) {\n      var referenceTypes = node.referenceTypes;\n\n      if (referenceTypes) {\n        return referenceTypes;\n      } else {\n        if (node.isCustomProperty) {\n          return [nodes.ReferenceType.Variable];\n        } // are a reference to a keyframe?\n\n\n        var decl = nodes.getParentDeclaration(node);\n\n        if (decl) {\n          var propertyName = decl.getNonPrefixedPropertyName();\n\n          if ((propertyName === 'animation' || propertyName === 'animation-name') && decl.getValue() && decl.getValue().offset === node.offset) {\n            return [nodes.ReferenceType.Keyframe];\n          }\n        }\n      }\n    } else if (node instanceof nodes.Variable) {\n      return [nodes.ReferenceType.Variable];\n    }\n\n    var selector = node.findAParent(nodes.NodeType.Selector, nodes.NodeType.ExtendsReference);\n\n    if (selector) {\n      return [nodes.ReferenceType.Rule];\n    }\n\n    return null;\n  };\n\n  Symbols.prototype.findSymbolFromNode = function (node) {\n    if (!node) {\n      return null;\n    }\n\n    while (node.type === nodes.NodeType.Interpolation) {\n      node = node.getParent();\n    }\n\n    var referenceTypes = this.evaluateReferenceTypes(node);\n\n    if (referenceTypes) {\n      return this.internalFindSymbol(node, referenceTypes);\n    }\n\n    return null;\n  };\n\n  Symbols.prototype.matchesSymbol = function (node, symbol) {\n    if (!node) {\n      return false;\n    }\n\n    while (node.type === nodes.NodeType.Interpolation) {\n      node = node.getParent();\n    }\n\n    if (!node.matches(symbol.name)) {\n      return false;\n    }\n\n    var referenceTypes = this.evaluateReferenceTypes(node);\n\n    if (!referenceTypes || referenceTypes.indexOf(symbol.type) === -1) {\n      return false;\n    }\n\n    var nodeSymbol = this.internalFindSymbol(node, referenceTypes);\n    return nodeSymbol === symbol;\n  };\n\n  Symbols.prototype.findSymbol = function (name, type, offset) {\n    var scope = this.global.findScope(offset);\n\n    while (scope) {\n      var symbol = scope.getSymbol(name, type);\n\n      if (symbol) {\n        return symbol;\n      }\n\n      scope = scope.parent;\n    }\n\n    return null;\n  };\n\n  return Symbols;\n}();\n\nexport { Symbols };","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssSymbolScope.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nodes","findFirst","Scope","offset","length","symbols","parent","children","addChild","scope","push","setParent","findScope","findInScope","end","idx","s","res","addSymbol","symbol","getSymbol","name","type","index","getSymbols","GlobalScope","_super","call","Number","MAX_VALUE","Symbol","value","node","ScopeBuilder","current","addScope","newScope","addSymbolToChildScope","scopeNode","visitNode","NodeType","Keyframe","getName","ReferenceType","CustomPropertyDeclaration","visitCustomPropertyDeclarationNode","VariableDeclaration","visitVariableDeclarationNode","Ruleset","visitRuleSet","MixinDeclaration","Mixin","FunctionDeclaration","Function","FunctionParameter","visitFunctionParameterNode","Declarations","For","forNode","getDeclarations","variable","Variable","Each","eachNode","scopeNode_1","variables","getVariables","getChildren","_i","variables_1","_a","getSelectors","child","Selector","getChild","getText","Rule","getValue","getParent","valueNode","getDefaultValue","addCSSVariable","getProperty","Symbols","global","acceptVisitor","findSymbolsAtOffset","referenceType","result","names","i","internalFindSymbol","referenceTypes","BodyDeclaration","FunctionArgument","funcId","getIdentifier","functionSymbol","evaluateReferenceTypes","Identifier","isCustomProperty","decl","getParentDeclaration","propertyName","getNonPrefixedPropertyName","selector","findAParent","ExtendsReference","findSymbolFromNode","Interpolation","matchesSymbol","matches","indexOf","nodeSymbol","findSymbol"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as nodes from './cssNodes.js';\nimport { findFirst } from '../utils/arrays.js';\nvar Scope = /** @class */ (function () {\n    function Scope(offset, length) {\n        this.offset = offset;\n        this.length = length;\n        this.symbols = [];\n        this.parent = null;\n        this.children = [];\n    }\n    Scope.prototype.addChild = function (scope) {\n        this.children.push(scope);\n        scope.setParent(this);\n    };\n    Scope.prototype.setParent = function (scope) {\n        this.parent = scope;\n    };\n    Scope.prototype.findScope = function (offset, length) {\n        if (length === void 0) { length = 0; }\n        if (this.offset <= offset && this.offset + this.length > offset + length || this.offset === offset && this.length === length) {\n            return this.findInScope(offset, length);\n        }\n        return null;\n    };\n    Scope.prototype.findInScope = function (offset, length) {\n        if (length === void 0) { length = 0; }\n        // find the first scope child that has an offset larger than offset + length\n        var end = offset + length;\n        var idx = findFirst(this.children, function (s) { return s.offset > end; });\n        if (idx === 0) {\n            // all scopes have offsets larger than our end\n            return this;\n        }\n        var res = this.children[idx - 1];\n        if (res.offset <= offset && res.offset + res.length >= offset + length) {\n            return res.findInScope(offset, length);\n        }\n        return this;\n    };\n    Scope.prototype.addSymbol = function (symbol) {\n        this.symbols.push(symbol);\n    };\n    Scope.prototype.getSymbol = function (name, type) {\n        for (var index = 0; index < this.symbols.length; index++) {\n            var symbol = this.symbols[index];\n            if (symbol.name === name && symbol.type === type) {\n                return symbol;\n            }\n        }\n        return null;\n    };\n    Scope.prototype.getSymbols = function () {\n        return this.symbols;\n    };\n    return Scope;\n}());\nexport { Scope };\nvar GlobalScope = /** @class */ (function (_super) {\n    __extends(GlobalScope, _super);\n    function GlobalScope() {\n        return _super.call(this, 0, Number.MAX_VALUE) || this;\n    }\n    return GlobalScope;\n}(Scope));\nexport { GlobalScope };\nvar Symbol = /** @class */ (function () {\n    function Symbol(name, value, node, type) {\n        this.name = name;\n        this.value = value;\n        this.node = node;\n        this.type = type;\n    }\n    return Symbol;\n}());\nexport { Symbol };\nvar ScopeBuilder = /** @class */ (function () {\n    function ScopeBuilder(scope) {\n        this.scope = scope;\n    }\n    ScopeBuilder.prototype.addSymbol = function (node, name, value, type) {\n        if (node.offset !== -1) {\n            var current = this.scope.findScope(node.offset, node.length);\n            if (current) {\n                current.addSymbol(new Symbol(name, value, node, type));\n            }\n        }\n    };\n    ScopeBuilder.prototype.addScope = function (node) {\n        if (node.offset !== -1) {\n            var current = this.scope.findScope(node.offset, node.length);\n            if (current && (current.offset !== node.offset || current.length !== node.length)) { // scope already known?\n                var newScope = new Scope(node.offset, node.length);\n                current.addChild(newScope);\n                return newScope;\n            }\n            return current;\n        }\n        return null;\n    };\n    ScopeBuilder.prototype.addSymbolToChildScope = function (scopeNode, node, name, value, type) {\n        if (scopeNode && scopeNode.offset !== -1) {\n            var current = this.addScope(scopeNode); // create the scope or gets the existing one\n            if (current) {\n                current.addSymbol(new Symbol(name, value, node, type));\n            }\n        }\n    };\n    ScopeBuilder.prototype.visitNode = function (node) {\n        switch (node.type) {\n            case nodes.NodeType.Keyframe:\n                this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Keyframe);\n                return true;\n            case nodes.NodeType.CustomPropertyDeclaration:\n                return this.visitCustomPropertyDeclarationNode(node);\n            case nodes.NodeType.VariableDeclaration:\n                return this.visitVariableDeclarationNode(node);\n            case nodes.NodeType.Ruleset:\n                return this.visitRuleSet(node);\n            case nodes.NodeType.MixinDeclaration:\n                this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Mixin);\n                return true;\n            case nodes.NodeType.FunctionDeclaration:\n                this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Function);\n                return true;\n            case nodes.NodeType.FunctionParameter: {\n                return this.visitFunctionParameterNode(node);\n            }\n            case nodes.NodeType.Declarations:\n                this.addScope(node);\n                return true;\n            case nodes.NodeType.For:\n                var forNode = node;\n                var scopeNode = forNode.getDeclarations();\n                if (scopeNode && forNode.variable) {\n                    this.addSymbolToChildScope(scopeNode, forNode.variable, forNode.variable.getName(), void 0, nodes.ReferenceType.Variable);\n                }\n                return true;\n            case nodes.NodeType.Each: {\n                var eachNode = node;\n                var scopeNode_1 = eachNode.getDeclarations();\n                if (scopeNode_1) {\n                    var variables = eachNode.getVariables().getChildren();\n                    for (var _i = 0, variables_1 = variables; _i < variables_1.length; _i++) {\n                        var variable = variables_1[_i];\n                        this.addSymbolToChildScope(scopeNode_1, variable, variable.getName(), void 0, nodes.ReferenceType.Variable);\n                    }\n                }\n                return true;\n            }\n        }\n        return true;\n    };\n    ScopeBuilder.prototype.visitRuleSet = function (node) {\n        var current = this.scope.findScope(node.offset, node.length);\n        if (current) {\n            for (var _i = 0, _a = node.getSelectors().getChildren(); _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (child instanceof nodes.Selector) {\n                    if (child.getChildren().length === 1) { // only selectors with a single element can be extended\n                        current.addSymbol(new Symbol(child.getChild(0).getText(), void 0, child, nodes.ReferenceType.Rule));\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    ScopeBuilder.prototype.visitVariableDeclarationNode = function (node) {\n        var value = node.getValue() ? node.getValue().getText() : void 0;\n        this.addSymbol(node, node.getName(), value, nodes.ReferenceType.Variable);\n        return true;\n    };\n    ScopeBuilder.prototype.visitFunctionParameterNode = function (node) {\n        // parameters are part of the body scope\n        var scopeNode = node.getParent().getDeclarations();\n        if (scopeNode) {\n            var valueNode = node.getDefaultValue();\n            var value = valueNode ? valueNode.getText() : void 0;\n            this.addSymbolToChildScope(scopeNode, node, node.getName(), value, nodes.ReferenceType.Variable);\n        }\n        return true;\n    };\n    ScopeBuilder.prototype.visitCustomPropertyDeclarationNode = function (node) {\n        var value = node.getValue() ? node.getValue().getText() : '';\n        this.addCSSVariable(node.getProperty(), node.getProperty().getName(), value, nodes.ReferenceType.Variable);\n        return true;\n    };\n    ScopeBuilder.prototype.addCSSVariable = function (node, name, value, type) {\n        if (node.offset !== -1) {\n            this.scope.addSymbol(new Symbol(name, value, node, type));\n        }\n    };\n    return ScopeBuilder;\n}());\nexport { ScopeBuilder };\nvar Symbols = /** @class */ (function () {\n    function Symbols(node) {\n        this.global = new GlobalScope();\n        node.acceptVisitor(new ScopeBuilder(this.global));\n    }\n    Symbols.prototype.findSymbolsAtOffset = function (offset, referenceType) {\n        var scope = this.global.findScope(offset, 0);\n        var result = [];\n        var names = {};\n        while (scope) {\n            var symbols = scope.getSymbols();\n            for (var i = 0; i < symbols.length; i++) {\n                var symbol = symbols[i];\n                if (symbol.type === referenceType && !names[symbol.name]) {\n                    result.push(symbol);\n                    names[symbol.name] = true;\n                }\n            }\n            scope = scope.parent;\n        }\n        return result;\n    };\n    Symbols.prototype.internalFindSymbol = function (node, referenceTypes) {\n        var scopeNode = node;\n        if (node.parent instanceof nodes.FunctionParameter && node.parent.getParent() instanceof nodes.BodyDeclaration) {\n            scopeNode = node.parent.getParent().getDeclarations();\n        }\n        if (node.parent instanceof nodes.FunctionArgument && node.parent.getParent() instanceof nodes.Function) {\n            var funcId = node.parent.getParent().getIdentifier();\n            if (funcId) {\n                var functionSymbol = this.internalFindSymbol(funcId, [nodes.ReferenceType.Function]);\n                if (functionSymbol) {\n                    scopeNode = functionSymbol.node.getDeclarations();\n                }\n            }\n        }\n        if (!scopeNode) {\n            return null;\n        }\n        var name = node.getText();\n        var scope = this.global.findScope(scopeNode.offset, scopeNode.length);\n        while (scope) {\n            for (var index = 0; index < referenceTypes.length; index++) {\n                var type = referenceTypes[index];\n                var symbol = scope.getSymbol(name, type);\n                if (symbol) {\n                    return symbol;\n                }\n            }\n            scope = scope.parent;\n        }\n        return null;\n    };\n    Symbols.prototype.evaluateReferenceTypes = function (node) {\n        if (node instanceof nodes.Identifier) {\n            var referenceTypes = node.referenceTypes;\n            if (referenceTypes) {\n                return referenceTypes;\n            }\n            else {\n                if (node.isCustomProperty) {\n                    return [nodes.ReferenceType.Variable];\n                }\n                // are a reference to a keyframe?\n                var decl = nodes.getParentDeclaration(node);\n                if (decl) {\n                    var propertyName = decl.getNonPrefixedPropertyName();\n                    if ((propertyName === 'animation' || propertyName === 'animation-name')\n                        && decl.getValue() && decl.getValue().offset === node.offset) {\n                        return [nodes.ReferenceType.Keyframe];\n                    }\n                }\n            }\n        }\n        else if (node instanceof nodes.Variable) {\n            return [nodes.ReferenceType.Variable];\n        }\n        var selector = node.findAParent(nodes.NodeType.Selector, nodes.NodeType.ExtendsReference);\n        if (selector) {\n            return [nodes.ReferenceType.Rule];\n        }\n        return null;\n    };\n    Symbols.prototype.findSymbolFromNode = function (node) {\n        if (!node) {\n            return null;\n        }\n        while (node.type === nodes.NodeType.Interpolation) {\n            node = node.getParent();\n        }\n        var referenceTypes = this.evaluateReferenceTypes(node);\n        if (referenceTypes) {\n            return this.internalFindSymbol(node, referenceTypes);\n        }\n        return null;\n    };\n    Symbols.prototype.matchesSymbol = function (node, symbol) {\n        if (!node) {\n            return false;\n        }\n        while (node.type === nodes.NodeType.Interpolation) {\n            node = node.getParent();\n        }\n        if (!node.matches(symbol.name)) {\n            return false;\n        }\n        var referenceTypes = this.evaluateReferenceTypes(node);\n        if (!referenceTypes || referenceTypes.indexOf(symbol.type) === -1) {\n            return false;\n        }\n        var nodeSymbol = this.internalFindSymbol(node, referenceTypes);\n        return nodeSymbol === symbol;\n    };\n    Symbols.prototype.findSymbol = function (name, type, offset) {\n        var scope = this.global.findScope(offset);\n        while (scope) {\n            var symbol = scope.getSymbol(name, type);\n            if (symbol) {\n                return symbol;\n            }\n            scope = scope.parent;\n        }\n        return null;\n    };\n    return Symbols;\n}());\nexport { Symbols };\n"]},"metadata":{},"sourceType":"module"}