{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nodes from '../parser/cssNodes.js';\nimport { LintConfigurationSettings, Rules } from './lintRules.js';\nimport { LintVisitor } from './lint.js';\nimport { Range, DiagnosticSeverity } from '../cssLanguageTypes.js';\n\nvar CSSValidation =\n/** @class */\nfunction () {\n  function CSSValidation() {}\n\n  CSSValidation.prototype.configure = function (settings) {\n    this.settings = settings;\n  };\n\n  CSSValidation.prototype.doValidation = function (document, stylesheet, settings) {\n    if (settings === void 0) {\n      settings = this.settings;\n    }\n\n    if (settings && settings.validate === false) {\n      return [];\n    }\n\n    var entries = [];\n    entries.push.apply(entries, nodes.ParseErrorCollector.entries(stylesheet));\n    entries.push.apply(entries, LintVisitor.entries(stylesheet, document, new LintConfigurationSettings(settings && settings.lint)));\n    var ruleIds = [];\n\n    for (var r in Rules) {\n      ruleIds.push(Rules[r].id);\n    }\n\n    function toDiagnostic(marker) {\n      var range = Range.create(document.positionAt(marker.getOffset()), document.positionAt(marker.getOffset() + marker.getLength()));\n      var source = document.languageId;\n      return {\n        code: marker.getRule().id,\n        source: source,\n        message: marker.getMessage(),\n        severity: marker.getLevel() === nodes.Level.Warning ? DiagnosticSeverity.Warning : DiagnosticSeverity.Error,\n        range: range\n      };\n    }\n\n    return entries.filter(function (entry) {\n      return entry.getLevel() !== nodes.Level.Ignore;\n    }).map(toDiagnostic);\n  };\n\n  return CSSValidation;\n}();\n\nexport { CSSValidation };","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssValidation.js"],"names":["nodes","LintConfigurationSettings","Rules","LintVisitor","Range","DiagnosticSeverity","CSSValidation","prototype","configure","settings","doValidation","document","stylesheet","validate","entries","push","apply","ParseErrorCollector","lint","ruleIds","r","id","toDiagnostic","marker","range","create","positionAt","getOffset","getLength","source","languageId","code","getRule","message","getMessage","severity","getLevel","Level","Warning","Error","filter","entry","Ignore","map"],"mappings":"AAAA;;;;AAIA;;AACA,OAAO,KAAKA,KAAZ,MAAuB,uBAAvB;AACA,SAASC,yBAAT,EAAoCC,KAApC,QAAiD,gBAAjD;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,KAAT,EAAgBC,kBAAhB,QAA0C,wBAA1C;;AACA,IAAIC,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,GAAyB,CACxB;;AACDA,EAAAA,aAAa,CAACC,SAAd,CAAwBC,SAAxB,GAAoC,UAAUC,QAAV,EAAoB;AACpD,SAAKA,QAAL,GAAgBA,QAAhB;AACH,GAFD;;AAGAH,EAAAA,aAAa,CAACC,SAAd,CAAwBG,YAAxB,GAAuC,UAAUC,QAAV,EAAoBC,UAApB,EAAgCH,QAAhC,EAA0C;AAC7E,QAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAG,KAAKA,QAAhB;AAA2B;;AACtD,QAAIA,QAAQ,IAAIA,QAAQ,CAACI,QAAT,KAAsB,KAAtC,EAA6C;AACzC,aAAO,EAAP;AACH;;AACD,QAAIC,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBF,OAAnB,EAA4Bd,KAAK,CAACiB,mBAAN,CAA0BH,OAA1B,CAAkCF,UAAlC,CAA5B;AACAE,IAAAA,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBF,OAAnB,EAA4BX,WAAW,CAACW,OAAZ,CAAoBF,UAApB,EAAgCD,QAAhC,EAA0C,IAAIV,yBAAJ,CAA8BQ,QAAQ,IAAIA,QAAQ,CAACS,IAAnD,CAA1C,CAA5B;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAT,IAAclB,KAAd,EAAqB;AACjBiB,MAAAA,OAAO,CAACJ,IAAR,CAAab,KAAK,CAACkB,CAAD,CAAL,CAASC,EAAtB;AACH;;AACD,aAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,UAAIC,KAAK,GAAGpB,KAAK,CAACqB,MAAN,CAAad,QAAQ,CAACe,UAAT,CAAoBH,MAAM,CAACI,SAAP,EAApB,CAAb,EAAsDhB,QAAQ,CAACe,UAAT,CAAoBH,MAAM,CAACI,SAAP,KAAqBJ,MAAM,CAACK,SAAP,EAAzC,CAAtD,CAAZ;AACA,UAAIC,MAAM,GAAGlB,QAAQ,CAACmB,UAAtB;AACA,aAAO;AACHC,QAAAA,IAAI,EAAER,MAAM,CAACS,OAAP,GAAiBX,EADpB;AAEHQ,QAAAA,MAAM,EAAEA,MAFL;AAGHI,QAAAA,OAAO,EAAEV,MAAM,CAACW,UAAP,EAHN;AAIHC,QAAAA,QAAQ,EAAEZ,MAAM,CAACa,QAAP,OAAsBpC,KAAK,CAACqC,KAAN,CAAYC,OAAlC,GAA4CjC,kBAAkB,CAACiC,OAA/D,GAAyEjC,kBAAkB,CAACkC,KAJnG;AAKHf,QAAAA,KAAK,EAAEA;AALJ,OAAP;AAOH;;AACD,WAAOV,OAAO,CAAC0B,MAAR,CAAe,UAAUC,KAAV,EAAiB;AAAE,aAAOA,KAAK,CAACL,QAAN,OAAqBpC,KAAK,CAACqC,KAAN,CAAYK,MAAxC;AAAiD,KAAnF,EAAqFC,GAArF,CAAyFrB,YAAzF,CAAP;AACH,GAxBD;;AAyBA,SAAOhB,aAAP;AACH,CAhCkC,EAAnC;;AAiCA,SAASA,aAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as nodes from '../parser/cssNodes.js';\nimport { LintConfigurationSettings, Rules } from './lintRules.js';\nimport { LintVisitor } from './lint.js';\nimport { Range, DiagnosticSeverity } from '../cssLanguageTypes.js';\nvar CSSValidation = /** @class */ (function () {\n    function CSSValidation() {\n    }\n    CSSValidation.prototype.configure = function (settings) {\n        this.settings = settings;\n    };\n    CSSValidation.prototype.doValidation = function (document, stylesheet, settings) {\n        if (settings === void 0) { settings = this.settings; }\n        if (settings && settings.validate === false) {\n            return [];\n        }\n        var entries = [];\n        entries.push.apply(entries, nodes.ParseErrorCollector.entries(stylesheet));\n        entries.push.apply(entries, LintVisitor.entries(stylesheet, document, new LintConfigurationSettings(settings && settings.lint)));\n        var ruleIds = [];\n        for (var r in Rules) {\n            ruleIds.push(Rules[r].id);\n        }\n        function toDiagnostic(marker) {\n            var range = Range.create(document.positionAt(marker.getOffset()), document.positionAt(marker.getOffset() + marker.getLength()));\n            var source = document.languageId;\n            return {\n                code: marker.getRule().id,\n                source: source,\n                message: marker.getMessage(),\n                severity: marker.getLevel() === nodes.Level.Warning ? DiagnosticSeverity.Warning : DiagnosticSeverity.Error,\n                range: range\n            };\n        }\n        return entries.filter(function (entry) { return entry.getLevel() !== nodes.Level.Ignore; }).map(toDiagnostic);\n    };\n    return CSSValidation;\n}());\nexport { CSSValidation };\n"]},"metadata":{},"sourceType":"module"}