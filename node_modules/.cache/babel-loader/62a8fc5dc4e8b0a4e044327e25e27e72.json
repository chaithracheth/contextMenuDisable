{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nodes from '../parser/cssNodes.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport { selectorToMarkedString, simpleSelectorToMarkedString } from './selectorPrinting.js';\nimport { startsWith } from '../utils/strings.js';\nimport { Range, MarkupKind } from '../cssLanguageTypes.js';\nimport { isDefined } from '../utils/objects.js';\n\nvar CSSHover =\n/** @class */\nfunction () {\n  function CSSHover(clientCapabilities) {\n    this.clientCapabilities = clientCapabilities;\n  }\n\n  CSSHover.prototype.doHover = function (document, position, stylesheet) {\n    function getRange(node) {\n      return Range.create(document.positionAt(node.offset), document.positionAt(node.end));\n    }\n\n    var offset = document.offsetAt(position);\n    var nodepath = nodes.getNodePath(stylesheet, offset);\n    /**\n     * nodepath is top-down\n     * Build up the hover by appending inner node's information\n     */\n\n    var hover = null;\n\n    for (var i = 0; i < nodepath.length; i++) {\n      var node = nodepath[i];\n\n      if (node instanceof nodes.Selector) {\n        hover = {\n          contents: selectorToMarkedString(node),\n          range: getRange(node)\n        };\n        break;\n      }\n\n      if (node instanceof nodes.SimpleSelector) {\n        /**\n         * Some sass specific at rules such as `@at-root` are parsed as `SimpleSelector`\n         */\n        if (!startsWith(node.getText(), '@')) {\n          hover = {\n            contents: simpleSelectorToMarkedString(node),\n            range: getRange(node)\n          };\n        }\n\n        break;\n      }\n\n      if (node instanceof nodes.Declaration) {\n        var propertyName = node.getFullPropertyName();\n        var entry = languageFacts.cssDataManager.getProperty(propertyName);\n\n        if (entry) {\n          hover = {\n            contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n            range: getRange(node)\n          };\n        }\n\n        continue;\n      }\n\n      if (node instanceof nodes.UnknownAtRule) {\n        var atRuleName = node.getText();\n        var entry = languageFacts.cssDataManager.getAtDirective(atRuleName);\n\n        if (entry) {\n          hover = {\n            contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n            range: getRange(node)\n          };\n        }\n\n        continue;\n      }\n\n      if (node instanceof nodes.Node && node.type === nodes.NodeType.PseudoSelector) {\n        var selectorName = node.getText();\n        var entry = selectorName.slice(0, 2) === '::' ? languageFacts.cssDataManager.getPseudoElement(selectorName) : languageFacts.cssDataManager.getPseudoClass(selectorName);\n\n        if (entry) {\n          hover = {\n            contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n            range: getRange(node)\n          };\n        }\n\n        continue;\n      }\n    }\n\n    if (hover) {\n      hover.contents = this.convertContents(hover.contents);\n    }\n\n    return hover;\n  };\n\n  CSSHover.prototype.convertContents = function (contents) {\n    if (!this.doesSupportMarkdown()) {\n      if (typeof contents === 'string') {\n        return contents;\n      } // MarkupContent\n      else if ('kind' in contents) {\n          return {\n            kind: 'plaintext',\n            value: contents.value\n          };\n        } // MarkedString[]\n        else if (Array.isArray(contents)) {\n            return contents.map(function (c) {\n              return typeof c === 'string' ? c : c.value;\n            });\n          } // MarkedString\n          else {\n              return contents.value;\n            }\n    }\n\n    return contents;\n  };\n\n  CSSHover.prototype.doesSupportMarkdown = function () {\n    if (!isDefined(this.supportsMarkdown)) {\n      if (!isDefined(this.clientCapabilities)) {\n        this.supportsMarkdown = true;\n        return this.supportsMarkdown;\n      }\n\n      var hover = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.hover;\n      this.supportsMarkdown = hover && hover.contentFormat && Array.isArray(hover.contentFormat) && hover.contentFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n\n    return this.supportsMarkdown;\n  };\n\n  return CSSHover;\n}();\n\nexport { CSSHover };","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssHover.js"],"names":["nodes","languageFacts","selectorToMarkedString","simpleSelectorToMarkedString","startsWith","Range","MarkupKind","isDefined","CSSHover","clientCapabilities","prototype","doHover","document","position","stylesheet","getRange","node","create","positionAt","offset","end","offsetAt","nodepath","getNodePath","hover","i","length","Selector","contents","range","SimpleSelector","getText","Declaration","propertyName","getFullPropertyName","entry","cssDataManager","getProperty","getEntryDescription","doesSupportMarkdown","UnknownAtRule","atRuleName","getAtDirective","Node","type","NodeType","PseudoSelector","selectorName","slice","getPseudoElement","getPseudoClass","convertContents","kind","value","Array","isArray","map","c","supportsMarkdown","textDocument","contentFormat","indexOf","Markdown"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as nodes from '../parser/cssNodes.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport { selectorToMarkedString, simpleSelectorToMarkedString } from './selectorPrinting.js';\nimport { startsWith } from '../utils/strings.js';\nimport { Range, MarkupKind } from '../cssLanguageTypes.js';\nimport { isDefined } from '../utils/objects.js';\nvar CSSHover = /** @class */ (function () {\n    function CSSHover(clientCapabilities) {\n        this.clientCapabilities = clientCapabilities;\n    }\n    CSSHover.prototype.doHover = function (document, position, stylesheet) {\n        function getRange(node) {\n            return Range.create(document.positionAt(node.offset), document.positionAt(node.end));\n        }\n        var offset = document.offsetAt(position);\n        var nodepath = nodes.getNodePath(stylesheet, offset);\n        /**\n         * nodepath is top-down\n         * Build up the hover by appending inner node's information\n         */\n        var hover = null;\n        for (var i = 0; i < nodepath.length; i++) {\n            var node = nodepath[i];\n            if (node instanceof nodes.Selector) {\n                hover = {\n                    contents: selectorToMarkedString(node),\n                    range: getRange(node)\n                };\n                break;\n            }\n            if (node instanceof nodes.SimpleSelector) {\n                /**\n                 * Some sass specific at rules such as `@at-root` are parsed as `SimpleSelector`\n                 */\n                if (!startsWith(node.getText(), '@')) {\n                    hover = {\n                        contents: simpleSelectorToMarkedString(node),\n                        range: getRange(node)\n                    };\n                }\n                break;\n            }\n            if (node instanceof nodes.Declaration) {\n                var propertyName = node.getFullPropertyName();\n                var entry = languageFacts.cssDataManager.getProperty(propertyName);\n                if (entry) {\n                    hover = {\n                        contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n                        range: getRange(node)\n                    };\n                }\n                continue;\n            }\n            if (node instanceof nodes.UnknownAtRule) {\n                var atRuleName = node.getText();\n                var entry = languageFacts.cssDataManager.getAtDirective(atRuleName);\n                if (entry) {\n                    hover = {\n                        contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n                        range: getRange(node)\n                    };\n                }\n                continue;\n            }\n            if (node instanceof nodes.Node && node.type === nodes.NodeType.PseudoSelector) {\n                var selectorName = node.getText();\n                var entry = selectorName.slice(0, 2) === '::'\n                    ? languageFacts.cssDataManager.getPseudoElement(selectorName)\n                    : languageFacts.cssDataManager.getPseudoClass(selectorName);\n                if (entry) {\n                    hover = {\n                        contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n                        range: getRange(node)\n                    };\n                }\n                continue;\n            }\n        }\n        if (hover) {\n            hover.contents = this.convertContents(hover.contents);\n        }\n        return hover;\n    };\n    CSSHover.prototype.convertContents = function (contents) {\n        if (!this.doesSupportMarkdown()) {\n            if (typeof contents === 'string') {\n                return contents;\n            }\n            // MarkupContent\n            else if ('kind' in contents) {\n                return {\n                    kind: 'plaintext',\n                    value: contents.value\n                };\n            }\n            // MarkedString[]\n            else if (Array.isArray(contents)) {\n                return contents.map(function (c) {\n                    return typeof c === 'string' ? c : c.value;\n                });\n            }\n            // MarkedString\n            else {\n                return contents.value;\n            }\n        }\n        return contents;\n    };\n    CSSHover.prototype.doesSupportMarkdown = function () {\n        if (!isDefined(this.supportsMarkdown)) {\n            if (!isDefined(this.clientCapabilities)) {\n                this.supportsMarkdown = true;\n                return this.supportsMarkdown;\n            }\n            var hover = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.hover;\n            this.supportsMarkdown = hover && hover.contentFormat && Array.isArray(hover.contentFormat) && hover.contentFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    return CSSHover;\n}());\nexport { CSSHover };\n"]},"metadata":{},"sourceType":"module"}