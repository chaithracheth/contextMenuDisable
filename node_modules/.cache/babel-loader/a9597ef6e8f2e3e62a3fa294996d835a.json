{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nodes from '../parser/cssNodes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nexport var colorFunctions = [{\n  func: 'rgb($red, $green, $blue)',\n  desc: localize('css.builtin.rgb', 'Creates a Color from red, green, and blue values.')\n}, {\n  func: 'rgba($red, $green, $blue, $alpha)',\n  desc: localize('css.builtin.rgba', 'Creates a Color from red, green, blue, and alpha values.')\n}, {\n  func: 'hsl($hue, $saturation, $lightness)',\n  desc: localize('css.builtin.hsl', 'Creates a Color from hue, saturation, and lightness values.')\n}, {\n  func: 'hsla($hue, $saturation, $lightness, $alpha)',\n  desc: localize('css.builtin.hsla', 'Creates a Color from hue, saturation, lightness, and alpha values.')\n}];\nexport var colors = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgrey: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkslategrey: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgrey: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370d8',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#d87093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  red: '#ff0000',\n  rebeccapurple: '#663399',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32'\n};\nexport var colorKeywords = {\n  'currentColor': 'The value of the \\'color\\' property. The computed value of the \\'currentColor\\' keyword is the computed value of the \\'color\\' property. If the \\'currentColor\\' keyword is set on the \\'color\\' property itself, it is treated as \\'color:inherit\\' at parse time.',\n  'transparent': 'Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.'\n};\n\nfunction getNumericValue(node, factor) {\n  var val = node.getText();\n  var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(%?)$/);\n\n  if (m) {\n    if (m[2]) {\n      factor = 100.0;\n    }\n\n    var result = parseFloat(m[1]) / factor;\n\n    if (result >= 0 && result <= 1) {\n      return result;\n    }\n  }\n\n  throw new Error();\n}\n\nfunction getAngle(node) {\n  var val = node.getText();\n  var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(deg)?$/);\n\n  if (m) {\n    return parseFloat(val) % 360;\n  }\n\n  throw new Error();\n}\n\nexport function isColorConstructor(node) {\n  var name = node.getName();\n\n  if (!name) {\n    return false;\n  }\n\n  return /^(rgb|rgba|hsl|hsla)$/gi.test(name);\n}\n/**\n * Returns true if the node is a color value - either\n * defined a hex number, as rgb or rgba function, or\n * as color name.\n */\n\nexport function isColorValue(node) {\n  if (node.type === nodes.NodeType.HexColorValue) {\n    return true;\n  } else if (node.type === nodes.NodeType.Function) {\n    return isColorConstructor(node);\n  } else if (node.type === nodes.NodeType.Identifier) {\n    if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n      return false;\n    }\n\n    var candidateColor = node.getText().toLowerCase();\n\n    if (candidateColor === 'none') {\n      return false;\n    }\n\n    if (colors[candidateColor]) {\n      return true;\n    }\n  }\n\n  return false;\n}\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar F = 70;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n  if (charCode < Digit0) {\n    return 0;\n  }\n\n  if (charCode <= Digit9) {\n    return charCode - Digit0;\n  }\n\n  if (charCode < a) {\n    charCode += a - A;\n  }\n\n  if (charCode >= a && charCode <= f) {\n    return charCode - a + 10;\n  }\n\n  return 0;\n}\nexport function colorFromHex(text) {\n  if (text[0] !== '#') {\n    return null;\n  }\n\n  switch (text.length) {\n    case 4:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: 1\n      };\n\n    case 5:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: hexDigit(text.charCodeAt(4)) * 0x11 / 255.0\n      };\n\n    case 7:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: 1\n      };\n\n    case 9:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n      };\n  }\n\n  return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n\n  return {\n    red: red / 255.0,\n    green: green / 255.0,\n    blue: blue / 255.0,\n    alpha: alpha\n  };\n}\nexport function colorFromHSL(hue, sat, light, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n\n  hue = hue / 60.0;\n\n  if (sat === 0) {\n    return {\n      red: light,\n      green: light,\n      blue: light,\n      alpha: alpha\n    };\n  } else {\n    var hueToRgb = function (t1, t2, hue) {\n      while (hue < 0) {\n        hue += 6;\n      }\n\n      while (hue >= 6) {\n        hue -= 6;\n      }\n\n      if (hue < 1) {\n        return (t2 - t1) * hue + t1;\n      }\n\n      if (hue < 3) {\n        return t2;\n      }\n\n      if (hue < 4) {\n        return (t2 - t1) * (4 - hue) + t1;\n      }\n\n      return t1;\n    };\n\n    var t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;\n    var t1 = light * 2 - t2;\n    return {\n      red: hueToRgb(t1, t2, hue + 2),\n      green: hueToRgb(t1, t2, hue),\n      blue: hueToRgb(t1, t2, hue - 2),\n      alpha: alpha\n    };\n  }\n}\nexport function hslFromColor(rgba) {\n  var r = rgba.red;\n  var g = rgba.green;\n  var b = rgba.blue;\n  var a = rgba.alpha;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = 0;\n  var s = 0;\n  var l = (min + max) / 2;\n  var chroma = max - min;\n\n  if (chroma > 0) {\n    s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n\n    switch (max) {\n      case r:\n        h = (g - b) / chroma + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / chroma + 2;\n        break;\n\n      case b:\n        h = (r - g) / chroma + 4;\n        break;\n    }\n\n    h *= 60;\n    h = Math.round(h);\n  }\n\n  return {\n    h: h,\n    s: s,\n    l: l,\n    a: a\n  };\n}\nexport function getColorValue(node) {\n  if (node.type === nodes.NodeType.HexColorValue) {\n    var text = node.getText();\n    return colorFromHex(text);\n  } else if (node.type === nodes.NodeType.Function) {\n    var functionNode = node;\n    var name = functionNode.getName();\n    var colorValues = functionNode.getArguments().getChildren();\n\n    if (!name || colorValues.length < 3 || colorValues.length > 4) {\n      return null;\n    }\n\n    try {\n      var alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;\n\n      if (name === 'rgb' || name === 'rgba') {\n        return {\n          red: getNumericValue(colorValues[0], 255.0),\n          green: getNumericValue(colorValues[1], 255.0),\n          blue: getNumericValue(colorValues[2], 255.0),\n          alpha: alpha\n        };\n      } else if (name === 'hsl' || name === 'hsla') {\n        var h = getAngle(colorValues[0]);\n        var s = getNumericValue(colorValues[1], 100.0);\n        var l = getNumericValue(colorValues[2], 100.0);\n        return colorFromHSL(h, s, l, alpha);\n      }\n    } catch (e) {\n      // parse error on numeric value\n      return null;\n    }\n  } else if (node.type === nodes.NodeType.Identifier) {\n    if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n      return null;\n    }\n\n    var term = node.parent;\n\n    if (term && term.parent && term.parent.type === nodes.NodeType.BinaryExpression) {\n      var expression = term.parent;\n\n      if (expression.parent && expression.parent.type === nodes.NodeType.ListEntry && expression.parent.key === expression) {\n        return null;\n      }\n    }\n\n    var candidateColor = node.getText().toLowerCase();\n\n    if (candidateColor === 'none') {\n      return null;\n    }\n\n    var colorHex = colors[candidateColor];\n\n    if (colorHex) {\n      return colorFromHex(colorHex);\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/colors.js"],"names":["nodes","nls","localize","loadMessageBundle","colorFunctions","func","desc","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colorKeywords","getNumericValue","node","factor","val","getText","m","match","result","parseFloat","Error","getAngle","isColorConstructor","name","getName","test","isColorValue","type","NodeType","HexColorValue","Function","Identifier","parent","Term","candidateColor","toLowerCase","Digit0","Digit9","A","F","a","f","hexDigit","charCode","colorFromHex","text","length","charCodeAt","alpha","colorFrom256RGB","colorFromHSL","hue","sat","light","hueToRgb","t1","t2","hslFromColor","rgba","r","g","b","max","Math","min","h","s","l","chroma","round","getColorValue","functionNode","colorValues","getArguments","getChildren","e","term","BinaryExpression","expression","ListEntry","key","colorHex"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nodes from '../parser/cssNodes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nexport var colorFunctions = [\n    { func: 'rgb($red, $green, $blue)', desc: localize('css.builtin.rgb', 'Creates a Color from red, green, and blue values.') },\n    { func: 'rgba($red, $green, $blue, $alpha)', desc: localize('css.builtin.rgba', 'Creates a Color from red, green, blue, and alpha values.') },\n    { func: 'hsl($hue, $saturation, $lightness)', desc: localize('css.builtin.hsl', 'Creates a Color from hue, saturation, and lightness values.') },\n    { func: 'hsla($hue, $saturation, $lightness, $alpha)', desc: localize('css.builtin.hsla', 'Creates a Color from hue, saturation, lightness, and alpha values.') }\n];\nexport var colors = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgrey: '#a9a9a9',\n    darkgreen: '#006400',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    grey: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgrey: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370d8',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#d87093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    red: '#ff0000',\n    rebeccapurple: '#663399',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n};\nexport var colorKeywords = {\n    'currentColor': 'The value of the \\'color\\' property. The computed value of the \\'currentColor\\' keyword is the computed value of the \\'color\\' property. If the \\'currentColor\\' keyword is set on the \\'color\\' property itself, it is treated as \\'color:inherit\\' at parse time.',\n    'transparent': 'Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.',\n};\nfunction getNumericValue(node, factor) {\n    var val = node.getText();\n    var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(%?)$/);\n    if (m) {\n        if (m[2]) {\n            factor = 100.0;\n        }\n        var result = parseFloat(m[1]) / factor;\n        if (result >= 0 && result <= 1) {\n            return result;\n        }\n    }\n    throw new Error();\n}\nfunction getAngle(node) {\n    var val = node.getText();\n    var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(deg)?$/);\n    if (m) {\n        return parseFloat(val) % 360;\n    }\n    throw new Error();\n}\nexport function isColorConstructor(node) {\n    var name = node.getName();\n    if (!name) {\n        return false;\n    }\n    return /^(rgb|rgba|hsl|hsla)$/gi.test(name);\n}\n/**\n * Returns true if the node is a color value - either\n * defined a hex number, as rgb or rgba function, or\n * as color name.\n */\nexport function isColorValue(node) {\n    if (node.type === nodes.NodeType.HexColorValue) {\n        return true;\n    }\n    else if (node.type === nodes.NodeType.Function) {\n        return isColorConstructor(node);\n    }\n    else if (node.type === nodes.NodeType.Identifier) {\n        if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n            return false;\n        }\n        var candidateColor = node.getText().toLowerCase();\n        if (candidateColor === 'none') {\n            return false;\n        }\n        if (colors[candidateColor]) {\n            return true;\n        }\n    }\n    return false;\n}\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar F = 70;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n    if (charCode < Digit0) {\n        return 0;\n    }\n    if (charCode <= Digit9) {\n        return charCode - Digit0;\n    }\n    if (charCode < a) {\n        charCode += (a - A);\n    }\n    if (charCode >= a && charCode <= f) {\n        return charCode - a + 10;\n    }\n    return 0;\n}\nexport function colorFromHex(text) {\n    if (text[0] !== '#') {\n        return null;\n    }\n    switch (text.length) {\n        case 4:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: 1\n            };\n        case 5:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,\n            };\n        case 7:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: 1\n            };\n        case 9:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n            };\n    }\n    return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    return {\n        red: red / 255.0,\n        green: green / 255.0,\n        blue: blue / 255.0,\n        alpha: alpha\n    };\n}\nexport function colorFromHSL(hue, sat, light, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    hue = hue / 60.0;\n    if (sat === 0) {\n        return { red: light, green: light, blue: light, alpha: alpha };\n    }\n    else {\n        var hueToRgb = function (t1, t2, hue) {\n            while (hue < 0) {\n                hue += 6;\n            }\n            while (hue >= 6) {\n                hue -= 6;\n            }\n            if (hue < 1) {\n                return (t2 - t1) * hue + t1;\n            }\n            if (hue < 3) {\n                return t2;\n            }\n            if (hue < 4) {\n                return (t2 - t1) * (4 - hue) + t1;\n            }\n            return t1;\n        };\n        var t2 = light <= 0.5 ? (light * (sat + 1)) : (light + sat - (light * sat));\n        var t1 = light * 2 - t2;\n        return { red: hueToRgb(t1, t2, hue + 2), green: hueToRgb(t1, t2, hue), blue: hueToRgb(t1, t2, hue - 2), alpha: alpha };\n    }\n}\nexport function hslFromColor(rgba) {\n    var r = rgba.red;\n    var g = rgba.green;\n    var b = rgba.blue;\n    var a = rgba.alpha;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (min + max) / 2;\n    var chroma = max - min;\n    if (chroma > 0) {\n        s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\n        switch (max) {\n            case r:\n                h = (g - b) / chroma + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / chroma + 2;\n                break;\n            case b:\n                h = (r - g) / chroma + 4;\n                break;\n        }\n        h *= 60;\n        h = Math.round(h);\n    }\n    return { h: h, s: s, l: l, a: a };\n}\nexport function getColorValue(node) {\n    if (node.type === nodes.NodeType.HexColorValue) {\n        var text = node.getText();\n        return colorFromHex(text);\n    }\n    else if (node.type === nodes.NodeType.Function) {\n        var functionNode = node;\n        var name = functionNode.getName();\n        var colorValues = functionNode.getArguments().getChildren();\n        if (!name || colorValues.length < 3 || colorValues.length > 4) {\n            return null;\n        }\n        try {\n            var alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;\n            if (name === 'rgb' || name === 'rgba') {\n                return {\n                    red: getNumericValue(colorValues[0], 255.0),\n                    green: getNumericValue(colorValues[1], 255.0),\n                    blue: getNumericValue(colorValues[2], 255.0),\n                    alpha: alpha\n                };\n            }\n            else if (name === 'hsl' || name === 'hsla') {\n                var h = getAngle(colorValues[0]);\n                var s = getNumericValue(colorValues[1], 100.0);\n                var l = getNumericValue(colorValues[2], 100.0);\n                return colorFromHSL(h, s, l, alpha);\n            }\n        }\n        catch (e) {\n            // parse error on numeric value\n            return null;\n        }\n    }\n    else if (node.type === nodes.NodeType.Identifier) {\n        if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n            return null;\n        }\n        var term = node.parent;\n        if (term && term.parent && term.parent.type === nodes.NodeType.BinaryExpression) {\n            var expression = term.parent;\n            if (expression.parent && expression.parent.type === nodes.NodeType.ListEntry && expression.parent.key === expression) {\n                return null;\n            }\n        }\n        var candidateColor = node.getText().toLowerCase();\n        if (candidateColor === 'none') {\n            return null;\n        }\n        var colorHex = colors[candidateColor];\n        if (colorHex) {\n            return colorFromHex(colorHex);\n        }\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}