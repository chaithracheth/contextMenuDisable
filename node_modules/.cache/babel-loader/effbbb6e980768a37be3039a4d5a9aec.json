{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { includes } from '../utils/arrays.js';\n\nvar Element =\n/** @class */\nfunction () {\n  function Element(decl) {\n    this.fullPropertyName = decl.getFullPropertyName().toLowerCase();\n    this.node = decl;\n  }\n\n  return Element;\n}();\n\nexport { Element };\n\nfunction setSide(model, side, value, property) {\n  var state = model[side];\n  state.value = value;\n\n  if (value) {\n    if (!includes(state.properties, property)) {\n      state.properties.push(property);\n    }\n  }\n}\n\nfunction setAllSides(model, value, property) {\n  setSide(model, 'top', value, property);\n  setSide(model, 'right', value, property);\n  setSide(model, 'bottom', value, property);\n  setSide(model, 'left', value, property);\n}\n\nfunction updateModelWithValue(model, side, value, property) {\n  if (side === 'top' || side === 'right' || side === 'bottom' || side === 'left') {\n    setSide(model, side, value, property);\n  } else {\n    setAllSides(model, value, property);\n  }\n}\n\nfunction updateModelWithList(model, values, property) {\n  switch (values.length) {\n    case 1:\n      updateModelWithValue(model, undefined, values[0], property);\n      break;\n\n    case 2:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'bottom', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'left', values[1], property);\n      break;\n\n    case 3:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'left', values[1], property);\n      updateModelWithValue(model, 'bottom', values[2], property);\n      break;\n\n    case 4:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'bottom', values[2], property);\n      updateModelWithValue(model, 'left', values[3], property);\n      break;\n  }\n}\n\nfunction matches(value, candidates) {\n  for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n    var candidate = candidates_1[_i];\n\n    if (value.matches(candidate)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\n\n\nfunction checkLineWidth(value, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  if (allowsKeywords && matches(value, ['initial', 'unset'])) {\n    return false;\n  } // a <length> is a value and a unit\n  // so use `parseFloat` to strip the unit\n\n\n  return parseFloat(value.getText()) !== 0;\n}\n\nfunction checkLineWidthList(nodes, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  return nodes.map(function (node) {\n    return checkLineWidth(node, allowsKeywords);\n  });\n}\n/**\n * @param allowsKeywords whether keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\n\n\nfunction checkLineStyle(valueNode, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  if (matches(valueNode, ['none', 'hidden'])) {\n    return false;\n  }\n\n  if (allowsKeywords && matches(valueNode, ['initial', 'unset'])) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkLineStyleList(nodes, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  return nodes.map(function (node) {\n    return checkLineStyle(node, allowsKeywords);\n  });\n}\n\nfunction checkBorderShorthand(node) {\n  var children = node.getChildren(); // the only child can be a keyword, a <line-width>, or a <line-style>\n  // if either check returns false, the result is no border\n\n  if (children.length === 1) {\n    var value = children[0];\n    return checkLineWidth(value) && checkLineStyle(value);\n  } // multiple children can't contain keywords\n  // if any child means no border, the result is no border\n\n\n  for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n    var child = children_1[_i];\n    var value = child;\n\n    if (!checkLineWidth(value,\n    /* allowsKeywords: */\n    false) || !checkLineStyle(value,\n    /* allowsKeywords: */\n    false)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default function calculateBoxModel(propertyTable) {\n  var model = {\n    top: {\n      value: false,\n      properties: []\n    },\n    right: {\n      value: false,\n      properties: []\n    },\n    bottom: {\n      value: false,\n      properties: []\n    },\n    left: {\n      value: false,\n      properties: []\n    }\n  };\n\n  for (var _i = 0, propertyTable_1 = propertyTable; _i < propertyTable_1.length; _i++) {\n    var property = propertyTable_1[_i];\n    var value = property.node.value;\n\n    if (typeof value === 'undefined') {\n      continue;\n    }\n\n    switch (property.fullPropertyName) {\n      case 'box-sizing':\n        // has `box-sizing`, bail out\n        return {\n          top: {\n            value: false,\n            properties: []\n          },\n          right: {\n            value: false,\n            properties: []\n          },\n          bottom: {\n            value: false,\n            properties: []\n          },\n          left: {\n            value: false,\n            properties: []\n          }\n        };\n\n      case 'width':\n        model.width = property;\n        break;\n\n      case 'height':\n        model.height = property;\n        break;\n\n      default:\n        var segments = property.fullPropertyName.split('-');\n\n        switch (segments[0]) {\n          case 'border':\n            switch (segments[1]) {\n              case undefined:\n              case 'top':\n              case 'right':\n              case 'bottom':\n              case 'left':\n                switch (segments[2]) {\n                  case undefined:\n                    updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);\n                    break;\n\n                  case 'width':\n                    // the initial value of `border-width` is `medium`, not zero\n                    updateModelWithValue(model, segments[1], checkLineWidth(value, false), property);\n                    break;\n\n                  case 'style':\n                    // the initial value of `border-style` is `none`\n                    updateModelWithValue(model, segments[1], checkLineStyle(value, true), property);\n                    break;\n                }\n\n                break;\n\n              case 'width':\n                // the initial value of `border-width` is `medium`, not zero\n                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);\n                break;\n\n              case 'style':\n                // the initial value of `border-style` is `none`\n                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);\n                break;\n            }\n\n            break;\n\n          case 'padding':\n            if (segments.length === 1) {\n              // the initial value of `padding` is zero\n              updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);\n            } else {\n              // the initial value of `padding` is zero\n              updateModelWithValue(model, segments[1], checkLineWidth(value, true), property);\n            }\n\n            break;\n        }\n\n        break;\n    }\n  }\n\n  return model;\n}","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintUtil.js"],"names":["includes","Element","decl","fullPropertyName","getFullPropertyName","toLowerCase","node","setSide","model","side","value","property","state","properties","push","setAllSides","updateModelWithValue","updateModelWithList","values","length","undefined","matches","candidates","_i","candidates_1","candidate","checkLineWidth","allowsKeywords","parseFloat","getText","checkLineWidthList","nodes","map","checkLineStyle","valueNode","checkLineStyleList","checkBorderShorthand","children","getChildren","children_1","child","calculateBoxModel","propertyTable","top","right","bottom","left","propertyTable_1","width","height","segments","split"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { includes } from '../utils/arrays.js';\nvar Element = /** @class */ (function () {\n    function Element(decl) {\n        this.fullPropertyName = decl.getFullPropertyName().toLowerCase();\n        this.node = decl;\n    }\n    return Element;\n}());\nexport { Element };\nfunction setSide(model, side, value, property) {\n    var state = model[side];\n    state.value = value;\n    if (value) {\n        if (!includes(state.properties, property)) {\n            state.properties.push(property);\n        }\n    }\n}\nfunction setAllSides(model, value, property) {\n    setSide(model, 'top', value, property);\n    setSide(model, 'right', value, property);\n    setSide(model, 'bottom', value, property);\n    setSide(model, 'left', value, property);\n}\nfunction updateModelWithValue(model, side, value, property) {\n    if (side === 'top' || side === 'right' ||\n        side === 'bottom' || side === 'left') {\n        setSide(model, side, value, property);\n    }\n    else {\n        setAllSides(model, value, property);\n    }\n}\nfunction updateModelWithList(model, values, property) {\n    switch (values.length) {\n        case 1:\n            updateModelWithValue(model, undefined, values[0], property);\n            break;\n        case 2:\n            updateModelWithValue(model, 'top', values[0], property);\n            updateModelWithValue(model, 'bottom', values[0], property);\n            updateModelWithValue(model, 'right', values[1], property);\n            updateModelWithValue(model, 'left', values[1], property);\n            break;\n        case 3:\n            updateModelWithValue(model, 'top', values[0], property);\n            updateModelWithValue(model, 'right', values[1], property);\n            updateModelWithValue(model, 'left', values[1], property);\n            updateModelWithValue(model, 'bottom', values[2], property);\n            break;\n        case 4:\n            updateModelWithValue(model, 'top', values[0], property);\n            updateModelWithValue(model, 'right', values[1], property);\n            updateModelWithValue(model, 'bottom', values[2], property);\n            updateModelWithValue(model, 'left', values[3], property);\n            break;\n    }\n}\nfunction matches(value, candidates) {\n    for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n        var candidate = candidates_1[_i];\n        if (value.matches(candidate)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\nfunction checkLineWidth(value, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    if (allowsKeywords && matches(value, ['initial', 'unset'])) {\n        return false;\n    }\n    // a <length> is a value and a unit\n    // so use `parseFloat` to strip the unit\n    return parseFloat(value.getText()) !== 0;\n}\nfunction checkLineWidthList(nodes, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    return nodes.map(function (node) { return checkLineWidth(node, allowsKeywords); });\n}\n/**\n * @param allowsKeywords whether keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\nfunction checkLineStyle(valueNode, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    if (matches(valueNode, ['none', 'hidden'])) {\n        return false;\n    }\n    if (allowsKeywords && matches(valueNode, ['initial', 'unset'])) {\n        return false;\n    }\n    return true;\n}\nfunction checkLineStyleList(nodes, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    return nodes.map(function (node) { return checkLineStyle(node, allowsKeywords); });\n}\nfunction checkBorderShorthand(node) {\n    var children = node.getChildren();\n    // the only child can be a keyword, a <line-width>, or a <line-style>\n    // if either check returns false, the result is no border\n    if (children.length === 1) {\n        var value = children[0];\n        return checkLineWidth(value) && checkLineStyle(value);\n    }\n    // multiple children can't contain keywords\n    // if any child means no border, the result is no border\n    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n        var child = children_1[_i];\n        var value = child;\n        if (!checkLineWidth(value, /* allowsKeywords: */ false) ||\n            !checkLineStyle(value, /* allowsKeywords: */ false)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport default function calculateBoxModel(propertyTable) {\n    var model = {\n        top: { value: false, properties: [] },\n        right: { value: false, properties: [] },\n        bottom: { value: false, properties: [] },\n        left: { value: false, properties: [] },\n    };\n    for (var _i = 0, propertyTable_1 = propertyTable; _i < propertyTable_1.length; _i++) {\n        var property = propertyTable_1[_i];\n        var value = property.node.value;\n        if (typeof value === 'undefined') {\n            continue;\n        }\n        switch (property.fullPropertyName) {\n            case 'box-sizing':\n                // has `box-sizing`, bail out\n                return {\n                    top: { value: false, properties: [] },\n                    right: { value: false, properties: [] },\n                    bottom: { value: false, properties: [] },\n                    left: { value: false, properties: [] },\n                };\n            case 'width':\n                model.width = property;\n                break;\n            case 'height':\n                model.height = property;\n                break;\n            default:\n                var segments = property.fullPropertyName.split('-');\n                switch (segments[0]) {\n                    case 'border':\n                        switch (segments[1]) {\n                            case undefined:\n                            case 'top':\n                            case 'right':\n                            case 'bottom':\n                            case 'left':\n                                switch (segments[2]) {\n                                    case undefined:\n                                        updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);\n                                        break;\n                                    case 'width':\n                                        // the initial value of `border-width` is `medium`, not zero\n                                        updateModelWithValue(model, segments[1], checkLineWidth(value, false), property);\n                                        break;\n                                    case 'style':\n                                        // the initial value of `border-style` is `none`\n                                        updateModelWithValue(model, segments[1], checkLineStyle(value, true), property);\n                                        break;\n                                }\n                                break;\n                            case 'width':\n                                // the initial value of `border-width` is `medium`, not zero\n                                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);\n                                break;\n                            case 'style':\n                                // the initial value of `border-style` is `none`\n                                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);\n                                break;\n                        }\n                        break;\n                    case 'padding':\n                        if (segments.length === 1) {\n                            // the initial value of `padding` is zero\n                            updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);\n                        }\n                        else {\n                            // the initial value of `padding` is zero\n                            updateModelWithValue(model, segments[1], checkLineWidth(value, true), property);\n                        }\n                        break;\n                }\n                break;\n        }\n    }\n    return model;\n}\n"]},"metadata":{},"sourceType":"module"}