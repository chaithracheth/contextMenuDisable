{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function startsWith(haystack, needle) {\n  if (haystack.length < needle.length) {\n    return false;\n  }\n\n  for (var i = 0; i < needle.length; i++) {\n    if (haystack[i] !== needle[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Determines if haystack ends with needle.\n */\n\nexport function endsWith(haystack, needle) {\n  var diff = haystack.length - needle.length;\n\n  if (diff > 0) {\n    return haystack.lastIndexOf(needle) === diff;\n  } else if (diff === 0) {\n    return haystack === needle;\n  } else {\n    return false;\n  }\n}\n/**\n * @returns the length of the common prefix of the two strings.\n */\n\nexport function commonPrefixLength(a, b) {\n  var i;\n  var len = Math.min(a.length, b.length);\n\n  for (i = 0; i < len; i++) {\n    if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n      return i;\n    }\n  }\n\n  return len;\n}\nexport function repeat(value, count) {\n  var s = '';\n\n  while (count > 0) {\n    if ((count & 1) === 1) {\n      s += value;\n    }\n\n    value += value;\n    count = count >>> 1;\n  }\n\n  return s;\n}\n\nvar _a = 'a'.charCodeAt(0);\n\nvar _z = 'z'.charCodeAt(0);\n\nvar _A = 'A'.charCodeAt(0);\n\nvar _Z = 'Z'.charCodeAt(0);\n\nvar _0 = '0'.charCodeAt(0);\n\nvar _9 = '9'.charCodeAt(0);\n\nexport function isLetterOrDigit(text, index) {\n  var c = text.charCodeAt(index);\n  return _a <= c && c <= _z || _A <= c && c <= _Z || _0 <= c && c <= _9;\n}","map":{"version":3,"sources":["/home/chaithra/Documents/customised/customised/node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js"],"names":["startsWith","haystack","needle","length","i","endsWith","diff","lastIndexOf","commonPrefixLength","a","b","len","Math","min","charCodeAt","repeat","value","count","s","_a","_z","_A","_Z","_0","_9","isLetterOrDigit","text","index","c"],"mappings":"AAAA;;;;AAIA,OAAO,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,MAA9B,EAAsC;AACzC,MAAID,QAAQ,CAACE,MAAT,GAAkBD,MAAM,CAACC,MAA7B,EAAqC;AACjC,WAAO,KAAP;AACH;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC,QAAIH,QAAQ,CAACG,CAAD,CAAR,KAAgBF,MAAM,CAACE,CAAD,CAA1B,EAA+B;AAC3B,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD;;;;AAGA,OAAO,SAASC,QAAT,CAAkBJ,QAAlB,EAA4BC,MAA5B,EAAoC;AACvC,MAAII,IAAI,GAAGL,QAAQ,CAACE,MAAT,GAAkBD,MAAM,CAACC,MAApC;;AACA,MAAIG,IAAI,GAAG,CAAX,EAAc;AACV,WAAOL,QAAQ,CAACM,WAAT,CAAqBL,MAArB,MAAiCI,IAAxC;AACH,GAFD,MAGK,IAAIA,IAAI,KAAK,CAAb,EAAgB;AACjB,WAAOL,QAAQ,KAAKC,MAApB;AACH,GAFI,MAGA;AACD,WAAO,KAAP;AACH;AACJ;AACD;;;;AAGA,OAAO,SAASM,kBAAT,CAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC;AACrC,MAAIN,CAAJ;AACA,MAAIO,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASJ,CAAC,CAACN,MAAX,EAAmBO,CAAC,CAACP,MAArB,CAAV;;AACA,OAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGO,GAAhB,EAAqBP,CAAC,EAAtB,EAA0B;AACtB,QAAIK,CAAC,CAACK,UAAF,CAAaV,CAAb,MAAoBM,CAAC,CAACI,UAAF,CAAaV,CAAb,CAAxB,EAAyC;AACrC,aAAOA,CAAP;AACH;AACJ;;AACD,SAAOO,GAAP;AACH;AACD,OAAO,SAASI,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8B;AACjC,MAAIC,CAAC,GAAG,EAAR;;AACA,SAAOD,KAAK,GAAG,CAAf,EAAkB;AACd,QAAI,CAACA,KAAK,GAAG,CAAT,MAAgB,CAApB,EAAuB;AACnBC,MAAAA,CAAC,IAAIF,KAAL;AACH;;AACDA,IAAAA,KAAK,IAAIA,KAAT;AACAC,IAAAA,KAAK,GAAGA,KAAK,KAAK,CAAlB;AACH;;AACD,SAAOC,CAAP;AACH;;AACD,IAAIC,EAAE,GAAG,IAAIL,UAAJ,CAAe,CAAf,CAAT;;AACA,IAAIM,EAAE,GAAG,IAAIN,UAAJ,CAAe,CAAf,CAAT;;AACA,IAAIO,EAAE,GAAG,IAAIP,UAAJ,CAAe,CAAf,CAAT;;AACA,IAAIQ,EAAE,GAAG,IAAIR,UAAJ,CAAe,CAAf,CAAT;;AACA,IAAIS,EAAE,GAAG,IAAIT,UAAJ,CAAe,CAAf,CAAT;;AACA,IAAIU,EAAE,GAAG,IAAIV,UAAJ,CAAe,CAAf,CAAT;;AACA,OAAO,SAASW,eAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AACzC,MAAIC,CAAC,GAAGF,IAAI,CAACZ,UAAL,CAAgBa,KAAhB,CAAR;AACA,SAAQR,EAAE,IAAIS,CAAN,IAAWA,CAAC,IAAIR,EAAjB,IAAyBC,EAAE,IAAIO,CAAN,IAAWA,CAAC,IAAIN,EAAzC,IAAiDC,EAAE,IAAIK,CAAN,IAAWA,CAAC,IAAIJ,EAAxE;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function startsWith(haystack, needle) {\n    if (haystack.length < needle.length) {\n        return false;\n    }\n    for (var i = 0; i < needle.length; i++) {\n        if (haystack[i] !== needle[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Determines if haystack ends with needle.\n */\nexport function endsWith(haystack, needle) {\n    var diff = haystack.length - needle.length;\n    if (diff > 0) {\n        return haystack.lastIndexOf(needle) === diff;\n    }\n    else if (diff === 0) {\n        return haystack === needle;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * @returns the length of the common prefix of the two strings.\n */\nexport function commonPrefixLength(a, b) {\n    var i;\n    var len = Math.min(a.length, b.length);\n    for (i = 0; i < len; i++) {\n        if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n            return i;\n        }\n    }\n    return len;\n}\nexport function repeat(value, count) {\n    var s = '';\n    while (count > 0) {\n        if ((count & 1) === 1) {\n            s += value;\n        }\n        value += value;\n        count = count >>> 1;\n    }\n    return s;\n}\nvar _a = 'a'.charCodeAt(0);\nvar _z = 'z'.charCodeAt(0);\nvar _A = 'A'.charCodeAt(0);\nvar _Z = 'Z'.charCodeAt(0);\nvar _0 = '0'.charCodeAt(0);\nvar _9 = '9'.charCodeAt(0);\nexport function isLetterOrDigit(text, index) {\n    var c = text.charCodeAt(index);\n    return (_a <= c && c <= _z) || (_A <= c && c <= _Z) || (_0 <= c && c <= _9);\n}\n"]},"metadata":{},"sourceType":"module"}